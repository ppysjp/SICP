#lang racket

(define (make-accumulator initial)
  (lambda (amount)
    (begin (set! initial (+ initial amount))
	   initial)))

(define (make-counter)
  (let ((accumulator (make-accumulator 0))
	(count 0))
    (define (calls) count)
    (define (increment) (set! count (accumulator 1)))
    (define (reset) (begin (set! accumulator (make-accumulator 0))
			   (set! count 0)))
    (define (dispatch m)
      (cond ((eq? m 'how-many-calls?) calls)
	    ((eq? m 'increment) increment)
	    ((eq? m 'reset-count) reset)
	    (else (error "Unknown request --MAKE-ACCUMULATOR" m))))
    dispatch))


;; Ex3_3 and Ex3_4

(define (make-account balance password)
  (let ((C (make-counter)))
    (define (withdraw amount)
      (if (>= balance amount)
	  (begin (set! balance (- balance amount))
		 balance)
	  "Insuffient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (call-the-cops) "Call the Cops!")
    (define (incorrect-password amount)
      (if (> ((C 'how-many-calls?)) 6)
	  (call-the-cops)
	  (begin ((C 'increment))
		 ((C 'how-many-calls?))
		 "Incorrect Password")))
    (define (dispatch p m)
      (cond ((not (eq? p password)) incorrect-password)
	    ((and (eq? p password) (eq? m 'withdraw)) withdraw)
	    ((and (eq? p password) (eq? m 'deposit)) deposit)
	    ((and (eq? p password) (eq? m 'balance)) balance)
	    (else (error "Unknown request -- MAKE-ACCOUNT" m))))
    dispatch))

(define acc (make-account 100 'secret-password))
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)
;((acc 'some-other-password 'withdraw) 40)

(provide make-accumulator make-counter make-account)
