Ok so I'm now just going to do some reading.
First I'm going to read the question and make sure that I understand it.
Ok so I've just read the section.
I'm now going to read the question and make sure I understand it.
In order to be able to do this question in racket you have install a library and then
use the mutable version of of cons,car and cdr which are denoted mcons, mcar and mcdr.

Cool so now I'm going to make some further progress on the questions at hand. 

Draw box and pointer digram to show what (cdr x) is.

My thinking was correct. The box and pointer diagram I drew was correct and now that I got the 
correct library working for the file I'm working it's working which is good :) 

I think what is interesting about this question is that there is the 'append' function 
and the 'append!' function. It looks to me as though the latter has isolated where the 
change of state takes place, whereas with the original append function we weren't too sure
how it was working. Essentially the 'append!' function reads more easily at the cost of 
introducing state.

In this quetion we are intirduced to the idea of a 'mutator' rather than a 'constructor'
where 'append!' is the former and 'append' is the latter. 