SICP
----

I'm trying to do exercise 3_6.
To do this 


So I think that this new-rand object needs an internal state object which I will call seed. 
I will also redefine rand and call it  rand and call it  rand and call it rand seed. 
Ok so my rand-seed function is not doing as I expected which is a bit annoying. 
by seeding it every time it is called it doesn't generate new random numbers.
I wonder if it is because I'm using x every time so I'm going to remove the let.  

I need a function that I can seed externally that will produce random numbers. 

I need to be able to create a seeded random function. 
I want to be able to passs into the random function the seed. 
And then I want the random function to keep that seed in perpituity.  
At the moment my ran seed is producing the same number every time it is called. 
The reason for this is it is everytime it is called wiht seed the rand-update function is being called 
with an argument of 40. 

It's really quite hard to know what to do here. 

Maybe I need two internal variables. 
One that keeps the initial seed value. Let's call that one x. 
And the other we can call y the value that updates. 
I think the reason that I'm having issues is that x is being ovewritten every time seed is being called. 

------

So I think the reason I struggled partly yesterday solving this was because I didn't fully understand what the book 
was trying to explain to me. 

There is no denying that we do need a function that the function needs to take an argument. 

So I'm going to initialize a value which is called internal to -1 on the first call of my rand-seed function. 
If internal is -1 then I want to set internal to the randupdate of the seed. 
If internal then isn't -1 I want it to be set to the new randupdate of internal. 

So I think the current version of rand-seed is creating multiple different objects with an internal value of -1.
Instead of having one object, I have 2 differnt objects...

The issue with rand seed at the moment is that every time it is called it is overwriting 
the internal variable to it never goes dow the second path of the if statement. 

So my question is how do I stop this value from being overwritten. 

I feel like I need 2 variables that arein differnt scopes. 

Day 3
----- 

So my thinking is that I'll create rand seed by nesting rand into it...
I'm still running into the same problem.
I'm going to read on a bit and see if I can see the solution elsewhere. 
It looks as though to me there are separate objects being created every time 
and it's not a single object that is being created and then updated each time it is 
called. 

Struggled hard on this one. The seed needed to be internalised to the function. 
I also don't understand clojures. 
So yeah. 
Annying a bit. 


Day 4
-----

So we want the random number object to have internal state now that it calls the functions 
in the way that I want it to.