#lang racket

(require "Ex3_3.rkt")

(define (rand-update x)
  (let ((a 75)
	(b 74)
	(m (+ 1 (expt 2 16))))
    (modulo (+ (* a x) b) m)))


;; (define rand
;;   (let ((x 50))
;;     (lambda ()
;;       (set! x (rand-update x))
;;       x)))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond (( = trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1) (+ trials-passed 1)))
	  (else
	   (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(newline)

;(estimate-pi 1000)

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (square x) (* x x))

(define (mid-point a b)
  (/ (+ a b) 2))

(define (distance a b)
  (abs (- b a)))

(define (point x y)
  (cons x y))

(define (x-coordinate p)
  (car p))

(define (y-coordinate p)
  (cdr p))

(define (sum-square x y)
  (+ (square x) (square y)))


(define (sum-square-f p1 p2 f)
  (sum-square (f (x-coordinate p1)
		 (x-coordinate p2))
	      (f (y-coordinate p1)
		 (y-coordinate p2))))

(define (sum-square-distance p1 p2)
  (sum-square-f p1 p2 distance))


(define (random-point-in-rectangle x1 x2 y1 y2)
  (point (random-in-range x1 x2)
	 (random-in-range y1 y2)))


(define (unit-circle-test x1 x2 y1 y2)
  (let ((random-point (random-point-in-rectangle x1 x2 y1 y2))
	(x0 (mid-point x1 x2))
	(y0 (mid-point y1 y2))
	(radius (/ (distance x1 x2) 2)))
    (let ((centre-circle (point x0 y0)))
      (<= (sum-square-distance random-point centre-circle) (square radius)))))
  
(define (estimate-integral P x1 x2 y1 y2 trials)
  (let ((Area (* (distance x1 x2) (distance y1 y2))))
    (* Area (monte-carlo trials (lambda () (P x1 x2 y1 y2))))))

;(estimate-integral unit-circle-test -1 1 -1 1 10000)
(provide (all-defined-out))



