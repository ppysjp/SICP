So I think that we are going to need a function that has internal statevariable. 
We need a function that if (f 0) and then (f 1) is called then we get 0.
On the other hand if we call (f 1) and then (f 0) we get 1. 
To do this I'm going to have an internal state variable to my function f that is initialised
to a value. 

Cool. I'm not going to care if it is wrong.

We can test this out by assigning the value of whatever is returned by f(x) and then adding.

well what two numbers when added together make 0? 
+ 0 0 makes 0. 
So let's create a function without state that does that...

At the moment I will always get 0 because f is a pure function. So I need to get a none pure function.
To do that I'm going to introduce an internal state varialbe.
So now I've got an internal varibale even though I'm not really using it..

So the way that the function is going to work is that if 1 is supplied the internal variable will be incremented but
it always returns 0 other wise the internal variable is returned.

I've just realised that I need to use a lambda! The reason being that I'm just creating 'a's but they are different ones
that are being updated....
This piece of code needs modifying. 

So I think g is an function that has state... but it seems weird...

gacp "The internal state variable a isn't keeping its state which is annoying"

I think it's because the lambda and the let are the wrong way round?
I'm going to reconstruct g ...

Wooh the state is being stored! and I've learned somehting. 
'let' and then 'lambda' to create an object with state...