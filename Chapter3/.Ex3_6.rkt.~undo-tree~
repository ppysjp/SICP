(undo-tree-save-format-version . 1)
"3c9c17a893fa18b239a1fae807dfa3b7f1afa884"
[nil nil nil nil (25250 7473 250525 0) 0 nil]
([nil nil ((1 . 2) (t . -1)) nil (25250 7473 250524 0) 0 nil])
([nil nil ((#("#" 0 1 (fontified t)) . -1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 2) nil (25250 7473 250522 0) 0 nil])
([nil nil ((1 . 13)) nil (25250 7473 250510 0) 0 nil])
([nil nil ((13 . 15)) nil (25250 7473 250505 0) 0 nil])
([nil nil ((1 . 27) (#("#lang racket

" 0 5 (fontified t face font-lock-keyword-face) 5 12 (fontified t) 12 14 (fontified t)) . 1) (undo-tree-id95 . -13) (t 25250 7473 0 0)) nil (25279 7774 758811 0) 0 nil])
([nil nil ((27 . 28)) nil (25279 7774 758808 0) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -27) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 28) nil (25279 7774 758807 0) 0 nil])
([nil nil ((25 . 29)) nil (25279 7774 758805 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face font-lock-string-face)) . -28) (undo-tree-id90 . -1) (undo-tree-id91 . 1) (undo-tree-id92 . -1) 29) nil (25279 7774 758803 0) 0 nil])
([nil nil ((28 . 29)) nil (25279 7774 758800 0) 0 nil])
([nil nil ((29 . 30)) nil (25279 7774 758799 0) 0 nil])
([nil nil ((30 . 31)) nil (25279 7774 758798 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -29) (undo-tree-id82 . -1) (undo-tree-id83 . 1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -30) (undo-tree-id87 . -1) (undo-tree-id88 . 1) (undo-tree-id89 . -1) 31) nil (25279 7774 758796 0) 0 nil])
([nil nil ((29 . 30)) nil (25279 7774 758789 0) 0 nil])
([nil nil ((30 . 31)) nil (25279 7774 758788 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -29) (undo-tree-id74 . -1) (undo-tree-id75 . 1) (undo-tree-id76 . -1) (undo-tree-id77 . 1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -30) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 31) nil (25279 7774 758786 0) 0 nil])
([nil nil ((29 . 33)) nil (25279 7774 758779 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . -27) (undo-tree-id8 . -1) (undo-tree-id9 . 1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("3" 0 1 (fontified t face font-lock-string-face)) . -28) (undo-tree-id31 . -1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -29) (undo-tree-id50 . -1) (undo-tree-id51 . 1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("5" 0 1 (fontified t face font-lock-string-face)) . -30) (undo-tree-id59 . -1) (undo-tree-id60 . 1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -31) (undo-tree-id66 . -1) (undo-tree-id67 . 1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -32) (undo-tree-id71 . -1) (undo-tree-id72 . 1) (undo-tree-id73 . -1) 33) nil (25279 7774 758774 0) 0 nil])
([nil nil ((27 . 28)) nil (25279 7774 758723 0) 0 nil])
([nil nil ((28 . 33)) nil (25279 7774 758722 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-string-face)) . -31) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -32) (undo-tree-id5 . -1) (undo-tree-id6 . 1) (undo-tree-id7 . -1) 33) nil (25279 7774 758719 0) 0 nil])
([nil nil ((31 . 34)) nil (25279 7774 758702 0) 0 nil])
([nil nil ((36 . 37) 34) nil (25279 7774 758697 0) 0 nil])
([nil nil ((37 . 38) (t 25279 7774 0 0)) nil (25279 7898 837523 0) 0 nil])
([nil nil ((38 . 40)) nil (25279 7898 837521 0) 0 nil])
([nil nil ((39 . 45)) nil (25279 7898 837519 0) 0 nil])
([nil nil ((46 . 47) 45) nil (25279 7898 837514 0) 0 nil])
([nil nil ((38 . 124) (#("(rand 3)
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t)) . -38) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -9) (undo-tree-id7 . -9) (undo-tree-id8 . -9) (undo-tree-id9 . -9) (undo-tree-id10 . -9) (undo-tree-id11 . -9) (undo-tree-id12 . -9) (undo-tree-id13 . -9) (t 25279 7898 0 0)) nil (25279 8227 714394 0) 0 nil])
([nil nil ((124 . 125) (t 25279 8190 0 0)) nil (25279 8227 714385 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-comment-face)) . -124) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . 1) (undo-tree-id3 . -1) 125) nil (25279 8230 697836 0) 0 nil])
([nil nil ((124 . 125)) nil (25279 8234 649285 0) 0 nil] [nil nil ((130 . 131) (38 . 43) (124 . 125)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 124) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("					" 0 5 (fontified t)) . 38) (#("
" 0 1 (fontified t)) . 130) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . 1) (undo-tree-id27 . -1)) (25279 8230 697711 0) 0 nil] [nil nil ((38 . 43) (124 . 125)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 124) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) (#("					" 0 5 (fontified t)) . 38)) (25279 8227 714362 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 80) (undo-tree-id279 . -1) (38 . 43) (76 . 77)) nil (25279 8473 591783 0) 0 nil] [nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 129) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . 1) (undo-tree-id31 . -1) (38 . 43) (125 . 126)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 125) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . 1) (undo-tree-id36 . -1) (#("					" 0 5 (fontified nil)) . 38) (129 . 130)) (25279 8234 649150 0) 0 nil])
nil
nil
([nil nil ((81 . 82)) nil (25279 8473 591781 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -42) (undo-tree-id270 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id271 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id272 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id273 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id274 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id275 . -1) (#(" " 0 1 (fontified t)) . -48) (undo-tree-id276 . -1) (#(" " 0 1 (fontified nil)) . -49) (undo-tree-id277 . -1) (#("	" 0 1 (fontified nil)) . 50) (undo-tree-id278 . -1) (42 . 50) 43) nil (25279 8473 591779 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -41) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id263 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id264 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id265 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id266 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id267 . -1) (#(" " 0 1 (fontified nil)) . -48) (undo-tree-id268 . -1) (#("	" 0 1 (fontified nil)) . 49) (undo-tree-id269 . -1) (41 . 49) 42) nil (25279 8473 591769 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -43) (undo-tree-id255 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id256 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id257 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id258 . -1) (#(" " 0 1 (fontified nil)) . -47) (undo-tree-id259 . -1) (#("	" 0 1 (fontified nil)) . 48) (undo-tree-id260 . -1) (40 . 48) 41) nil (25279 8473 591759 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id252 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id253 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id254 . -1) 43) nil (25279 8473 591752 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -39) (undo-tree-id243 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id245 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id246 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id247 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id248 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id249 . -1) (#(" " 0 1 (fontified nil)) . -46) (undo-tree-id250 . -1) (#("	" 0 1 (fontified nil)) . 47) (undo-tree-id251 . -1) (39 . 47) 40) nil (25279 8473 591748 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -38) (undo-tree-id234 . -1) (#(" " 0 1 (fontified t)) . -39) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id236 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id237 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id239 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id240 . -1) (#(" " 0 1 (fontified nil)) . -45) (undo-tree-id241 . -1) (#("	" 0 1 (fontified nil)) . 46) (undo-tree-id242 . -1) (38 . 46) 39) nil (25279 8473 591737 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 130) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (76 . 81) (126 . 127)) nil (25279 8473 591728 0) 0 nil])
([nil nil ((130 . 134)) nil (25279 8473 591725 0) 0 nil])
([nil nil ((132 . 133)) nil (25279 8473 591724 0) 0 nil])
([nil nil ((133 . 135)) nil (25279 8473 591723 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 133) (#("(" 0 1 (fontified t)) . -133) (undo-tree-id230 . -1) 134) nil (25279 8473 591722 0) 0 nil])
([nil nil ((133 . 136) (#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 133)) nil (25279 8473 591720 0) 0 nil])
([nil nil ((136 . 138)) nil (25279 8473 591719 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 136) (undo-tree-id228 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -136) (undo-tree-id229 . -1) 137) nil (25279 8473 591718 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -80) (undo-tree-id219 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id220 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id222 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id224 . -1) (#(" " 0 1 (fontified t)) . -86) (undo-tree-id225 . -1) (#(" " 0 1 (fontified nil)) . -87) (undo-tree-id226 . -1) (#("	" 0 1 (fontified nil)) . 88) (undo-tree-id227 . -1) (80 . 88) 81) nil (25279 8473 591713 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -79) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id211 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id212 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id213 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id214 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id215 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id216 . -1) (#(" " 0 1 (fontified nil)) . -86) (undo-tree-id217 . -1) (#("	" 0 1 (fontified nil)) . 87) (undo-tree-id218 . -1) (79 . 87) 80) nil (25279 8473 591703 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -81) (undo-tree-id204 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id205 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id207 . -1) (#(" " 0 1 (fontified nil)) . -85) (undo-tree-id208 . -1) (#("	" 0 1 (fontified nil)) . 86) (undo-tree-id209 . -1) (78 . 86) 79) nil (25279 8473 591684 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -78) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -79) (undo-tree-id202 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id203 . -1) 81) nil (25279 8473 591677 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -77) (undo-tree-id192 . -1) (#(" " 0 1 (fontified t)) . -78) (undo-tree-id193 . -1) (#(" " 0 1 (fontified t)) . -79) (undo-tree-id194 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id195 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id196 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id197 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id198 . -1) (#(" " 0 1 (fontified nil)) . -84) (undo-tree-id199 . -1) (#("	" 0 1 (fontified nil)) . 85) (undo-tree-id200 . -1) (77 . 85) 78) nil (25279 8473 591672 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -75) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#(" " 0 1 (fontified t)) . -76) (undo-tree-id181 . -1) (#(" " 0 1 (fontified t)) . -77) (undo-tree-id182 . -1) (#(" " 0 1 (fontified t)) . -78) (undo-tree-id183 . -1) (#(" " 0 1 (fontified t)) . -79) (undo-tree-id184 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id186 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id187 . -1) (#(" " 0 1 (fontified nil)) . -83) (undo-tree-id188 . -1) (#("	" 0 1 (fontified nil)) . 84) (undo-tree-id189 . 1) (undo-tree-id190 . 1) (undo-tree-id191 . -1) (76 . 84) 77) nil (25279 8473 591661 0) 0 nil])
([nil nil ((81 . 86) (38 . 43) (75 . 76)) nil (25279 8473 591648 0) 0 nil])
([nil nil ((39 . 44) (#("					" 0 5 (fontified nil)) . -38) (undo-tree-id176 . -5) (43 . 44)) nil (25279 8473 591646 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -43) (undo-tree-id167 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id168 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id169 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id170 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id171 . -1) (#(" " 0 1 (fontified t)) . -48) (undo-tree-id172 . -1) (#(" " 0 1 (fontified t)) . -49) (undo-tree-id173 . -1) (#(" " 0 1 (fontified nil)) . -50) (undo-tree-id174 . -1) (#("	" 0 1 (fontified nil)) . 51) (undo-tree-id175 . -1) (43 . 51) 44) nil (25279 8473 591643 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -42) (undo-tree-id158 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id159 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id162 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id163 . -1) (#(" " 0 1 (fontified t)) . -48) (undo-tree-id164 . -1) (#(" " 0 1 (fontified nil)) . -49) (undo-tree-id165 . -1) (#("	" 0 1 (fontified nil)) . 50) (undo-tree-id166 . -1) (42 . 50) 43) nil (25279 8473 591633 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -44) (undo-tree-id152 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id153 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id154 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id155 . -1) (#(" " 0 1 (fontified nil)) . -48) (undo-tree-id156 . -1) (#("	" 0 1 (fontified nil)) . 49) (undo-tree-id157 . -1) (41 . 49) 42) nil (25279 8473 591623 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -41) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id150 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id151 . -1) 44) nil (25279 8473 591616 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id141 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id142 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id143 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id144 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id145 . -1) (#(" " 0 1 (fontified t)) . -46) (undo-tree-id146 . -1) (#(" " 0 1 (fontified nil)) . -47) (undo-tree-id147 . -1) (#("	" 0 1 (fontified nil)) . 48) (undo-tree-id148 . -1) (40 . 48) 41) nil (25279 8473 591612 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -39) (undo-tree-id131 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id133 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id134 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id135 . -1) (#(" " 0 1 (fontified t)) . -44) (undo-tree-id136 . -1) (#(" " 0 1 (fontified t)) . -45) (undo-tree-id137 . -1) (#(" " 0 1 (fontified nil)) . -46) (undo-tree-id138 . -1) (#("	" 0 1 (fontified nil)) . 47) (undo-tree-id139 . -1) (39 . 47) 40) nil (25279 8473 591595 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -81) (undo-tree-id122 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id123 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id125 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id126 . -1) (#(" " 0 1 (fontified t)) . -86) (undo-tree-id127 . -1) (#(" " 0 1 (fontified t)) . -87) (undo-tree-id128 . -1) (#(" " 0 1 (fontified nil)) . -88) (undo-tree-id129 . -1) (#("	" 0 1 (fontified nil)) . 89) (undo-tree-id130 . -1) (81 . 89) 82) nil (25279 8473 591584 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -80) (undo-tree-id113 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id114 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id115 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id116 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id117 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id118 . -1) (#(" " 0 1 (fontified t)) . -86) (undo-tree-id119 . -1) (#(" " 0 1 (fontified nil)) . -87) (undo-tree-id120 . -1) (#("	" 0 1 (fontified nil)) . 88) (undo-tree-id121 . -1) (80 . 88) 81) nil (25279 8473 591574 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -82) (undo-tree-id107 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id108 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id109 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id110 . -1) (#(" " 0 1 (fontified nil)) . -86) (undo-tree-id111 . -1) (#("	" 0 1 (fontified nil)) . 87) (undo-tree-id112 . -1) (79 . 87) 80) nil (25279 8473 591564 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -79) (undo-tree-id104 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id105 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id106 . -1) 82) nil (25279 8473 591557 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -78) (undo-tree-id95 . -1) (#(" " 0 1 (fontified t)) . -79) (undo-tree-id96 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id97 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id98 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id99 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id100 . -1) (#(" " 0 1 (fontified t)) . -84) (undo-tree-id101 . -1) (#(" " 0 1 (fontified nil)) . -85) (undo-tree-id102 . -1) (#("	" 0 1 (fontified nil)) . 86) (undo-tree-id103 . -1) (78 . 86) 79) nil (25279 8473 591552 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -77) (undo-tree-id86 . -1) (#(" " 0 1 (fontified t)) . -78) (undo-tree-id87 . -1) (#(" " 0 1 (fontified t)) . -79) (undo-tree-id88 . -1) (#(" " 0 1 (fontified t)) . -80) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -81) (undo-tree-id90 . -1) (#(" " 0 1 (fontified t)) . -82) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -83) (undo-tree-id92 . -1) (#(" " 0 1 (fontified nil)) . -84) (undo-tree-id93 . -1) (#("	" 0 1 (fontified nil)) . 85) (undo-tree-id94 . -1) (77 . 85) 78) nil (25287 2385 211082 0) 0 nil])
([nil nil ((127 . 128) (t 25287 2388 0 0)) nil (25287 2426 553848 0) 0 nil] [nil nil ((127 . 129)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 127) (undo-tree-id3999 . -1) (undo-tree-id4000 . 1) (undo-tree-id4001 . 1) (undo-tree-id4002 . 1) (undo-tree-id4003 . 1) (undo-tree-id4004 . 1) (undo-tree-id4005 . 1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -2) (undo-tree-id4008 . -2) (undo-tree-id4009 . -2) (undo-tree-id4010 . -2) (undo-tree-id4011 . -2) (undo-tree-id4012 . -2) (undo-tree-id4013 . -2) (undo-tree-id4014 . -2) (undo-tree-id4015 . -2) (undo-tree-id4016 . -2) (undo-tree-id4017 . -2) (undo-tree-id4018 . -2) (undo-tree-id4019 . -2) (undo-tree-id4020 . -2) (undo-tree-id4021 . -2) (undo-tree-id4022 . -2) (undo-tree-id4023 . -2) (undo-tree-id4024 . -2) (undo-tree-id4025 . -2) (undo-tree-id4026 . -2) (undo-tree-id4027 . -2) (undo-tree-id4028 . -2) (undo-tree-id4029 . -2) (undo-tree-id4030 . -2) (undo-tree-id4031 . -2) (undo-tree-id4032 . -2) (undo-tree-id4033 . -2) (undo-tree-id4034 . -2) (undo-tree-id4035 . -2) (undo-tree-id4036 . -2) (undo-tree-id4037 . -2) (undo-tree-id4038 . -2) (undo-tree-id4039 . -2) (undo-tree-id4040 . -2) (undo-tree-id4041 . -2) (undo-tree-id4042 . -2) (undo-tree-id4043 . -2) (undo-tree-id4044 . -2) (undo-tree-id4045 . -2) (undo-tree-id4046 . -2) (undo-tree-id4047 . -2) (undo-tree-id4048 . -2) (undo-tree-id4049 . -2) (undo-tree-id4050 . -2) (undo-tree-id4051 . -2) (undo-tree-id4052 . -2) (undo-tree-id4053 . -2) (undo-tree-id4054 . -2) (undo-tree-id4055 . -2) (undo-tree-id4056 . -2) (undo-tree-id4057 . -2) (undo-tree-id4058 . -2) (undo-tree-id4059 . -2) (undo-tree-id4060 . -2) (undo-tree-id4061 . -2) (undo-tree-id4062 . -2) (undo-tree-id4063 . -2) (undo-tree-id4064 . -2) (undo-tree-id4065 . -2) (undo-tree-id4066 . -2) (undo-tree-id4067 . -2) (undo-tree-id4068 . -2) (undo-tree-id4069 . -2) (undo-tree-id4070 . -2) (undo-tree-id4071 . -2) (undo-tree-id4072 . -2) (undo-tree-id4073 . -2) (undo-tree-id4074 . -2) (undo-tree-id4075 . -2) (undo-tree-id4076 . -2) (undo-tree-id4077 . -2) (undo-tree-id4078 . -2) (undo-tree-id4079 . -2) (undo-tree-id4080 . -2) (undo-tree-id4081 . -2) (undo-tree-id4082 . -2) (undo-tree-id4083 . -2) (undo-tree-id4084 . -2) (undo-tree-id4085 . -2) (undo-tree-id4086 . -2) (undo-tree-id4087 . -2) (undo-tree-id4088 . -2) (undo-tree-id4089 . -2) (undo-tree-id4090 . -2)) (25287 2385 95 0) 0 nil])
([nil nil ((128 . 130)) nil (25287 2426 553847 0) 0 nil])
([nil nil ((129 . 131)) ((#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 129) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . 1) (undo-tree-id3810 . 1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . 1) (undo-tree-id3822 . 1) (undo-tree-id3823 . -1) (undo-tree-id3824 . 1) (undo-tree-id3825 . 1) (undo-tree-id3826 . -1) (undo-tree-id3827 . 1) (undo-tree-id3828 . 1) (undo-tree-id3829 . -1) (undo-tree-id3830 . 1) (undo-tree-id3831 . 1) (undo-tree-id3832 . -1) (undo-tree-id3833 . 1) (undo-tree-id3834 . 1) (undo-tree-id3835 . -1) (undo-tree-id3836 . 1) (undo-tree-id3837 . 1) (undo-tree-id3838 . -1) (undo-tree-id3839 . 1) (undo-tree-id3840 . 1) (undo-tree-id3841 . -1) (undo-tree-id3842 . 1) (undo-tree-id3843 . 1) (undo-tree-id3844 . -1) (undo-tree-id3845 . 1) (undo-tree-id3846 . 1) (undo-tree-id3847 . -1) (undo-tree-id3848 . 1) (undo-tree-id3849 . 1) (undo-tree-id3850 . -1) (undo-tree-id3851 . 1) (undo-tree-id3852 . 1) (undo-tree-id3853 . -1) (undo-tree-id3854 . 1) (undo-tree-id3855 . 1) (undo-tree-id3856 . -1) (undo-tree-id3857 . 1) (undo-tree-id3858 . 1) (undo-tree-id3859 . -1) (undo-tree-id3860 . 1) (undo-tree-id3861 . 1) (undo-tree-id3862 . -1) (undo-tree-id3863 . 1) (undo-tree-id3864 . 1) (undo-tree-id3865 . -1) (undo-tree-id3866 . 1) (undo-tree-id3867 . 1) (undo-tree-id3868 . -1) (undo-tree-id3869 . 1) (undo-tree-id3870 . 1) (undo-tree-id3871 . -1) (undo-tree-id3872 . 1) (undo-tree-id3873 . 1) (undo-tree-id3874 . -1) (undo-tree-id3875 . 1) (undo-tree-id3876 . 1) (undo-tree-id3877 . -1) (undo-tree-id3878 . 1) (undo-tree-id3879 . 1) (undo-tree-id3880 . -1) (undo-tree-id3881 . 1) (undo-tree-id3882 . 1) (undo-tree-id3883 . -1) (undo-tree-id3884 . 1) (undo-tree-id3885 . 1) (undo-tree-id3886 . -1) (undo-tree-id3887 . 1) (undo-tree-id3888 . 1) (undo-tree-id3889 . -1) (undo-tree-id3890 . 1) (undo-tree-id3891 . 1) (undo-tree-id3892 . -1) (undo-tree-id3893 . 1) (undo-tree-id3894 . -2) (undo-tree-id3895 . -2) (undo-tree-id3896 . -2) (undo-tree-id3897 . -2) (undo-tree-id3898 . 1) (undo-tree-id3899 . -1) (undo-tree-id3900 . 1) (undo-tree-id3901 . 1) (undo-tree-id3902 . -1) (undo-tree-id3903 . 1) (undo-tree-id3904 . 1) (undo-tree-id3905 . -1) (undo-tree-id3906 . 1) (undo-tree-id3907 . 1) (undo-tree-id3908 . -1) (undo-tree-id3909 . 1) (undo-tree-id3910 . 1) (undo-tree-id3911 . -1) (undo-tree-id3912 . 1) (undo-tree-id3913 . 1) (undo-tree-id3914 . -1) (undo-tree-id3915 . 1) (undo-tree-id3916 . 1) (undo-tree-id3917 . -1) (undo-tree-id3918 . 1) (undo-tree-id3919 . 1) (undo-tree-id3920 . -1) (undo-tree-id3921 . 1) (undo-tree-id3922 . 1) (undo-tree-id3923 . -1) (undo-tree-id3924 . 1) (undo-tree-id3925 . 1) (undo-tree-id3926 . -1) (undo-tree-id3927 . 1) (undo-tree-id3928 . 1) (undo-tree-id3929 . -1) (undo-tree-id3930 . 1) (undo-tree-id3931 . 1) (undo-tree-id3932 . -1) (undo-tree-id3933 . 1) (undo-tree-id3934 . 1) (undo-tree-id3935 . -1) (undo-tree-id3936 . 1) (undo-tree-id3937 . 1) (undo-tree-id3938 . -1) (undo-tree-id3939 . 1) (undo-tree-id3940 . 1) (undo-tree-id3941 . -1) (undo-tree-id3942 . 1) (undo-tree-id3943 . 1) (undo-tree-id3944 . -1) (undo-tree-id3945 . 1) (undo-tree-id3946 . 1) (undo-tree-id3947 . -1) (undo-tree-id3948 . 1) (undo-tree-id3949 . 1) (undo-tree-id3950 . -1) (undo-tree-id3951 . 1) (undo-tree-id3952 . 1) (undo-tree-id3953 . -1) (undo-tree-id3954 . 1) (undo-tree-id3955 . 1) (undo-tree-id3956 . -1) (undo-tree-id3957 . 1) (undo-tree-id3958 . 1) (undo-tree-id3959 . -1) (undo-tree-id3960 . 1) (undo-tree-id3961 . 1) (undo-tree-id3962 . -1) (undo-tree-id3963 . 1) (undo-tree-id3964 . 1) (undo-tree-id3965 . -1) (undo-tree-id3966 . 1) (undo-tree-id3967 . 1) (undo-tree-id3968 . -1) (undo-tree-id3969 . 1) (undo-tree-id3970 . 1) (undo-tree-id3971 . -1) (undo-tree-id3972 . 1) (undo-tree-id3973 . 1) (undo-tree-id3974 . -1) (undo-tree-id3975 . 1) (undo-tree-id3976 . 1) (undo-tree-id3977 . -1) (undo-tree-id3978 . 1) (undo-tree-id3979 . 1) (undo-tree-id3980 . -1) (undo-tree-id3981 . 1) (undo-tree-id3982 . 1) (undo-tree-id3983 . -1) (undo-tree-id3984 . 1) (undo-tree-id3985 . 1) (undo-tree-id3986 . -1) (undo-tree-id3987 . 1) (undo-tree-id3988 . 1) (undo-tree-id3989 . -1) (undo-tree-id3990 . 1) (undo-tree-id3991 . 1) (undo-tree-id3992 . -1) (undo-tree-id3993 . 1) (undo-tree-id3994 . 1) (undo-tree-id3995 . -1) (undo-tree-id3996 . 1) (undo-tree-id3997 . 1) (undo-tree-id3998 . -1)) (25287 2384 966211 0) 0 nil])
([nil nil ((129 . 136)) nil (25287 2426 553846 0) 0 nil])
([nil nil ((130 . 137)) ((#("define " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 130) (undo-tree-id3722 . -7) (undo-tree-id3723 . -7) (undo-tree-id3724 . -7) (undo-tree-id3725 . -7) (undo-tree-id3726 . -7) (undo-tree-id3727 . -7) (undo-tree-id3728 . -7) (undo-tree-id3729 . -7) (undo-tree-id3730 . -7) (undo-tree-id3731 . -7) (undo-tree-id3732 . -7) (undo-tree-id3733 . -7) (undo-tree-id3734 . -7) (undo-tree-id3735 . -7) (undo-tree-id3736 . -7) (undo-tree-id3737 . -7) (undo-tree-id3738 . -7) (undo-tree-id3739 . -7) (undo-tree-id3740 . -7) (undo-tree-id3741 . -7) (undo-tree-id3742 . -7) (undo-tree-id3743 . -7) (undo-tree-id3744 . -7) (undo-tree-id3745 . -7) (undo-tree-id3746 . -7) (undo-tree-id3747 . -7) (undo-tree-id3748 . -7) (undo-tree-id3749 . -7) (undo-tree-id3750 . -7) (undo-tree-id3751 . -7) (undo-tree-id3752 . -7) (undo-tree-id3753 . -7) (undo-tree-id3754 . -7) (undo-tree-id3755 . -7) (undo-tree-id3756 . -7) (undo-tree-id3757 . -7) (undo-tree-id3758 . -7) (undo-tree-id3759 . -7) (undo-tree-id3760 . -7) (undo-tree-id3761 . -7) (undo-tree-id3762 . -7) (undo-tree-id3763 . -7) (undo-tree-id3764 . -7) (undo-tree-id3765 . -7) (undo-tree-id3766 . -7) (undo-tree-id3767 . -7) (undo-tree-id3768 . -7) (undo-tree-id3769 . -7) (undo-tree-id3770 . -7) (undo-tree-id3771 . -7) (undo-tree-id3772 . -7) (undo-tree-id3773 . -7) (undo-tree-id3774 . -7) (undo-tree-id3775 . -7) (undo-tree-id3776 . -7) (undo-tree-id3777 . -7) (undo-tree-id3778 . -7) (undo-tree-id3779 . -7) (undo-tree-id3780 . -7) (undo-tree-id3781 . -7) (undo-tree-id3782 . -7) (undo-tree-id3783 . -7) (undo-tree-id3784 . -7) (undo-tree-id3785 . -7) (undo-tree-id3786 . -7) (undo-tree-id3787 . -7) (undo-tree-id3788 . -7) (undo-tree-id3789 . -7) (undo-tree-id3790 . -7) (undo-tree-id3791 . -7) (undo-tree-id3792 . -7) (undo-tree-id3793 . -7) (undo-tree-id3794 . -7) (undo-tree-id3795 . -7) (undo-tree-id3796 . -7) (undo-tree-id3797 . -7) (undo-tree-id3798 . -7)) (25287 2384 931030 0) 0 nil])
([nil nil ((136 . 138)) nil (25287 2426 553845 0) 0 nil])
([nil nil ((137 . 139)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 137) (undo-tree-id3637 . -2) (undo-tree-id3638 . -2) (undo-tree-id3639 . -2) (undo-tree-id3640 . -2) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) (undo-tree-id3644 . -2) (undo-tree-id3645 . -2) (undo-tree-id3646 . -2) (undo-tree-id3647 . -2) (undo-tree-id3648 . -1) (undo-tree-id3649 . -2) (undo-tree-id3650 . -2) (undo-tree-id3651 . -2) (undo-tree-id3652 . -2) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -2) (undo-tree-id3658 . -2) (undo-tree-id3659 . -2) (undo-tree-id3660 . -2) (undo-tree-id3661 . -2) (undo-tree-id3662 . -2) (undo-tree-id3663 . -2) (undo-tree-id3664 . -2) (undo-tree-id3665 . -2) (undo-tree-id3666 . -2) (undo-tree-id3667 . -2) (undo-tree-id3668 . -2) (undo-tree-id3669 . -2) (undo-tree-id3670 . -2) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) (undo-tree-id3673 . -2) (undo-tree-id3674 . -2) (undo-tree-id3675 . -2) (undo-tree-id3676 . -2) (undo-tree-id3677 . -2) (undo-tree-id3678 . -2) (undo-tree-id3679 . -2) (undo-tree-id3680 . -2) (undo-tree-id3681 . -2) (undo-tree-id3682 . -2) (undo-tree-id3683 . -2) (undo-tree-id3684 . -2) (undo-tree-id3685 . -2) (undo-tree-id3686 . -2) (undo-tree-id3687 . -2) (undo-tree-id3688 . -2) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2) (undo-tree-id3691 . -2) (undo-tree-id3692 . -2) (undo-tree-id3693 . -2) (undo-tree-id3694 . -2) (undo-tree-id3695 . -2) (undo-tree-id3696 . -2) (undo-tree-id3697 . -2) (undo-tree-id3698 . -2) (undo-tree-id3699 . -2) (undo-tree-id3700 . -2) (undo-tree-id3701 . -2) (undo-tree-id3702 . -2) (undo-tree-id3703 . -2) (undo-tree-id3704 . -2) (undo-tree-id3705 . -2) (undo-tree-id3706 . -2) (undo-tree-id3707 . -2) (undo-tree-id3708 . 1) (undo-tree-id3709 . -1) (undo-tree-id3710 . 1) (undo-tree-id3711 . 1) (undo-tree-id3712 . -1) (undo-tree-id3713 . 1) (undo-tree-id3714 . 1) (undo-tree-id3715 . -1) (undo-tree-id3716 . 1) (undo-tree-id3717 . 1) (undo-tree-id3718 . -1) (undo-tree-id3719 . 1) (undo-tree-id3720 . 1) (undo-tree-id3721 . -1)) (25287 2384 897721 0) 0 nil])
([nil nil ((137 . 138)) nil (25287 2426 553844 0) 0 nil])
([nil nil ((138 . 142)) ((#("new=" 0 3 (face font-lock-function-name-face fontified t) 3 4 (face font-lock-function-name-face fontified t)) . 138) (undo-tree-id3631 . -4) (undo-tree-id3632 . -3) (undo-tree-id3633 . -3) (undo-tree-id3634 . -3) (undo-tree-id3635 . 1) (undo-tree-id3636 . -4)) (25287 2384 864725 0) 0 nil])
([nil nil ((139 . 142)) nil (25287 2426 553843 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face font-lock-function-name-face)) . -141) 142) ((141 . 142)) (25287 2384 831970 0) 0 nil])
([nil nil ((142 . 144)) nil (25287 2426 553842 0) 0 nil])
([nil nil ((141 . 146)) ((#("-rand" 0 5 (face font-lock-function-name-face fontified t)) . 141) (undo-tree-id3628 . -5) (undo-tree-id3629 . -5) (undo-tree-id3630 . -5)) (25287 2384 799261 0) 0 nil])
([nil nil ((143 . 147)) nil (25287 2426 553841 0) 0 nil])
([nil nil ((146 . 147)) ((#(" " 0 1 (fontified t)) . 146) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1)) (25287 2384 765926 0) 0 nil])
([nil nil ((147 . 149)) nil (25287 2426 553840 0) 0 nil])
([nil nil ((147 . 148)) ((#("m" 0 1 (fontified t)) . 147)) (25287 2384 733488 0) 0 nil])
([nil nil ((148 . 150)) nil (25287 2426 553839 0) 0 nil])
([nil nil ((149 . 152)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 149) (undo-tree-id3567 . -1) (undo-tree-id3568 . -3) (undo-tree-id3569 . -3) (undo-tree-id3570 . 3) (undo-tree-id3571 . 3) (undo-tree-id3572 . -3) (undo-tree-id3573 . -3) (undo-tree-id3574 . -3) (undo-tree-id3575 . -3) (undo-tree-id3576 . -3) (undo-tree-id3577 . -3) (undo-tree-id3578 . -3) (undo-tree-id3579 . -3) (undo-tree-id3580 . -3) (undo-tree-id3581 . -3) (undo-tree-id3582 . -3) (undo-tree-id3583 . -3) (undo-tree-id3584 . -3) (undo-tree-id3585 . -3) (undo-tree-id3586 . -3) (undo-tree-id3587 . -3) (undo-tree-id3588 . -3) (undo-tree-id3589 . -3) (undo-tree-id3590 . -3) (undo-tree-id3591 . -3) (undo-tree-id3592 . -3) (undo-tree-id3593 . -3) (undo-tree-id3594 . -3) (undo-tree-id3595 . -3) (undo-tree-id3596 . -3) (undo-tree-id3597 . -3) (undo-tree-id3598 . -3) (undo-tree-id3599 . -3) (undo-tree-id3600 . -3) (undo-tree-id3601 . -3) (undo-tree-id3602 . -3) (undo-tree-id3603 . -3) (undo-tree-id3604 . -3) (undo-tree-id3605 . -3) (undo-tree-id3606 . -3) (undo-tree-id3607 . -3) (undo-tree-id3608 . -3) (undo-tree-id3609 . -3) (undo-tree-id3610 . -3) (undo-tree-id3611 . -3) (undo-tree-id3612 . -3) (undo-tree-id3613 . -3) (undo-tree-id3614 . -3) (undo-tree-id3615 . -3) (undo-tree-id3616 . -3) (undo-tree-id3617 . -3) (undo-tree-id3618 . -3) (undo-tree-id3619 . -3) (undo-tree-id3620 . -3) (undo-tree-id3621 . -3) (undo-tree-id3622 . -3) (undo-tree-id3623 . -3) (undo-tree-id3624 . -3) (undo-tree-id3625 . -3)) (25287 2384 700724 0) 0 nil])
([nil nil ((149 . 155)) nil (25287 2426 553838 0) 0 nil])
([nil nil ((152 . 154)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 152) (undo-tree-id3414 . -2) (undo-tree-id3415 . -2) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . 1) (undo-tree-id3421 . 1) (undo-tree-id3422 . -1) (undo-tree-id3423 . 1) (undo-tree-id3424 . 1) (undo-tree-id3425 . -1) (undo-tree-id3426 . 1) (undo-tree-id3427 . 1) (undo-tree-id3428 . -1) (undo-tree-id3429 . 1) (undo-tree-id3430 . 1) (undo-tree-id3431 . -1) (undo-tree-id3432 . 1) (undo-tree-id3433 . 1) (undo-tree-id3434 . -1) (undo-tree-id3435 . 1) (undo-tree-id3436 . 1) (undo-tree-id3437 . -1) (undo-tree-id3438 . 1) (undo-tree-id3439 . 1) (undo-tree-id3440 . -1) (undo-tree-id3441 . 1) (undo-tree-id3442 . 1) (undo-tree-id3443 . -1) (undo-tree-id3444 . 1) (undo-tree-id3445 . 1) (undo-tree-id3446 . -1) (undo-tree-id3447 . 1) (undo-tree-id3448 . 1) (undo-tree-id3449 . -1) (undo-tree-id3450 . 1) (undo-tree-id3451 . 1) (undo-tree-id3452 . -1) (undo-tree-id3453 . 1) (undo-tree-id3454 . 1) (undo-tree-id3455 . -1) (undo-tree-id3456 . 1) (undo-tree-id3457 . 1) (undo-tree-id3458 . -1) (undo-tree-id3459 . 1) (undo-tree-id3460 . 1) (undo-tree-id3461 . -1) (undo-tree-id3462 . 1) (undo-tree-id3463 . 1) (undo-tree-id3464 . -1) (undo-tree-id3465 . 1) (undo-tree-id3466 . 1) (undo-tree-id3467 . -1) (undo-tree-id3468 . 1) (undo-tree-id3469 . 1) (undo-tree-id3470 . -1) (undo-tree-id3471 . 1) (undo-tree-id3472 . 1) (undo-tree-id3473 . -1) (undo-tree-id3474 . 1) (undo-tree-id3475 . 1) (undo-tree-id3476 . -1) (undo-tree-id3477 . 1) (undo-tree-id3478 . 1) (undo-tree-id3479 . -1) (undo-tree-id3480 . 1) (undo-tree-id3481 . 1) (undo-tree-id3482 . -1) (undo-tree-id3483 . 1) (undo-tree-id3484 . 1) (undo-tree-id3485 . -1) (undo-tree-id3486 . 1) (undo-tree-id3487 . 1) (undo-tree-id3488 . -1) (undo-tree-id3489 . 1) (undo-tree-id3490 . 1) (undo-tree-id3491 . -1) (undo-tree-id3492 . 1) (undo-tree-id3493 . 1) (undo-tree-id3494 . -1) (undo-tree-id3495 . 1) (undo-tree-id3496 . 1) (undo-tree-id3497 . -1) (undo-tree-id3498 . 1) (undo-tree-id3499 . 1) (undo-tree-id3500 . -1) (undo-tree-id3501 . 1) (undo-tree-id3502 . 1) (undo-tree-id3503 . -1) (undo-tree-id3504 . 1) (undo-tree-id3505 . 1) (undo-tree-id3506 . -1) (undo-tree-id3507 . 1) (undo-tree-id3508 . 1) (undo-tree-id3509 . -1) (undo-tree-id3510 . 1) (undo-tree-id3511 . 1) (undo-tree-id3512 . -1) (undo-tree-id3513 . 1) (undo-tree-id3514 . 1) (undo-tree-id3515 . -1) (undo-tree-id3516 . 1) (undo-tree-id3517 . 1) (undo-tree-id3518 . -1) (undo-tree-id3519 . 1) (undo-tree-id3520 . 1) (undo-tree-id3521 . -1) (undo-tree-id3522 . 1) (undo-tree-id3523 . 1) (undo-tree-id3524 . -1) (undo-tree-id3525 . 1) (undo-tree-id3526 . 1) (undo-tree-id3527 . -1) (undo-tree-id3528 . 1) (undo-tree-id3529 . 1) (undo-tree-id3530 . -1) (undo-tree-id3531 . 1) (undo-tree-id3532 . 1) (undo-tree-id3533 . -1) (undo-tree-id3534 . 1) (undo-tree-id3535 . 1) (undo-tree-id3536 . -1) (undo-tree-id3537 . 1) (undo-tree-id3538 . 1) (undo-tree-id3539 . -1) (undo-tree-id3540 . 1) (undo-tree-id3541 . 1) (undo-tree-id3542 . -1) (undo-tree-id3543 . 1) (undo-tree-id3544 . 1) (undo-tree-id3545 . -1) (undo-tree-id3546 . 1) (undo-tree-id3547 . 1) (undo-tree-id3548 . -1) (undo-tree-id3549 . 1) (undo-tree-id3550 . 1) (undo-tree-id3551 . -1) (undo-tree-id3552 . 1) (undo-tree-id3553 . 1) (undo-tree-id3554 . -1) (undo-tree-id3555 . 1) (undo-tree-id3556 . 1) (undo-tree-id3557 . -1) (undo-tree-id3558 . 1) (undo-tree-id3559 . 1) (undo-tree-id3560 . -1) (undo-tree-id3561 . 1) (undo-tree-id3562 . 1) (undo-tree-id3563 . -1) (undo-tree-id3564 . 1) (undo-tree-id3565 . 1) (undo-tree-id3566 . -1)) (25287 2384 667537 0) 0 nil])
([nil nil ((156 . 158)) nil (25287 2426 553837 0) 0 nil])
([nil nil ((153 . 160)) ((#("define " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 153) (undo-tree-id3362 . -7) (undo-tree-id3363 . -7) (undo-tree-id3364 . -7) (undo-tree-id3365 . -7) (undo-tree-id3366 . -7) (undo-tree-id3367 . -7) (undo-tree-id3368 . -7) (undo-tree-id3369 . -7) (undo-tree-id3370 . -7) (undo-tree-id3371 . -7) (undo-tree-id3372 . -7) (undo-tree-id3373 . -7) (undo-tree-id3374 . -7) (undo-tree-id3375 . -7) (undo-tree-id3376 . -7) (undo-tree-id3377 . -7) (undo-tree-id3378 . -7) (undo-tree-id3379 . -7) (undo-tree-id3380 . -7) (undo-tree-id3381 . -7) (undo-tree-id3382 . -7) (undo-tree-id3383 . -7) (undo-tree-id3384 . -7) (undo-tree-id3385 . -7) (undo-tree-id3386 . -7) (undo-tree-id3387 . -7) (undo-tree-id3388 . -7) (undo-tree-id3389 . -7) (undo-tree-id3390 . -7) (undo-tree-id3391 . -7) (undo-tree-id3392 . -7) (undo-tree-id3393 . -7) (undo-tree-id3394 . -7) (undo-tree-id3395 . -7) (undo-tree-id3396 . -7) (undo-tree-id3397 . -7) (undo-tree-id3398 . -7) (undo-tree-id3399 . -7) (undo-tree-id3400 . -7) (undo-tree-id3401 . -7) (undo-tree-id3402 . -7) (undo-tree-id3403 . -7) (undo-tree-id3404 . -7) (undo-tree-id3405 . -7) (undo-tree-id3406 . -7) (undo-tree-id3407 . -7) (undo-tree-id3408 . -7) (undo-tree-id3409 . -7) (undo-tree-id3410 . -7) (undo-tree-id3411 . -7) (undo-tree-id3412 . -7) (undo-tree-id3413 . -7)) (25287 2384 634619 0) 0 nil])
([nil nil ((158 . 160)) nil (25287 2426 553836 0) 0 nil])
([nil nil ((160 . 162)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 160) (undo-tree-id3310 . -1) (undo-tree-id3311 . -2) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -2) (undo-tree-id3331 . -2) (undo-tree-id3332 . -2) (undo-tree-id3333 . -2) (undo-tree-id3334 . -2) (undo-tree-id3335 . -2) (undo-tree-id3336 . -2) (undo-tree-id3337 . -2) (undo-tree-id3338 . -2) (undo-tree-id3339 . -2) (undo-tree-id3340 . -2) (undo-tree-id3341 . -2) (undo-tree-id3342 . -2) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -2) (undo-tree-id3346 . -2) (undo-tree-id3347 . -2) (undo-tree-id3348 . -2) (undo-tree-id3349 . -2) (undo-tree-id3350 . -2) (undo-tree-id3351 . -2) (undo-tree-id3352 . -2) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -2) (undo-tree-id3356 . -2) (undo-tree-id3357 . -2) (undo-tree-id3358 . -2) (undo-tree-id3359 . -2) (undo-tree-id3360 . 1) (undo-tree-id3361 . -1)) (25287 2384 600790 0) 0 nil])
([nil nil ((159 . 166)) nil (25287 2426 553835 0) 0 nil])
([nil nil ((161 . 171)) ((#("dispatch m" 0 1 (face font-lock-function-name-face fontified t) 1 8 (face font-lock-function-name-face fontified t) 8 10 (fontified t)) . 161)) (25287 2384 567985 0) 0 nil])
([nil nil ((166 . 168)) nil (25287 2426 553834 0) 0 nil])
([nil nil ((172 . 177)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 172) (undo-tree-id3260 . -1) (undo-tree-id3261 . -5) (undo-tree-id3262 . -5) (undo-tree-id3263 . -5) (undo-tree-id3264 . -5) (undo-tree-id3265 . -5) (undo-tree-id3266 . -5) (undo-tree-id3267 . -5) (undo-tree-id3268 . -5) (undo-tree-id3269 . -5) (undo-tree-id3270 . -5) (undo-tree-id3271 . -5) (undo-tree-id3272 . -5) (undo-tree-id3273 . -5) (undo-tree-id3274 . -5) (undo-tree-id3275 . -5) (undo-tree-id3276 . -5) (undo-tree-id3277 . -5) (undo-tree-id3278 . -5) (undo-tree-id3279 . -5) (undo-tree-id3280 . -5) (undo-tree-id3281 . -5) (undo-tree-id3282 . -5) (undo-tree-id3283 . -5) (undo-tree-id3284 . -5) (undo-tree-id3285 . -5) (undo-tree-id3286 . -5) (undo-tree-id3287 . -5) (undo-tree-id3288 . -5) (undo-tree-id3289 . -5) (undo-tree-id3290 . -5) (undo-tree-id3291 . -5) (undo-tree-id3292 . -5) (undo-tree-id3293 . -5) (undo-tree-id3294 . -5) (undo-tree-id3295 . -5) (undo-tree-id3296 . -5) (undo-tree-id3297 . -5) (undo-tree-id3298 . -5) (undo-tree-id3299 . -5) (undo-tree-id3300 . -5) (undo-tree-id3301 . -5) (undo-tree-id3302 . -5) (undo-tree-id3303 . -5) (undo-tree-id3304 . -5) (undo-tree-id3305 . -5) (undo-tree-id3306 . -5) (undo-tree-id3307 . -5) (undo-tree-id3308 . -5) (undo-tree-id3309 . -5)) (25287 2384 535007 0) 0 nil])
([nil nil ((167 . 169)) nil (25287 2426 553833 0) 0 nil])
([nil nil ((177 . 179)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 177) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . 1) (undo-tree-id3131 . 1) (undo-tree-id3132 . -1) (undo-tree-id3133 . 1) (undo-tree-id3134 . 1) (undo-tree-id3135 . -1) (undo-tree-id3136 . 1) (undo-tree-id3137 . 1) (undo-tree-id3138 . -1) (undo-tree-id3139 . 1) (undo-tree-id3140 . 1) (undo-tree-id3141 . -1) (undo-tree-id3142 . 1) (undo-tree-id3143 . 1) (undo-tree-id3144 . -1) (undo-tree-id3145 . 1) (undo-tree-id3146 . 1) (undo-tree-id3147 . -1) (undo-tree-id3148 . 1) (undo-tree-id3149 . 1) (undo-tree-id3150 . -1) (undo-tree-id3151 . 1) (undo-tree-id3152 . 1) (undo-tree-id3153 . -1) (undo-tree-id3154 . 1) (undo-tree-id3155 . 1) (undo-tree-id3156 . -1) (undo-tree-id3157 . 1) (undo-tree-id3158 . 1) (undo-tree-id3159 . -1) (undo-tree-id3160 . 1) (undo-tree-id3161 . 1) (undo-tree-id3162 . -1) (undo-tree-id3163 . 1) (undo-tree-id3164 . 1) (undo-tree-id3165 . -1) (undo-tree-id3166 . 1) (undo-tree-id3167 . 1) (undo-tree-id3168 . -1) (undo-tree-id3169 . 1) (undo-tree-id3170 . 1) (undo-tree-id3171 . -1) (undo-tree-id3172 . 1) (undo-tree-id3173 . -2) (undo-tree-id3174 . 1) (undo-tree-id3175 . -1) (undo-tree-id3176 . 1) (undo-tree-id3177 . 1) (undo-tree-id3178 . -1) (undo-tree-id3179 . 1) (undo-tree-id3180 . 1) (undo-tree-id3181 . -1) (undo-tree-id3182 . 1) (undo-tree-id3183 . 1) (undo-tree-id3184 . -1) (undo-tree-id3185 . 1) (undo-tree-id3186 . 1) (undo-tree-id3187 . -1) (undo-tree-id3188 . 1) (undo-tree-id3189 . 1) (undo-tree-id3190 . -1) (undo-tree-id3191 . 1) (undo-tree-id3192 . 1) (undo-tree-id3193 . -1) (undo-tree-id3194 . 1) (undo-tree-id3195 . 1) (undo-tree-id3196 . -1) (undo-tree-id3197 . 1) (undo-tree-id3198 . 1) (undo-tree-id3199 . -1) (undo-tree-id3200 . 1) (undo-tree-id3201 . 1) (undo-tree-id3202 . -1) (undo-tree-id3203 . 1) (undo-tree-id3204 . 1) (undo-tree-id3205 . -1) (undo-tree-id3206 . 1) (undo-tree-id3207 . 1) (undo-tree-id3208 . -1) (undo-tree-id3209 . 1) (undo-tree-id3210 . 1) (undo-tree-id3211 . -1) (undo-tree-id3212 . 1) (undo-tree-id3213 . 1) (undo-tree-id3214 . -1) (undo-tree-id3215 . 1) (undo-tree-id3216 . 1) (undo-tree-id3217 . -1) (undo-tree-id3218 . 1) (undo-tree-id3219 . 1) (undo-tree-id3220 . -1) (undo-tree-id3221 . 1) (undo-tree-id3222 . 1) (undo-tree-id3223 . -1) (undo-tree-id3224 . 1) (undo-tree-id3225 . 1) (undo-tree-id3226 . -1) (undo-tree-id3227 . 1) (undo-tree-id3228 . 1) (undo-tree-id3229 . -1) (undo-tree-id3230 . 1) (undo-tree-id3231 . 1) (undo-tree-id3232 . -1) (undo-tree-id3233 . 1) (undo-tree-id3234 . 1) (undo-tree-id3235 . -1) (undo-tree-id3236 . 1) (undo-tree-id3237 . 1) (undo-tree-id3238 . -1) (undo-tree-id3239 . 1) (undo-tree-id3240 . 1) (undo-tree-id3241 . -1) (undo-tree-id3242 . 1) (undo-tree-id3243 . 1) (undo-tree-id3244 . -1) (undo-tree-id3245 . 1) (undo-tree-id3246 . 1) (undo-tree-id3247 . -1) (undo-tree-id3248 . 1) (undo-tree-id3249 . 1) (undo-tree-id3250 . -1) (undo-tree-id3251 . 1) (undo-tree-id3252 . 1) (undo-tree-id3253 . -1) (undo-tree-id3254 . 1) (undo-tree-id3255 . 1) (undo-tree-id3256 . -1) (undo-tree-id3257 . 1) (undo-tree-id3258 . 1) (undo-tree-id3259 . -1)) (25287 2384 501034 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-function-name-face fontified t)) . -168) (undo-tree-id4096 . -1) 169) nil (25287 2426 553832 0) 0 nil])
([nil nil ((178 . 183)) ((#("cond " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 178) (undo-tree-id3080 . -5) (undo-tree-id3081 . -5) (undo-tree-id3082 . -5) (undo-tree-id3083 . -5) (undo-tree-id3084 . -5) (undo-tree-id3085 . -5) (undo-tree-id3086 . -5) (undo-tree-id3087 . -5) (undo-tree-id3088 . -5) (undo-tree-id3089 . -5) (undo-tree-id3090 . -5) (undo-tree-id3091 . -5) (undo-tree-id3092 . -5) (undo-tree-id3093 . -5) (undo-tree-id3094 . -5) (undo-tree-id3095 . -5) (undo-tree-id3096 . -5) (undo-tree-id3097 . -5) (undo-tree-id3098 . -5) (undo-tree-id3099 . -5) (undo-tree-id3100 . -5) (undo-tree-id3101 . -5) (undo-tree-id3102 . -5) (undo-tree-id3103 . -5) (undo-tree-id3104 . -5) (undo-tree-id3105 . -5) (undo-tree-id3106 . -5) (undo-tree-id3107 . -5) (undo-tree-id3108 . -5) (undo-tree-id3109 . -5) (undo-tree-id3110 . -5) (undo-tree-id3111 . -5) (undo-tree-id3112 . -5) (undo-tree-id3113 . -5) (undo-tree-id3114 . -5) (undo-tree-id3115 . -5) (undo-tree-id3116 . -5) (undo-tree-id3117 . -5) (undo-tree-id3118 . -5) (undo-tree-id3119 . -5) (undo-tree-id3120 . -5) (undo-tree-id3121 . -5) (undo-tree-id3122 . -5) (undo-tree-id3123 . -5) (undo-tree-id3124 . -5) (undo-tree-id3125 . -5)) (25287 2384 468553 0) 0 nil])
([nil nil ((168 . 177)) nil (25287 2426 553830 0) 0 nil])
([nil nil ((183 . 185)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 183) (undo-tree-id3017 . -1) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) (undo-tree-id3022 . -2) (undo-tree-id3023 . -2) (undo-tree-id3024 . -2) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -2) (undo-tree-id3042 . -2) (undo-tree-id3043 . -2) (undo-tree-id3044 . 2) (undo-tree-id3045 . 2) (undo-tree-id3046 . 2) (undo-tree-id3047 . -2) (undo-tree-id3048 . -2) (undo-tree-id3049 . -2) (undo-tree-id3050 . -2) (undo-tree-id3051 . 1) (undo-tree-id3052 . -1) (undo-tree-id3053 . 1) (undo-tree-id3054 . 1) (undo-tree-id3055 . -1) (undo-tree-id3056 . 1) (undo-tree-id3057 . 1) (undo-tree-id3058 . -1) (undo-tree-id3059 . 1) (undo-tree-id3060 . 1) (undo-tree-id3061 . -1) (undo-tree-id3062 . 1) (undo-tree-id3063 . 1) (undo-tree-id3064 . -1) (undo-tree-id3065 . 1) (undo-tree-id3066 . 1) (undo-tree-id3067 . -1) (undo-tree-id3068 . 1) (undo-tree-id3069 . 1) (undo-tree-id3070 . -1) (undo-tree-id3071 . 1) (undo-tree-id3072 . 1) (undo-tree-id3073 . -1) (undo-tree-id3074 . 1) (undo-tree-id3075 . 1) (undo-tree-id3076 . -1) (undo-tree-id3077 . 1) (undo-tree-id3078 . 1) (undo-tree-id3079 . -1)) (25287 2384 435696 0) 0 nil])
([nil nil ((178 . 182)) nil (25287 2426 553829 0) 0 nil])
([nil nil ((184 . 186)) ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 184) (undo-tree-id2992 . -1) (undo-tree-id2993 . -2) (undo-tree-id2994 . 1) (undo-tree-id2995 . -1) (undo-tree-id2996 . 1) (undo-tree-id2997 . 1) (undo-tree-id2998 . -1) (undo-tree-id2999 . 1) (undo-tree-id3000 . 1) (undo-tree-id3001 . -1) (undo-tree-id3002 . 1) (undo-tree-id3003 . 1) (undo-tree-id3004 . -1) (undo-tree-id3005 . 1) (undo-tree-id3006 . 1) (undo-tree-id3007 . -1) (undo-tree-id3008 . 1) (undo-tree-id3009 . 1) (undo-tree-id3010 . -1) (undo-tree-id3011 . 1) (undo-tree-id3012 . 1) (undo-tree-id3013 . -1) (undo-tree-id3014 . 1) (undo-tree-id3015 . 1) (undo-tree-id3016 . -1)) (25287 2384 402409 0) 0 nil])
([nil nil ((182 . 183)) nil (25287 2426 553828 0) 0 nil])
([nil nil ((185 . 188)) ((#("equ" 0 2 (fontified t) 2 3 (fontified t)) . 185) (undo-tree-id2983 . -3) (undo-tree-id2984 . -2) (undo-tree-id2985 . -2) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . 1) (undo-tree-id2991 . -3)) (25287 2384 369241 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -182) (undo-tree-id4095 . -1) 183) nil (25287 2426 553827 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -187) 188) ((187 . 188)) (25287 2384 336049 0) 0 nil])
([nil nil ((182 . 184)) nil (25287 2426 553825 0) 0 nil])
([nil nil ((187 . 188)) ((#("?" 0 1 (fontified t)) . 187) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1)) (25287 2384 303641 0) 0 nil])
([nil nil ((183 . 188)) nil (25287 2426 553824 0) 0 nil])
([nil nil ((188 . 194)) ((#(" m 'wi" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 188) (undo-tree-id2971 . -6) (undo-tree-id2972 . -4) (undo-tree-id2973 . -4) (undo-tree-id2974 . -4) (undo-tree-id2975 . 2) (undo-tree-id2976 . -6)) (25287 2384 271783 0) 0 nil])
([nil nil ((188 . 190)) nil (25287 2426 553823 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -192) (#("i" 0 1 (fontified t)) . -193) 194) ((192 . 194)) (25287 2384 237782 0) 0 nil])
([nil nil ((189 . 191)) nil (25287 2426 553822 0) 0 nil])
([nil nil ((192 . 198)) ((#("genert" 0 5 (fontified t) 5 6 (fontified t)) . 192) (undo-tree-id2967 . -6) (undo-tree-id2968 . -5) (undo-tree-id2969 . 1) (undo-tree-id2970 . -6)) (25287 2384 204495 0) 0 nil])
([nil nil ((190 . 193)) nil (25287 2426 553821 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -197) 198) ((197 . 198)) (25287 2384 173818 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -192) (undo-tree-id4094 . -1) 193) nil (25287 2426 553819 0) 0 nil])
([nil nil ((197 . 200)) ((#("ate" 0 3 (fontified t)) . 197)) (25287 2384 140818 0) 0 nil])
([nil nil ((192 . 202)) nil (25287 2426 553817 0) 0 nil])
([nil nil ((201 . 210)) ((#(" generate" 0 9 (fontified t)) . 201)) (25287 2384 107221 0) 0 nil])
([nil nil ((203 . 204)) nil (25287 2426 553967 0) 0 nil])
([nil nil ((211 . 215)) ((#("
	  " 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t)) . 211) (undo-tree-id2927 . -1) (undo-tree-id2928 . -4) (undo-tree-id2929 . -1) (undo-tree-id2930 . -4) (undo-tree-id2931 . -4) (undo-tree-id2932 . -4) (undo-tree-id2933 . -4) (undo-tree-id2934 . -4) (undo-tree-id2935 . -4) (undo-tree-id2936 . -4) (undo-tree-id2937 . -4) (undo-tree-id2938 . -4) (undo-tree-id2939 . -4) (undo-tree-id2940 . -4) (undo-tree-id2941 . -4) (undo-tree-id2942 . -4) (undo-tree-id2943 . -4) (undo-tree-id2944 . -4) (undo-tree-id2945 . -4) (undo-tree-id2946 . -4) (undo-tree-id2947 . -4) (undo-tree-id2948 . -4) (undo-tree-id2949 . -4) (undo-tree-id2950 . -4) (undo-tree-id2951 . -4) (undo-tree-id2952 . -4) (undo-tree-id2953 . 1) (undo-tree-id2954 . -3) (undo-tree-id2955 . 1) (undo-tree-id2956 . 1) (undo-tree-id2957 . -3) (undo-tree-id2958 . 1) (undo-tree-id2959 . 4) (undo-tree-id2960 . 4) (undo-tree-id2961 . 4) (undo-tree-id2962 . 4) (undo-tree-id2963 . 4) (undo-tree-id2964 . -4) (undo-tree-id2965 . -4) (undo-tree-id2966 . -4)) (25287 2384 73059 0) 0 nil])
([nil nil ((204 . 206)) nil (25287 2482 619150 0) 0 nil] [nil nil ((204 . 207) (#(" " 0 1 (fontified nil)) . 203) (undo-tree-id4091 . -1) (undo-tree-id4092 . 1) (undo-tree-id4093 . -1) (204 . 205)) ((#("
" 0 1 (fontified nil)) . 204) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . 1) (undo-tree-id4100 . -1) (203 . 204) (#("		 " 0 3 (fontified t)) . 204) (undo-tree-id4101 . -3) (undo-tree-id4102 . -3)) (25287 2426 553811 0) 0 nil])
([nil nil ((215 . 217)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 215) (undo-tree-id2921 . -1) (undo-tree-id2922 . 1) (undo-tree-id2923 . -1) (undo-tree-id2924 . 1) (undo-tree-id2925 . 1) (undo-tree-id2926 . -1)) (25287 2384 39520 0) 0 nil])
([nil nil ((205 . 212)) nil (25287 2482 619149 0) 0 nil])
nil
([nil nil ((216 . 218)) ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 216) (undo-tree-id2918 . -1) (undo-tree-id2919 . 1) (undo-tree-id2920 . -1)) (25287 2384 8132 0) 0 nil])
([nil nil ((212 . 214)) nil (25287 2482 619148 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 215) (undo-tree-id66 . 1) (undo-tree-id68 . 1) (undo-tree-id70 . 1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -215) (undo-tree-id72 . 1) (undo-tree-id74 . -1) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 216) (undo-tree-id77 . 1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -216) (undo-tree-id79 . 1) 217) ((216 . 217) (215 . 217) (215 . 216)) (25287 2383 975599 0) 0 nil])
([nil nil ((213 . 215)) nil (25287 2482 619147 0) 0 nil])
([nil nil ((#("((eq? m 'generate) generate)" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face)) 2 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-4-face))) . 183) (undo-tree-id312 . -28)) ((183 . 211)) (25287 2383 941266 0) 0 nil] [nil nil ((nil rear-nonsticky nil 218 . 219) (nil fontified nil 216 . 219) (nil fontified nil 215 . 216) (215 . 219)) ((#("
	  " 0 1 (fontified nil) 1 3 (fontified nil) 3 4 (fontified nil rear-nonsticky nil)) . 215) (undo-tree-id280 . -1) (undo-tree-id281 . -4) (undo-tree-id282 . 4) (undo-tree-id283 . -4) (nil fontified t 215 . 216) (nil rear-nonsticky t 218 . 219)) (25279 8479 388693 0) 0 nil] [nil nil ((#("((eq? m 'generate) generate)" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face)) 2 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-4-face))) . 183) (undo-tree-id37 . -28) (undo-tree-id38 . -20) (undo-tree-id39 . 1) (undo-tree-id40 . 8) (undo-tree-id41 . -21) (undo-tree-id42 . 1) (undo-tree-id43 . 7) (undo-tree-id44 . -22) (undo-tree-id45 . 1) (undo-tree-id46 . 6) (undo-tree-id47 . -23) (undo-tree-id48 . 1) (undo-tree-id49 . 5) (undo-tree-id50 . -24) (undo-tree-id51 . 1) (undo-tree-id52 . 4) (undo-tree-id53 . -25) (undo-tree-id54 . 1) (undo-tree-id55 . 3) (undo-tree-id56 . -26) (undo-tree-id57 . 1) (undo-tree-id58 . 2) (undo-tree-id59 . -27) (undo-tree-id60 . -28) (undo-tree-id61 . 28) (undo-tree-id62 . 28) (undo-tree-id63 . 28) (undo-tree-id64 . -28)) ((183 . 211)) (25279 8473 591472 0) 0 nil])
([nil nil ((215 . 217)) nil (25287 2482 619146 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 210 . 211) (nil fontified nil 210 . 211) (nil fontified nil 201 . 210) (nil fontified nil 200 . 201) (nil fontified nil 185 . 200) (nil fontified nil 184 . 185) (nil fontified nil 183 . 184) (183 . 211)) ((#("((eq? m 'generate) generate)" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil) 2 10 (fontified nil) 10 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-5-face) fontified nil) 18 20 (fontified nil) 20 24 (fontified nil) 24 25 (fontified nil) 25 27 (fontified nil) 27 28 (rear-nonsticky nil face (rainbow-delimiters-depth-4-face) fontified nil)) . 183) (undo-tree-id2915 . -28) (undo-tree-id2916 . -28) (undo-tree-id2917 . -28) (nil rear-nonsticky nil 210 . 211)) (25287 2383 907713 0) 0 nil])
nil
nil
([nil nil ((216 . 227)) nil (25287 2482 619145 0) 0 nil])
([nil nil ((211 . 212)) ((#("n" 0 1 (fontified t)) . 211) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1)) (25287 2383 876553 0) 0 nil])
([nil nil ((230 . 234)) nil (25287 2482 619144 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -211) 212) ((211 . 212)) (25287 2383 843898 0) 0 nil])
([nil nil ((#("		 " 0 3 (fontified nil)) . 230) (undo-tree-id4108 . -3) (#("
" 0 1 (fontified t)) . -230) (undo-tree-id4109 . -1) 234) nil (25287 2482 619143 0) 0 nil])
([nil nil ((218 . 219)) ((#("j" 0 1 (fontified t)) . 218) (undo-tree-id2910 . -1) (undo-tree-id2911 . 1) (undo-tree-id2912 . -1)) (25287 2383 811136 0) 0 nil])
([nil nil ((231 . 234)) nil (25287 2482 619139 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -218) 219) ((218 . 219)) (25287 2383 776235 0) 0 nil])
([nil nil ((234 . 236)) nil (25287 2482 619138 0) 0 nil])
([nil nil ((218 . 220)) ((#("hh" 0 1 (fontified t) 1 2 (fontified t)) . 218) (undo-tree-id2908 . -2) (undo-tree-id2909 . -2)) (25287 2383 743025 0) 0 nil])
([nil nil ((235 . 237)) nil (25287 2482 619137 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -218) (#("h" 0 1 (fontified t)) . -219) 220) ((218 . 220)) (25287 2383 709541 0) 0 nil])
([nil nil ((236 . 238)) nil (25287 2482 619136 0) 0 nil])
([nil nil ((214 . 215)) ((#("l" 0 1 (fontified t)) . 214) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1)) (25287 2383 678880 0) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . -236) (undo-tree-id4106 . -1) (#("e" 0 1 (fontified t)) . -237) (undo-tree-id4107 . -1) 238) nil (25287 2482 619135 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -214) 215) ((214 . 215)) (25287 2383 645263 0) 0 nil])
([nil nil ((236 . 251)) nil (25287 2482 619132 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 242 . 243) (nil fontified nil 242 . 243) (nil fontified nil 233 . 242) (nil fontified nil 232 . 233) (nil fontified nil 217 . 232) (nil fontified nil 216 . 217) (nil fontified nil 215 . 216) (215 . 243)) ((#("((eq? m 'generate) generate)" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil) 2 9 (fontified nil) 9 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-5-face) fontified nil) 18 19 (fontified nil) 19 27 (fontified nil) 27 28 (rear-nonsticky nil face (rainbow-delimiters-depth-4-face) fontified nil)) . 215) (undo-tree-id2872 . -9) (undo-tree-id2873 . -19) (undo-tree-id2874 . -28) (undo-tree-id2875 . -28) (undo-tree-id2876 . -28) (undo-tree-id2877 . -28) (undo-tree-id2878 . -28) (undo-tree-id2879 . -28) (undo-tree-id2880 . -28) (undo-tree-id2881 . -28) (undo-tree-id2882 . -28) (undo-tree-id2883 . -28) (undo-tree-id2884 . -28) (undo-tree-id2885 . -28) (undo-tree-id2886 . -28) (undo-tree-id2887 . -28) (undo-tree-id2888 . -28) (undo-tree-id2889 . 1) (undo-tree-id2890 . -19) (undo-tree-id2891 . 1) (undo-tree-id2892 . 9) (undo-tree-id2893 . -27) (undo-tree-id2894 . 11) (undo-tree-id2895 . 1) (undo-tree-id2896 . -9) (undo-tree-id2897 . 11) (undo-tree-id2898 . 11) (undo-tree-id2899 . -9) (undo-tree-id2900 . 11) (undo-tree-id2901 . 11) (undo-tree-id2902 . -9) (undo-tree-id2903 . 19) (undo-tree-id2904 . 19) (undo-tree-id2905 . -9) (nil rear-nonsticky nil 242 . 243)) (25287 2383 611100 0) 0 nil])
([nil nil ((252 . 253)) nil (25287 2482 619131 0) 0 nil])
([nil nil ((#("generate" 0 8 (fontified t)) . 224)) ((224 . 232)) (25287 2383 578647 0) 0 nil])
([nil nil ((253 . 255)) nil (25287 2482 619130 0) 0 nil])
([nil nil ((224 . 231)) ((#("depoist" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 224) (undo-tree-id2868 . -7) (undo-tree-id2869 . -4) (undo-tree-id2870 . 3) (undo-tree-id2871 . -7)) (25287 2383 545677 0) 0 nil])
([nil nil ((254 . 260)) nil (25287 2482 619129 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -228) (#("s" 0 1 (fontified t)) . -229) (#("t" 0 1 (fontified t)) . -230) 231) ((228 . 231)) (25287 2383 512603 0) 0 nil])
([nil nil ((260 . 262)) nil (25287 2482 619128 0) 0 nil])
([nil nil ((228 . 231)) ((#("sit" 0 3 (fontified t)) . 228)) (25287 2383 480530 0) 0 nil])
([nil nil ((261 . 271)) nil (25287 2482 619127 0) 0 nil])
([nil nil ((#("generate" 0 8 (fontified t)) . -233) 241) ((233 . 241)) (25287 2383 446404 0) 0 nil])
([nil nil ((271 . 273)) nil (25287 2482 619126 0) 0 nil])
([nil nil ((233 . 240)) ((#("deposit" 0 7 (fontified t)) . 233)) (25287 2383 413146 0) 0 nil])
([nil nil ((272 . 279)) nil (25287 2482 619125 0) 0 nil])
([nil nil ((242 . 247)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 242) (undo-tree-id2867 . -1)) (25287 2383 380968 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -278) (undo-tree-id4105 . -1) 279) nil (25287 2482 619124 0) 0 nil])
([nil nil ((241 . 245)) ((#("
	  " 0 1 (fontified t) 1 4 (fontified t)) . 241) (undo-tree-id2851 . -1) (undo-tree-id2852 . -4) (undo-tree-id2853 . -4) (undo-tree-id2854 . -4) (undo-tree-id2855 . -4) (undo-tree-id2856 . -4) (undo-tree-id2857 . -4) (undo-tree-id2858 . -4) (undo-tree-id2859 . -4) (undo-tree-id2860 . -4) (undo-tree-id2861 . -4) (undo-tree-id2862 . -4) (undo-tree-id2863 . -4) (undo-tree-id2864 . -4) (undo-tree-id2865 . -4) (undo-tree-id2866 . -4)) (25287 2383 348040 0) 0 nil])
([nil nil ((278 . 279)) nil (25287 2482 619121 0) 0 nil])
([nil nil ((245 . 247)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 245) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . 1) (undo-tree-id2816 . 1) (undo-tree-id2817 . -1) (undo-tree-id2818 . 1) (undo-tree-id2819 . 1) (undo-tree-id2820 . -1) (undo-tree-id2821 . 1) (undo-tree-id2822 . 1) (undo-tree-id2823 . -1) (undo-tree-id2824 . 1) (undo-tree-id2825 . 1) (undo-tree-id2826 . -1) (undo-tree-id2827 . 1) (undo-tree-id2828 . 1) (undo-tree-id2829 . -1) (undo-tree-id2830 . 1) (undo-tree-id2831 . 1) (undo-tree-id2832 . -1) (undo-tree-id2833 . 1) (undo-tree-id2834 . 1) (undo-tree-id2835 . -1) (undo-tree-id2836 . 1) (undo-tree-id2837 . 1) (undo-tree-id2838 . -1) (undo-tree-id2839 . 1) (undo-tree-id2840 . 1) (undo-tree-id2841 . -1) (undo-tree-id2842 . 1) (undo-tree-id2843 . 1) (undo-tree-id2844 . -1) (undo-tree-id2845 . 1) (undo-tree-id2846 . 1) (undo-tree-id2847 . -1) (undo-tree-id2848 . 1) (undo-tree-id2849 . 1) (undo-tree-id2850 . -1)) (25287 2383 314892 0) 0 nil])
([nil nil ((279 . 288)) nil (25287 2482 619120 0) 0 nil])
([nil nil ((246 . 251)) ((#("else " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 246) (undo-tree-id2800 . -5) (undo-tree-id2801 . -5) (undo-tree-id2802 . -5) (undo-tree-id2803 . -5) (undo-tree-id2804 . -5) (undo-tree-id2805 . -5) (undo-tree-id2806 . -5) (undo-tree-id2807 . -5) (undo-tree-id2808 . -5) (undo-tree-id2809 . -5) (undo-tree-id2810 . -5) (undo-tree-id2811 . -5) (undo-tree-id2812 . -5)) (25287 2383 283173 0) 0 nil])
([nil nil ((290 . 298)) nil (25287 2482 619120 0) 0 nil])
([nil nil ((251 . 253)) ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 251) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . 1) (undo-tree-id2771 . 1) (undo-tree-id2772 . -1) (undo-tree-id2773 . 1) (undo-tree-id2774 . 1) (undo-tree-id2775 . -1) (undo-tree-id2776 . 1) (undo-tree-id2777 . 1) (undo-tree-id2778 . -1) (undo-tree-id2779 . 1) (undo-tree-id2780 . 1) (undo-tree-id2781 . -1) (undo-tree-id2782 . 1) (undo-tree-id2783 . 1) (undo-tree-id2784 . -1) (undo-tree-id2785 . 1) (undo-tree-id2786 . 1) (undo-tree-id2787 . -1) (undo-tree-id2788 . 1) (undo-tree-id2789 . 1) (undo-tree-id2790 . -1) (undo-tree-id2791 . 1) (undo-tree-id2792 . 1) (undo-tree-id2793 . -1) (undo-tree-id2794 . 1) (undo-tree-id2795 . 1) (undo-tree-id2796 . -1) (undo-tree-id2797 . 1) (undo-tree-id2798 . 1) (undo-tree-id2799 . -1)) (25287 2383 249732 0) 0 nil])
([nil nil ((298 . 302)) nil (25287 2482 619119 0) 0 nil])
([nil nil ((252 . 258)) ((#("error " 0 6 (fontified t)) . 252) (undo-tree-id2757 . -6) (undo-tree-id2758 . -6) (undo-tree-id2759 . -6) (undo-tree-id2760 . -6) (undo-tree-id2761 . -6) (undo-tree-id2762 . -6) (undo-tree-id2763 . -6) (undo-tree-id2764 . -6) (undo-tree-id2765 . -6) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6)) (25287 2383 215555 0) 0 nil])
([nil nil ((304 . 307)) nil (25287 2482 619117 0) 0 nil])
([nil nil ((258 . 260)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 258) (undo-tree-id2732 . -1) (undo-tree-id2733 . -2) (undo-tree-id2734 . 1) (undo-tree-id2735 . -1) (undo-tree-id2736 . 1) (undo-tree-id2737 . 1) (undo-tree-id2738 . -1) (undo-tree-id2739 . 1) (undo-tree-id2740 . 1) (undo-tree-id2741 . -1) (undo-tree-id2742 . 1) (undo-tree-id2743 . 1) (undo-tree-id2744 . -1) (undo-tree-id2745 . 1) (undo-tree-id2746 . 1) (undo-tree-id2747 . -1) (undo-tree-id2748 . 1) (undo-tree-id2749 . 1) (undo-tree-id2750 . -1) (undo-tree-id2751 . 1) (undo-tree-id2752 . 1) (undo-tree-id2753 . -1) (undo-tree-id2754 . 1) (undo-tree-id2755 . 1) (undo-tree-id2756 . -1)) (25287 2383 182712 0) 0 nil])
([nil nil ((307 . 309)) nil (25287 2482 619116 0) 0 nil])
([nil nil ((259 . 262)) ((#("Unk" 0 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 259) (undo-tree-id2723 . -3) (undo-tree-id2724 . -2) (undo-tree-id2725 . -2) (undo-tree-id2726 . -2) (undo-tree-id2727 . -2) (undo-tree-id2728 . -2) (undo-tree-id2729 . -2) (undo-tree-id2730 . 1) (undo-tree-id2731 . -3)) (25287 2383 148881 0) 0 nil])
([nil nil ((308 . 312)) nil (25287 2482 619115 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-string-face)) . -261) 262) ((261 . 262)) (25287 2383 115177 0) 0 nil])
([nil nil ((312 . 319)) nil (25287 2482 619114 0) 0 nil])
([nil nil ((261 . 264)) ((#("kjn" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 261) (undo-tree-id2716 . -3) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . 2) (undo-tree-id2722 . -3)) (25287 2383 100601 0) 0 nil])
([nil nil ((319 . 321)) nil (25287 2482 619113 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -262) (#("n" 0 1 (fontified t face font-lock-string-face)) . -263) 264) ((262 . 264)) (25287 2382 583730 0) 0 nil])
([nil nil ((320 . 322)) nil (25287 2482 619112 0) 0 nil])
([nil nil ((262 . 266)) ((#("nonw" 0 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . 262) (undo-tree-id2711 . -4) (undo-tree-id2712 . -2) (undo-tree-id2713 . -2) (undo-tree-id2714 . 2) (undo-tree-id2715 . -4)) (25287 2382 311070 0) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-string-face fontified t)) . -320) (undo-tree-id4103 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -321) (undo-tree-id4104 . -1) 322) nil (25287 2482 619110 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-string-face)) . -264) (#("w" 0 1 (fontified t face font-lock-string-face)) . -265) 266) ((264 . 266)) (25287 2382 287191 0) 0 nil])
([nil nil ((320 . 337)) nil (25287 2482 619101 0) 0 nil])
([nil nil ((264 . 280)) ((#("wn request -- MA" 0 16 (face font-lock-string-face fontified t)) . 264) (undo-tree-id2709 . -16) (undo-tree-id2710 . -16)) (25287 2382 245501 0) 0 nil])
([nil nil ((341 . 343)) nil (25287 2482 619099 0) 0 nil])
([nil nil ((280 . 290)) ((#("KE-ACCOUNT" 0 10 (face font-lock-string-face fontified t)) . 280)) (25287 2382 211772 0) 0 nil])
([nil nil ((343 . 351)) nil (25287 2482 619095 0) 0 nil])
([nil nil ((291 . 293)) ((#(" m" 0 2 (fontified t)) . 291)) (25287 2382 178785 0) 0 nil])
([nil nil ((354 . 356) (t 25287 2482 0 0)) nil (25287 2524 488510 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 296) (#("
" 0 1 (fontified t)) . -296)) ((296 . 297) (296 . 300)) (25287 2382 148402 0) 0 nil])
([nil nil ((356 . 358)) nil (25287 2524 488509 0) 0 nil])
([nil nil ((297 . 300)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 297) (undo-tree-id2696 . -1) (undo-tree-id2697 . -3) (undo-tree-id2698 . -3) (undo-tree-id2699 . -3) (undo-tree-id2700 . -3) (undo-tree-id2701 . -3) (undo-tree-id2702 . -3) (undo-tree-id2703 . -3) (undo-tree-id2704 . -3) (undo-tree-id2705 . -3) (undo-tree-id2706 . -3) (undo-tree-id2707 . -3) (undo-tree-id2708 . -3)) (25287 2382 114807 0) 0 nil])
([nil nil ((357 . 367)) nil (25287 2524 488509 0) 0 nil])
([nil nil ((300 . 302)) ((#("di" 0 2 (fontified t)) . 300) (undo-tree-id2693 . -2) (undo-tree-id2694 . 2) (undo-tree-id2695 . -2)) (25287 2382 81797 0) 0 nil])
([nil nil ((367 . 369)) nil (25287 2524 488508 0) 0 nil])
([nil nil ((300 . 303) (#("di" 0 2 (fontified t)) . -300) 302) ((300 . 302) (#("dis" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 300) (undo-tree-id2690 . -3) (undo-tree-id2691 . 3) (undo-tree-id2692 . -3)) (25287 2382 47843 0) 0 nil])
([nil nil ((369 . 371)) nil (25287 2524 488507 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -300) (#("i" 0 1 (fontified t)) . -301) (#("s" 0 1 (fontified t)) . -302) 303) ((300 . 303)) (25287 2382 14106 0) 0 nil])
([nil nil ((370 . 371)) nil (25287 2524 488506 0) 0 nil])
([nil nil ((300 . 308)) ((#("dispatch" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 300) (undo-tree-id2681 . -8) (undo-tree-id2682 . 8) (undo-tree-id2683 . 8) (undo-tree-id2684 . 8) (undo-tree-id2685 . 8) (undo-tree-id2686 . 8) (undo-tree-id2687 . 8) (undo-tree-id2688 . 8) (undo-tree-id2689 . 8)) (25287 2381 981389 0) 0 nil])
([nil nil ((373 . 375)) nil (25287 2524 488505 0) 0 nil])
([nil nil ((149 . 152)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 149) (undo-tree-id2630 . -1) (undo-tree-id2631 . -3) (undo-tree-id2632 . -3) (undo-tree-id2633 . -3) (undo-tree-id2634 . -3) (undo-tree-id2635 . -3) (undo-tree-id2636 . -3) (undo-tree-id2637 . 3) (undo-tree-id2638 . 3) (undo-tree-id2639 . -3) (undo-tree-id2640 . -3) (undo-tree-id2641 . -1) (undo-tree-id2642 . -3) (undo-tree-id2643 . -3) (undo-tree-id2644 . -3) (undo-tree-id2645 . -3) (undo-tree-id2646 . -3) (undo-tree-id2647 . -3) (undo-tree-id2648 . -1) (undo-tree-id2649 . -3) (undo-tree-id2650 . -3) (undo-tree-id2651 . -1) (undo-tree-id2652 . -3) (undo-tree-id2653 . -3) (undo-tree-id2654 . -3) (undo-tree-id2655 . -3) (undo-tree-id2656 . -3) (undo-tree-id2657 . -3) (undo-tree-id2658 . -3) (undo-tree-id2659 . -3) (undo-tree-id2660 . -3) (undo-tree-id2661 . -3) (undo-tree-id2662 . -3) (undo-tree-id2663 . -3) (undo-tree-id2664 . -3) (undo-tree-id2665 . -3) (undo-tree-id2666 . -3) (undo-tree-id2667 . -3) (undo-tree-id2668 . -3) (undo-tree-id2669 . -3) (undo-tree-id2670 . -3) (undo-tree-id2671 . -3) (undo-tree-id2672 . -3) (undo-tree-id2673 . -3) (undo-tree-id2674 . -3) (undo-tree-id2675 . -3) (undo-tree-id2676 . -3) (undo-tree-id2677 . -3) (undo-tree-id2678 . -3) (undo-tree-id2679 . -3) (undo-tree-id2680 . -3)) (25287 2381 948192 0) 0 nil])
([nil nil ((375 . 377)) nil (25287 2524 488504 0) 0 nil])
([nil nil ((152 . 154)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 152) (undo-tree-id2549 . -2) (undo-tree-id2550 . -2) (undo-tree-id2551 . -1) (undo-tree-id2552 . -2) (undo-tree-id2553 . -1) (undo-tree-id2554 . 1) (undo-tree-id2555 . -1) (undo-tree-id2556 . 1) (undo-tree-id2557 . 1) (undo-tree-id2558 . -1) (undo-tree-id2559 . 1) (undo-tree-id2560 . -2) (undo-tree-id2561 . -2) (undo-tree-id2562 . -2) (undo-tree-id2563 . -1) (undo-tree-id2564 . 1) (undo-tree-id2565 . -1) (undo-tree-id2566 . 1) (undo-tree-id2567 . -1) (undo-tree-id2568 . 1) (undo-tree-id2569 . -1) (undo-tree-id2570 . 1) (undo-tree-id2571 . 1) (undo-tree-id2572 . -1) (undo-tree-id2573 . 1) (undo-tree-id2574 . 1) (undo-tree-id2575 . -1) (undo-tree-id2576 . 1) (undo-tree-id2577 . 1) (undo-tree-id2578 . -1) (undo-tree-id2579 . 1) (undo-tree-id2580 . 1) (undo-tree-id2581 . -1) (undo-tree-id2582 . 1) (undo-tree-id2583 . 1) (undo-tree-id2584 . -1) (undo-tree-id2585 . 1) (undo-tree-id2586 . 1) (undo-tree-id2587 . -1) (undo-tree-id2588 . 1) (undo-tree-id2589 . 1) (undo-tree-id2590 . -1) (undo-tree-id2591 . 1) (undo-tree-id2592 . 1) (undo-tree-id2593 . -1) (undo-tree-id2594 . 1) (undo-tree-id2595 . 1) (undo-tree-id2596 . -1) (undo-tree-id2597 . 1) (undo-tree-id2598 . 1) (undo-tree-id2599 . -1) (undo-tree-id2600 . 1) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) (undo-tree-id2610 . 1) (undo-tree-id2611 . -1) (undo-tree-id2612 . 1) (undo-tree-id2613 . 1) (undo-tree-id2614 . -1) (undo-tree-id2615 . 1) (undo-tree-id2616 . 1) (undo-tree-id2617 . -1) (undo-tree-id2618 . 1) (undo-tree-id2619 . 1) (undo-tree-id2620 . -1) (undo-tree-id2621 . 1) (undo-tree-id2622 . 1) (undo-tree-id2623 . -1) (undo-tree-id2624 . 1) (undo-tree-id2625 . 1) (undo-tree-id2626 . -1) (undo-tree-id2627 . 1) (undo-tree-id2628 . 1) (undo-tree-id2629 . -1)) (25287 2381 914791 0) 0 nil])
([nil nil ((376 . 378)) nil (25287 2524 488503 0) 0 nil])
([nil nil ((153 . 160)) ((#("define " 0 2 (face font-lock-keyword-face fontified t) 2 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 153) (undo-tree-id2525 . -7) (undo-tree-id2526 . -7) (undo-tree-id2527 . -7) (undo-tree-id2528 . -7) (undo-tree-id2529 . -7) (undo-tree-id2530 . -7) (undo-tree-id2531 . -7) (undo-tree-id2532 . -7) (undo-tree-id2533 . -7) (undo-tree-id2534 . -7) (undo-tree-id2535 . -7) (undo-tree-id2536 . -7) (undo-tree-id2537 . -7) (undo-tree-id2538 . -7) (undo-tree-id2539 . -7) (undo-tree-id2540 . -7) (undo-tree-id2541 . -7) (undo-tree-id2542 . -7) (undo-tree-id2543 . -7) (undo-tree-id2544 . -7) (undo-tree-id2545 . -7) (undo-tree-id2546 . -7) (undo-tree-id2547 . -7) (undo-tree-id2548 . -7)) (25287 2381 884020 0) 0 nil])
([nil nil ((377 . 382)) nil (25287 2524 488502 0) 0 nil])
([nil nil ((160 . 161)) ((#("g" 0 1 (face font-lock-function-name-face fontified t)) . 160) (undo-tree-id2522 . -1) (undo-tree-id2523 . 1) (undo-tree-id2524 . -1)) (25287 2381 850536 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 375) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -375) (undo-tree-id4110 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 376) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -376) (undo-tree-id4111 . -1) (#("r" 0 1 (fontified t)) . -377) (undo-tree-id4112 . -1) (#("a" 0 1 (fontified t)) . -378) (undo-tree-id4113 . -1) (#("n" 0 1 (fontified t)) . -379) (undo-tree-id4114 . -1) (#("d" 0 1 (fontified t)) . -380) (undo-tree-id4115 . -1) (#(" " 0 1 (fontified t)) . -381) (undo-tree-id4116 . -1) 382) nil (25287 2524 488500 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-function-name-face)) . -160) (undo-tree-id290 . 1) 161) ((160 . 161)) (25287 2381 817436 0) 0 nil])
([nil nil ((375 . 377)) nil (25287 2524 488486 0) 0 nil])
([nil nil ((160 . 167)) ((#("generae" 0 6 (face font-lock-function-name-face fontified t) 6 7 (face font-lock-function-name-face fontified t)) . 160) (undo-tree-id2500 . -7) (undo-tree-id2501 . -6) (undo-tree-id2502 . -6) (undo-tree-id2503 . -6) (undo-tree-id2504 . -6) (undo-tree-id2505 . -6) (undo-tree-id2506 . -6) (undo-tree-id2507 . -6) (undo-tree-id2508 . -6) (undo-tree-id2509 . -6) (undo-tree-id2510 . -6) (undo-tree-id2511 . -6) (undo-tree-id2512 . -6) (undo-tree-id2513 . -6) (undo-tree-id2514 . -6) (undo-tree-id2515 . -6) (undo-tree-id2516 . -6) (undo-tree-id2517 . -6) (undo-tree-id2518 . -6) (undo-tree-id2519 . -6) (undo-tree-id2520 . 1) (undo-tree-id2521 . -7)) (25287 2381 783450 0) 0 nil])
([nil nil ((376 . 390)) nil (25287 2524 488486 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . -166) (undo-tree-id287 . 1) 167) ((166 . 167)) (25287 2381 751374 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 407 . 408) (nil fontified nil 407 . 408) (nil fontified nil 393 . 407) (nil fontified nil 392 . 393) (392 . 408)) nil (25287 2524 488485 0) 0 nil])
([nil nil ((166 . 168)) ((#("te" 0 2 (face font-lock-function-name-face fontified t)) . 166) (undo-tree-id2481 . -2) (undo-tree-id2482 . -2) (undo-tree-id2483 . -2) (undo-tree-id2484 . -2) (undo-tree-id2485 . -2) (undo-tree-id2486 . -2) (undo-tree-id2487 . -2) (undo-tree-id2488 . -2) (undo-tree-id2489 . -2) (undo-tree-id2490 . -2) (undo-tree-id2491 . -2) (undo-tree-id2492 . -2) (undo-tree-id2493 . -2) (undo-tree-id2494 . -2) (undo-tree-id2495 . -2) (undo-tree-id2496 . -2) (undo-tree-id2497 . -2) (undo-tree-id2498 . -2) (undo-tree-id2499 . -2)) (25287 2381 718267 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 423 . 424) (nil fontified nil 423 . 424) (nil fontified nil 409 . 423) (nil fontified nil 408 . 409) (408 . 424)) nil (25287 2524 488483 0) 0 nil])
([nil nil ((168 . 170)) ((#(" 3" 0 1 (fontified t) 1 2 (fontified t)) . 168) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . 1) (undo-tree-id2480 . -2)) (25287 2381 684884 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 439 . 440) (nil fontified nil 439 . 440) (nil fontified nil 425 . 439) (nil fontified nil 424 . 425) (424 . 440)) nil (25287 2524 488481 0) 0 nil])
([nil nil ((171 . 174)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 171) (undo-tree-id2449 . -1) (undo-tree-id2450 . -3) (undo-tree-id2451 . -3) (undo-tree-id2452 . -3) (undo-tree-id2453 . -3) (undo-tree-id2454 . -3) (undo-tree-id2455 . -1) (undo-tree-id2456 . -3) (undo-tree-id2457 . -3) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) (undo-tree-id2460 . -3) (undo-tree-id2461 . -3) (undo-tree-id2462 . -3)) (25287 2381 652174 0) 0 nil] [nil nil ((170 . 175)) ((#("
    " 0 5 (fontified t)) . 170) (undo-tree-id314 . -1) (undo-tree-id315 . -5) (undo-tree-id316 . 5) (undo-tree-id317 . -5)) (25279 8640 486501 0) 0 nil] [nil nil ((#("m" 0 1 (fontified t)) . 192) (undo-tree-id284 . 1) (undo-tree-id285 . -1)) ((192 . 193)) (25279 8637 601146 0) 0 nil])
([nil nil ((408 . 409)) nil (25287 2524 488479 0) 0 nil])
([nil nil ((174 . 176)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 174) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . 1) (undo-tree-id2426 . -1) (undo-tree-id2427 . 1) (undo-tree-id2428 . 1) (undo-tree-id2429 . -1) (undo-tree-id2430 . 1) (undo-tree-id2431 . 1) (undo-tree-id2432 . -1) (undo-tree-id2433 . 1) (undo-tree-id2434 . -1) (undo-tree-id2435 . 1) (undo-tree-id2436 . -1) (undo-tree-id2437 . 1) (undo-tree-id2438 . 1) (undo-tree-id2439 . -1) (undo-tree-id2440 . 1) (undo-tree-id2441 . 1) (undo-tree-id2442 . -1) (undo-tree-id2443 . 1) (undo-tree-id2444 . 1) (undo-tree-id2445 . -1) (undo-tree-id2446 . 1) (undo-tree-id2447 . 1) (undo-tree-id2448 . -1)) (25287 2381 618992 0) 0 nil])
nil
nil
([nil nil ((425 . 426)) nil (25287 2524 488475 0) 0 nil])
([nil nil ((175 . 182)) ((#("define " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 175) (undo-tree-id2413 . -7) (undo-tree-id2414 . -7) (undo-tree-id2415 . -7) (undo-tree-id2416 . -7) (undo-tree-id2417 . -7) (undo-tree-id2418 . -7) (undo-tree-id2419 . -7) (undo-tree-id2420 . -7) (undo-tree-id2421 . -7) (undo-tree-id2422 . -7)) (25287 2381 585457 0) 0 nil])
([nil nil ((1 . 6) (t 25287 2524 0 0)) nil (25291 65284 799623 0) 0 nil])
([nil nil ((182 . 186)) ((#("rest" 0 3 (face font-lock-function-name-face fontified t) 3 4 (face font-lock-function-name-face fontified t)) . 182) (undo-tree-id2403 . -3) (undo-tree-id2404 . -4) (undo-tree-id2405 . -3) (undo-tree-id2406 . -3) (undo-tree-id2407 . -3) (undo-tree-id2408 . -3) (undo-tree-id2409 . -3) (undo-tree-id2410 . -3) (undo-tree-id2411 . 1) (undo-tree-id2412 . -4)) (25287 2381 552715 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("n" 0 1 (fontified t)) . -2) (undo-tree-id11 . -1) (undo-tree-id12 . 1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("n" 0 1 (fontified t)) . -3) (undo-tree-id20 . -1) (undo-tree-id21 . 1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("n" 0 1 (fontified t)) . -4) (undo-tree-id27 . -1) (undo-tree-id28 . 1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("n" 0 1 (fontified t)) . -5) (undo-tree-id32 . -1) (undo-tree-id33 . 1) (undo-tree-id34 . -1) 6) nil (25291 65284 799616 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-function-name-face)) . -185) 186) ((185 . 186)) (25287 2381 520182 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -127) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 128 (t 25291 65284 0 0)) nil (25291 65474 100947 0) 0 nil])
([nil nil ((185 . 190)) ((#("et 45" 0 2 (face font-lock-function-name-face fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 185) (undo-tree-id2392 . -2) (undo-tree-id2393 . -5) (undo-tree-id2394 . 3) (undo-tree-id2395 . -2) (undo-tree-id2396 . 3) (undo-tree-id2397 . -4) (undo-tree-id2398 . 3) (undo-tree-id2399 . -2) (undo-tree-id2400 . 3) (undo-tree-id2401 . -5) (undo-tree-id2402 . -5)) (25287 2381 487812 0) 0 nil])
([nil nil ((127 . 129)) nil (25291 65474 100941 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -189) 190) ((189 . 190)) (25287 2381 453947 0) 0 nil])
([nil nil ((#("(define (r)
  (let ((seed 0)
	(define (dispatch m)
	  (cond ((eq? m 'reset) (lambda (x (set! seed x))))
		((eq? m 'generate) (begin (set! seed (rand-update seed))
					  seed))
		(else error \"invalid operation\")))
	dispatch)))" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 9 (fontified t) 9 10 (fontified t face font-lock-function-name-face) 10 12 (fontified t) 12 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 31 (fontified t) 31 37 (fontified t face font-lock-keyword-face) 37 39 (fontified t) 39 47 (fontified t face font-lock-function-name-face) 47 55 (fontified t) 55 59 (fontified t face font-lock-keyword-face) 59 77 (fontified t) 77 83 (fontified t face font-lock-keyword-face) 83 88 (fontified t) 88 92 (fontified t face font-lock-keyword-face) 92 126 (fontified t) 126 131 (fontified t face font-lock-keyword-face) 131 133 (fontified t) 133 137 (fontified t face font-lock-keyword-face) 137 180 (fontified t) 180 184 (fontified t face font-lock-keyword-face) 184 191 (fontified t) 191 210 (fontified t face font-lock-string-face) 210 226 (fontified t)) . 129) (undo-tree-id57 . -12) (undo-tree-id58 . -226) (undo-tree-id59 . -226) (undo-tree-id60 . -226)) nil (25291 65474 100940 0) 0 nil])
([nil nil ((#("deposit" 0 7 (fontified t)) . 265)) ((265 . 272)) (25287 2381 419990 0) 0 nil])
([nil nil ((#("(define rand (r))" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-function-name-face) 12 17 (fontified t)) . 131) (undo-tree-id55 . -17) (undo-tree-id56 . -17)) nil (25291 65474 101198 0) 0 nil])
([nil nil ((265 . 269)) ((#("rest" 0 3 (fontified t) 3 4 (fontified t)) . 265) (undo-tree-id2388 . -4) (undo-tree-id2389 . -3) (undo-tree-id2390 . 1) (undo-tree-id2391 . -4)) (25287 2381 386588 0) 0 nil])
([nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 150) (undo-tree-id248 . -16) (undo-tree-id249 . -16)) nil (25292 243 516349 0) 0 nil] [nil nil ((#("#lang racket

(require \"Ex3_5.rkt\")


; I'm going to define a new rand that
;will solve will be the solution to this problem.






(rand 'generate)
(rand 'generate)
(rand 'generate)
(rand 'generate)



" 0 5 (fontified t face font-lock-keyword-face) 5 12 (fontified t) 12 13 (fontified t) 13 15 (fontified t) 15 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 34 (fontified t face font-lock-string-face) 34 38 (fontified t) 38 40 (fontified t face font-lock-comment-delimiter-face) 40 76 (fontified t face font-lock-comment-face) 76 77 (fontified t face font-lock-comment-delimiter-face) 77 126 (fontified t face font-lock-comment-face) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 203 (fontified t)) . 1) (undo-tree-id35 . -13) (undo-tree-id36 . -203) (undo-tree-id37 . -126) (undo-tree-id38 . -126) (undo-tree-id39 . -126) (undo-tree-id40 . -128) (undo-tree-id41 . -128) (undo-tree-id42 . -128) (undo-tree-id43 . -130) (undo-tree-id44 . -129) (undo-tree-id45 . -149) (undo-tree-id46 . -130) (undo-tree-id47 . -149) (undo-tree-id48 . -203) (undo-tree-id49 . -150) (undo-tree-id50 . 54) (undo-tree-id51 . 53) (undo-tree-id52 . -149) (undo-tree-id53 . 203) (undo-tree-id54 . 54)) ((1 . 204)) (25291 65474 100929 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -268) 269) ((268 . 269)) (25287 2381 353720 0) 0 nil])
([nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 151) (undo-tree-id246 . -16) (undo-tree-id247 . -16)) nil (25292 243 516346 0) 0 nil])
nil
([nil nil ((268 . 270)) ((#("et" 0 2 (fontified t)) . 268)) (25287 2381 321241 0) 0 nil])
([nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 152) (undo-tree-id244 . -16) (undo-tree-id245 . -16)) nil (25292 243 516343 0) 0 nil])
([nil nil ((#("deposit" 0 7 (fontified t)) . 272)) ((272 . 279)) (25287 2381 290157 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 147 . 148) (nil fontified nil 147 . 148) (nil fontified nil 133 . 147) (nil fontified nil 132 . 133) (132 . 148)) nil (25292 243 516341 0) 0 nil])
([nil nil ((272 . 277)) ((#("reset" 0 5 (fontified t)) . 272)) (25287 2381 255379 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -139) (undo-tree-id236 . -1) (#("e" 0 1 (fontified t)) . -140) (undo-tree-id237 . -1) (#("n" 0 1 (fontified t)) . -141) (undo-tree-id238 . -1) (#("e" 0 1 (fontified t)) . -142) (undo-tree-id239 . -1) (#("r" 0 1 (fontified t)) . -143) (undo-tree-id240 . -1) (#("a" 0 1 (fontified t)) . -144) (undo-tree-id241 . -1) (#("t" 0 1 (fontified t)) . -145) (undo-tree-id242 . -1) (#("e" 0 1 (fontified t)) . -146) (undo-tree-id243 . -1) 147) nil (25292 243 516337 0) 0 nil])
([nil nil ((347 . 348) (t 25279 8705 0 0)) ((#("
" 0 1 (fontified t)) . 347) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1)) (25287 2381 222706 0) 0 nil])
([nil nil ((139 . 144)) nil (25292 243 516329 0) 0 nil])
([nil nil ((348 . 350)) ((#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 348) (undo-tree-id2347 . -1) (undo-tree-id2348 . 2) (undo-tree-id2349 . 2) (undo-tree-id2350 . 2) (undo-tree-id2351 . 2) (undo-tree-id2352 . 2) (undo-tree-id2353 . 2) (undo-tree-id2354 . 2) (undo-tree-id2355 . 2) (undo-tree-id2356 . 2) (undo-tree-id2357 . 2) (undo-tree-id2358 . 2) (undo-tree-id2359 . 2) (undo-tree-id2360 . 2) (undo-tree-id2361 . 2) (undo-tree-id2362 . 2) (undo-tree-id2363 . 2) (undo-tree-id2364 . 2) (undo-tree-id2365 . 2) (undo-tree-id2366 . 2) (undo-tree-id2367 . 2) (undo-tree-id2368 . 1) (undo-tree-id2369 . -1) (undo-tree-id2370 . 1) (undo-tree-id2371 . 1) (undo-tree-id2372 . -1)) (25287 2381 189657 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 323 . 324) (nil fontified nil 323 . 324) (nil fontified nil 322 . 323) (nil fontified nil 321 . 322) (nil fontified nil 320 . 321) (nil fontified nil 318 . 320) (nil fontified nil 282 . 318) (nil fontified nil 276 . 282) (nil fontified nil 275 . 276) (nil fontified nil 274 . 275) (nil fontified nil 270 . 274) (nil fontified nil 269 . 270) (nil fontified nil 264 . 269) (nil fontified nil 263 . 264) (nil fontified nil 262 . 263) (nil fontified nil 258 . 262) (nil fontified nil 256 . 258) (nil fontified nil 255 . 256) (nil fontified nil 246 . 255) (nil fontified nil 237 . 246) (nil fontified nil 236 . 237) (nil fontified nil 235 . 236) (nil fontified nil 229 . 235) (nil fontified nil 228 . 229) (nil fontified nil 218 . 228) (nil fontified nil 217 . 218) (nil fontified nil 201 . 217) (nil fontified nil 200 . 201) (nil fontified nil 199 . 200) (nil fontified nil 193 . 199) (nil fontified nil 192 . 193) (nil fontified nil 186 . 192) (nil fontified nil 185 . 186) (nil fontified nil 163 . 185) (nil fontified nil 162 . 163) (nil fontified nil 161 . 162) (nil fontified nil 160 . 161) (nil fontified nil 156 . 160) (nil fontified nil 155 . 156) (nil fontified nil 148 . 155) (nil fontified nil 147 . 148) (nil fontified nil 145 . 147) (nil fontified nil 137 . 145) (nil fontified nil 136 . 137) (nil fontified nil 135 . 136) (nil fontified nil 129 . 135) (nil fontified nil 128 . 129) (128 . 324)) nil (25292 243 516326 0) 0 nil])
([nil nil ((349 . 357)) ((#("new-rand" 0 8 (fontified t)) . 349) (undo-tree-id2345 . -8) (undo-tree-id2346 . -8)) (25287 2381 158110 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -170) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("o" 0 1 (fontified t)) . -171) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("w" 0 1 (fontified t)) . -172) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("-" 0 1 (fontified t)) . -173) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("m" 0 1 (fontified t)) . -174) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("a" 0 1 (fontified t)) . -175) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("n" 0 1 (fontified t)) . -176) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("y" 0 1 (fontified t)) . -177) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("-" 0 1 (fontified t)) . -178) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("c" 0 1 (fontified t)) . -179) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("a" 0 1 (fontified t)) . -180) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("l" 0 1 (fontified t)) . -181) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("l" 0 1 (fontified t)) . -182) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("s" 0 1 (fontified t)) . -183) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("?" 0 1 (fontified t)) . -184) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 185) nil (25292 243 516306 0) 0 nil])
([nil nil ((357 . 367)) ((#(" 'generate" 0 10 (fontified t)) . 357)) (25287 2381 124606 0) 0 nil])
([nil nil ((170 . 175)) nil (25292 243 516187 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 388 . 389) (nil fontified nil 388 . 389) (nil fontified nil 370 . 388) (nil fontified nil 369 . 370) (369 . 389)) ((#("(new-rand 'generate)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (rear-nonsticky nil face (rainbow-delimiters-depth-1-face) fontified nil)) . 369) (undo-tree-id2322 . -11) (undo-tree-id2323 . -11) (undo-tree-id2324 . 1) (undo-tree-id2325 . 1) (undo-tree-id2326 . -11) (undo-tree-id2327 . 1) (undo-tree-id2328 . 1) (undo-tree-id2329 . -11) (undo-tree-id2330 . 1) (undo-tree-id2331 . -20) (undo-tree-id2332 . -20) (undo-tree-id2333 . -20) (undo-tree-id2334 . 1) (undo-tree-id2335 . -11) (undo-tree-id2336 . 1) (undo-tree-id2337 . 1) (undo-tree-id2338 . -11) (undo-tree-id2339 . 1) (undo-tree-id2340 . 1) (undo-tree-id2341 . -11) (undo-tree-id2342 . 9) (undo-tree-id2343 . 9) (undo-tree-id2344 . -11) (nil rear-nonsticky nil 388 . 389)) (25287 2381 90183 0) 0 nil])
([nil nil ((204 . 205)) nil (25292 243 516647 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 380) (undo-tree-id334 . 1) (undo-tree-id336 . 1) (undo-tree-id338 . 1) (undo-tree-id340 . 1) (undo-tree-id342 . 1) (undo-tree-id344 . 1) (undo-tree-id346 . 1) (undo-tree-id348 . 1) (undo-tree-id350 . 1) (#("t" 0 1 (fontified t)) . 380) (undo-tree-id352 . 1) (undo-tree-id354 . 1) (undo-tree-id356 . 1) (undo-tree-id358 . 1) (undo-tree-id360 . 1) (undo-tree-id362 . 1) (undo-tree-id364 . 1) (undo-tree-id366 . 1) (#("a" 0 1 (fontified t)) . 380) (undo-tree-id368 . 1) (undo-tree-id370 . 1) (undo-tree-id372 . 1) (undo-tree-id374 . 1) (undo-tree-id376 . 1) (undo-tree-id378 . 1) (undo-tree-id380 . 1) (#("r" 0 1 (fontified t)) . 380) (undo-tree-id382 . 1) (undo-tree-id384 . 1) (undo-tree-id386 . 1) (undo-tree-id388 . 1) (undo-tree-id390 . 1) (undo-tree-id392 . 1) (#("e" 0 1 (fontified t)) . 380) (undo-tree-id394 . 1) (undo-tree-id396 . 1) (undo-tree-id398 . 1) (undo-tree-id400 . 1) (undo-tree-id402 . 1) (#("n" 0 1 (fontified t)) . 380) (undo-tree-id404 . 1) (undo-tree-id406 . 1) (undo-tree-id408 . 1) (undo-tree-id410 . 1) (#("e" 0 1 (fontified t)) . 380) (undo-tree-id412 . 1) (undo-tree-id414 . 1) (undo-tree-id416 . 1) (#("g" 0 1 (fontified t)) . 380) (undo-tree-id418 . 1) (undo-tree-id420 . 1)) ((380 . 381) (380 . 381) (380 . 381) (380 . 381) (380 . 381) (380 . 381) (380 . 381) (380 . 381)) (25287 2381 56761 0) 0 nil] [nil nil ((#("(new-rand '" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 11 (fontified t)) . 369) (undo-tree-id321 . -11) (undo-tree-id322 . 11) (undo-tree-id323 . -11) (undo-tree-id324 . -11) 380) ((369 . 380)) (25279 8725 155394 0) 0 nil])
([nil nil ((#("incremnent" 0 7 (fontified t) 7 10 (fontified t)) . 198) (undo-tree-id713 . -10) (undo-tree-id714 . -7) (undo-tree-id715 . -10)) nil (25292 290 681235 0) 0 nil] [nil nil ((#("(define (dispatch m)
      (cond ((eq? m 'reset) calls)
	    ((eq? m 'incremn" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 17 (fontified t face font-lock-function-name-face) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t face (rainbow-delimiters-depth-4-face)) 35 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-3-face)) 55 56 (fontified t) 56 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-3-face)) 62 63 (fontified t face (rainbow-delimiters-depth-4-face)) 63 77 (fontified t)) . 128) (undo-tree-id67 . -77) (undo-tree-id68 . -56) (undo-tree-id69 . -42) (undo-tree-id70 . -42) (undo-tree-id71 . -42) (undo-tree-id72 . -42) (undo-tree-id73 . -42) (undo-tree-id74 . -42) (undo-tree-id75 . -42) (undo-tree-id76 . -42) (undo-tree-id77 . -42) (undo-tree-id78 . -42) (undo-tree-id79 . -42) (undo-tree-id80 . -42) (undo-tree-id81 . -42) (undo-tree-id82 . -42) (undo-tree-id83 . -42) (undo-tree-id84 . -45) (undo-tree-id85 . 30) (undo-tree-id86 . 32) (undo-tree-id87 . -46) (undo-tree-id88 . 30) (undo-tree-id89 . 31) (undo-tree-id90 . -47) (undo-tree-id91 . 2) (undo-tree-id92 . 30) (undo-tree-id93 . -75) (undo-tree-id94 . 2) (undo-tree-id95 . -76) (undo-tree-id96 . 77) (undo-tree-id97 . -76) (undo-tree-id98 . 77) (undo-tree-id99 . -77) (undo-tree-id100 . -77) 205) ((128 . 205)) (25292 243 516179 0) 0 nil])
([nil nil ((380 . 384)) ((#("rees" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 380) (undo-tree-id2316 . -4) (undo-tree-id2317 . 4) (undo-tree-id2318 . -2) (undo-tree-id2319 . -2) (undo-tree-id2320 . 2) (undo-tree-id2321 . -4)) (25287 2381 23678 0) 0 nil])
nil
([nil nil ((198 . 206)) nil (25292 290 681230 0) 0 nil])
nil
([nil nil ((#("e" 0 1 (fontified t)) . -382) (undo-tree-id326 . 1) (undo-tree-id328 . -1) (#("s" 0 1 (fontified t)) . -383) (undo-tree-id331 . 1) 384) ((382 . 384)) (25287 2380 991761 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -177) (undo-tree-id708 . -1) (#("a" 0 1 (fontified t)) . -178) (undo-tree-id709 . -1) (#("l" 0 1 (fontified t)) . -179) (undo-tree-id710 . -1) (#("l" 0 1 (fontified t)) . -180) (undo-tree-id711 . -1) (#("s" 0 1 (fontified t)) . -181) (undo-tree-id712 . -1) 182) nil (25292 290 681229 0) 0 nil])
([nil nil ((382 . 385)) ((#("set" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 382) (undo-tree-id2315 . -3)) (25287 2380 958192 0) 0 nil])
([nil nil ((177 . 182)) nil (25292 290 681223 0) 0 nil])
([nil nil ((337 . 340) (t 25279 8734 0 0)) ((#("() " 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t)) . 337) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) (undo-tree-id2306 . -1) (undo-tree-id2307 . 2) (undo-tree-id2308 . -1) (undo-tree-id2309 . 2) (undo-tree-id2310 . 2) (undo-tree-id2311 . -1) (undo-tree-id2312 . 2) (undo-tree-id2313 . 2) (undo-tree-id2314 . -1)) (25287 2380 925768 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -178) (undo-tree-id704 . -1) (#("e" 0 1 (fontified t)) . -179) (undo-tree-id705 . -1) (#("s" 0 1 (fontified t)) . -180) (undo-tree-id706 . -1) (#("e" 0 1 (fontified t)) . -181) (undo-tree-id707 . -1) 182) nil (25292 290 681221 0) 0 nil])
([nil nil ((338 . 339)) ((#("j" 0 1 (fontified t)) . 338) (undo-tree-id2301 . -1) (undo-tree-id2302 . 1) (undo-tree-id2303 . -1)) (25287 2380 892553 0) 0 nil])
([nil nil ((178 . 188)) nil (25292 290 681217 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -338) 339) ((338 . 339)) (25287 2380 859219 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -177) (undo-tree-id693 . -1) (#("c" 0 1 (fontified t)) . -178) (undo-tree-id694 . -1) (#("a" 0 1 (fontified t)) . -179) (undo-tree-id695 . -1) (#("l" 0 1 (fontified t)) . -180) (undo-tree-id696 . -1) (#("l" 0 1 (fontified t)) . -181) (undo-tree-id697 . -1) (#("-" 0 1 (fontified t)) . -182) (undo-tree-id698 . -1) (#("r" 0 1 (fontified t)) . -183) (undo-tree-id699 . -1) (#("e" 0 1 (fontified t)) . -184) (undo-tree-id700 . -1) (#("s" 0 1 (fontified t)) . -185) (undo-tree-id701 . -1) (#("e" 0 1 (fontified t)) . -186) (undo-tree-id702 . -1) (#("t" 0 1 (fontified t)) . -187) (undo-tree-id703 . -1) 188) nil (25292 290 681214 0) 0 nil])
([nil nil ((338 . 348)) ((#("dispatch m" 0 10 (fontified t)) . 338)) (25287 2380 828733 0) 0 nil])
([nil nil ((177 . 179)) nil (25292 290 681204 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -349) (undo-tree-id422 . 1) (undo-tree-id424 . -1) (undo-tree-id426 . -1) (undo-tree-id428 . -1) (undo-tree-id430 . -1) (undo-tree-id432 . -1) (undo-tree-id434 . -1) (undo-tree-id436 . -1) (undo-tree-id438 . -1) (undo-tree-id440 . -1) (#("d" 0 1 (fontified t)) . -350) (undo-tree-id442 . 1) (undo-tree-id444 . -1) (undo-tree-id446 . -1) (undo-tree-id448 . -1) (undo-tree-id450 . -1) (undo-tree-id452 . -1) (undo-tree-id454 . -1) (undo-tree-id456 . -1) (undo-tree-id458 . -1) (#("i" 0 1 (fontified t)) . -351) (undo-tree-id460 . 1) (undo-tree-id462 . -1) (undo-tree-id464 . -1) (undo-tree-id466 . -1) (undo-tree-id468 . -1) (undo-tree-id470 . -1) (undo-tree-id472 . -1) (undo-tree-id474 . -1) (#("s" 0 1 (fontified t)) . -352) (undo-tree-id476 . 1) (undo-tree-id478 . -1) (undo-tree-id480 . -1) (undo-tree-id482 . -1) (undo-tree-id484 . -1) (undo-tree-id486 . -1) (undo-tree-id488 . -1) (#("p" 0 1 (fontified t)) . -353) (undo-tree-id490 . 1) (undo-tree-id492 . -1) (undo-tree-id494 . -1) (undo-tree-id496 . -1) (undo-tree-id498 . -1) (undo-tree-id500 . -1) (#("a" 0 1 (fontified t)) . -354) (undo-tree-id502 . 1) (undo-tree-id504 . -1) (undo-tree-id506 . -1) (undo-tree-id508 . -1) (undo-tree-id510 . -1) (#("t" 0 1 (fontified t)) . -355) (undo-tree-id512 . 1) (undo-tree-id514 . -1) (undo-tree-id516 . -1) (undo-tree-id518 . -1) (#("c" 0 1 (fontified t)) . -356) (undo-tree-id520 . 1) (undo-tree-id522 . -1) (undo-tree-id524 . -1) (#("h" 0 1 (fontified t)) . -357) (undo-tree-id526 . 1) (undo-tree-id528 . -1) 358) ((349 . 358)) (25287 2380 793386 0) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 177) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -177) (undo-tree-id692 . -1) 178) nil (25292 290 681202 0) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -169) (undo-tree-id534 . -1) (undo-tree-id536 . -1) 170 (t 25279 8937 0 0)) ((169 . 170)) (25287 2380 759570 0) 0 nil])
([nil nil ((177 . 179)) nil (25292 290 681200 0) 0 nil])
([nil nil ((169 . 171)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 169) (undo-tree-id2271 . -1) (undo-tree-id2272 . 2) (undo-tree-id2273 . 2) (undo-tree-id2274 . -1) (undo-tree-id2275 . 1) (undo-tree-id2276 . -1) (undo-tree-id2277 . 1) (undo-tree-id2278 . 1) (undo-tree-id2279 . -1) (undo-tree-id2280 . 1) (undo-tree-id2281 . 1) (undo-tree-id2282 . -1) (undo-tree-id2283 . 1) (undo-tree-id2284 . 1) (undo-tree-id2285 . -1) (undo-tree-id2286 . 1) (undo-tree-id2287 . 1) (undo-tree-id2288 . -1) (undo-tree-id2289 . 1) (undo-tree-id2290 . 1) (undo-tree-id2291 . -1) (undo-tree-id2292 . 1) (undo-tree-id2293 . 1) (undo-tree-id2294 . -1) (undo-tree-id2295 . 1) (undo-tree-id2296 . 1) (undo-tree-id2297 . -1) (undo-tree-id2298 . 1) (undo-tree-id2299 . 1) (undo-tree-id2300 . -1)) (25287 2380 727664 0) 0 nil])
([nil nil ((178 . 184)) nil (25292 290 681199 0) 0 nil])
([nil nil ((170 . 175)) ((#("lamba" 0 4 (fontified t) 4 5 (fontified t)) . 170) (undo-tree-id2260 . -5) (undo-tree-id2261 . -4) (undo-tree-id2262 . -4) (undo-tree-id2263 . -4) (undo-tree-id2264 . -4) (undo-tree-id2265 . -4) (undo-tree-id2266 . -4) (undo-tree-id2267 . -4) (undo-tree-id2268 . -4) (undo-tree-id2269 . 1) (undo-tree-id2270 . -5)) (25287 2380 694628 0) 0 nil])
([nil nil ((184 . 186)) nil (25292 290 681198 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -174) (undo-tree-id531 . 1) 175) ((174 . 175)) (25287 2380 661879 0) 0 nil])
([nil nil ((185 . 187)) nil (25292 290 681198 0) 0 nil])
([nil nil ((174 . 177)) ((#("da " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . 174) (undo-tree-id2252 . -3) (undo-tree-id2253 . -3) (undo-tree-id2254 . -3) (undo-tree-id2255 . -3) (undo-tree-id2256 . -3) (undo-tree-id2257 . -3) (undo-tree-id2258 . -3) (undo-tree-id2259 . -3)) (25287 2380 628865 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -185) (undo-tree-id690 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -186) (undo-tree-id691 . -1) 187) nil (25292 290 681197 0) 0 nil])
([nil nil ((177 . 179)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 177) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . 1) (undo-tree-id2249 . -1) (undo-tree-id2250 . 1) (undo-tree-id2251 . -2)) (25287 2380 595636 0) 0 nil])
([nil nil ((185 . 190)) nil (25292 290 681194 0) 0 nil])
([nil nil ((179 . 181)) ((#(" 4" 0 1 (fontified t) 1 2 (fontified t)) . 179) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . 1) (undo-tree-id2242 . -2)) (25287 2380 565920 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -218) (undo-tree-id681 . -1) (#("n" 0 1 (fontified t)) . -219) (undo-tree-id682 . -1) (#("c" 0 1 (fontified t)) . -220) (undo-tree-id683 . -1) (#("r" 0 1 (fontified t)) . -221) (undo-tree-id684 . -1) (#("e" 0 1 (fontified t)) . -222) (undo-tree-id685 . -1) (#("m" 0 1 (fontified t)) . -223) (undo-tree-id686 . -1) (#("e" 0 1 (fontified t)) . -224) (undo-tree-id687 . -1) (#("n" 0 1 (fontified t)) . -225) (undo-tree-id688 . -1) (#("t" 0 1 (fontified t)) . -226) (undo-tree-id689 . -1) 227) nil (25292 290 681191 0) 0 nil])
([nil nil ((178 . 179) (t 25279 9069 0 0)) ((#("x" 0 1 (fontified t)) . 178)) (25287 2380 529262 0) 0 nil])
([nil nil ((218 . 220)) nil (25292 290 681172 0) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -181) (undo-tree-id538 . 1) (undo-tree-id540 . -1) (undo-tree-id542 . 1) (undo-tree-id544 . 1) 182) ((181 . 182)) (25287 2380 496311 0) 0 nil])
([nil nil ((219 . 225)) nil (25292 290 681171 0) 0 nil])
([nil nil ((181 . 183)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 181) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . 1) (undo-tree-id2237 . -1)) (25287 2380 463774 0) 0 nil])
([nil nil ((225 . 227)) nil (25292 290 681170 0) 0 nil])
([nil nil ((182 . 187)) ((#("+ x 4" 0 5 (fontified t)) . 182)) (25287 2380 430909 0) 0 nil])
([nil nil ((226 . 234)) nil (25292 290 681169 0) 0 nil])
([nil nil ((371 . 374) (t 25279 9119 0 0)) ((#("() " 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (fontified t)) . 371) (undo-tree-id2209 . -1) (undo-tree-id2210 . 2) (undo-tree-id2211 . -1) (undo-tree-id2212 . 2) (undo-tree-id2213 . 2) (undo-tree-id2214 . -1) (undo-tree-id2215 . 2) (undo-tree-id2216 . 2) (undo-tree-id2217 . -1) (undo-tree-id2218 . 2) (undo-tree-id2219 . 2) (undo-tree-id2220 . -1) (undo-tree-id2221 . 2) (undo-tree-id2222 . 2) (undo-tree-id2223 . -1) (undo-tree-id2224 . 2) (undo-tree-id2225 . 2) (undo-tree-id2226 . -1) (undo-tree-id2227 . 2) (undo-tree-id2228 . -3) (undo-tree-id2229 . 2) (undo-tree-id2230 . -1) (undo-tree-id2231 . 2) (undo-tree-id2232 . 2) (undo-tree-id2233 . -1)) (25287 2380 396762 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -233) (undo-tree-id680 . -1) 234) nil (25292 290 681168 0) 0 nil])
([nil nil ((372 . 374)) ((#("ll" 0 1 (fontified t) 1 2 (fontified t)) . 372) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2)) (25287 2380 363432 0) 0 nil])
([nil nil ((233 . 234)) nil (25292 290 681166 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -372) (undo-tree-id592 . 1) (undo-tree-id594 . -1) (#("l" 0 1 (fontified t)) . -373) (undo-tree-id597 . 1) 374) ((372 . 374)) (25287 2380 330722 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -233) (undo-tree-id679 . -1) 234) nil (25292 290 681165 0) 0 nil])
([nil nil ((#("(new-rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face))) . 374) (undo-tree-id635 . -19) (undo-tree-id637 . -20) (undo-tree-id639 . 20) (undo-tree-id641 . 20) (undo-tree-id643 . -20)) ((374 . 394)) (25287 2380 297653 0) 0 nil] [nil nil ((#("(new-rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face))) . 374) (undo-tree-id579 . -20) (undo-tree-id580 . -19) (undo-tree-id581 . -20) (undo-tree-id582 . -20) (undo-tree-id583 . -20) (undo-tree-id585 . 20) (undo-tree-id587 . 20) (undo-tree-id589 . 20) (undo-tree-id590 . -20)) ((374 . 394)) (25279 9169 802936 0) 0 nil])
([nil nil ((233 . 234)) nil (25292 290 681162 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 391 . 392) (nil fontified nil 391 . 392) (nil fontified nil 373 . 391) (nil fontified nil 372 . 373) (372 . 392)) ((#("(new-rand 'generate)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 11 (fontified nil) 11 12 (fontified nil) 12 19 (fontified nil) 19 20 (rear-nonsticky nil face (rainbow-delimiters-depth-2-face) fontified nil)) . 372) (undo-tree-id2193 . -20) (undo-tree-id2194 . 1) (undo-tree-id2195 . -11) (undo-tree-id2196 . 1) (undo-tree-id2197 . 1) (undo-tree-id2198 . -11) (undo-tree-id2199 . 8) (undo-tree-id2200 . 8) (undo-tree-id2201 . -11) (undo-tree-id2202 . 9) (undo-tree-id2203 . 9) (undo-tree-id2204 . -11) (undo-tree-id2205 . 9) (undo-tree-id2206 . -20) (nil rear-nonsticky nil 391 . 392)) (25287 2380 265979 0) 0 nil] [nil nil ((nil rear-nonsticky nil 390 . 391) (nil fontified nil 390 . 391) (nil fontified nil 372 . 390) (nil fontified nil 371 . 372) (371 . 391)) ((#("(new-rand 'generate)" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face)) 1 19 (fontified nil) 19 20 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-1-face))) . 371) (undo-tree-id644 . -20) (undo-tree-id645 . 20) (undo-tree-id646 . -20) (nil rear-nonsticky t 390 . 391)) (25279 9187 572611 0) 0 nil])
([nil nil ((#(") " 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t)) . 372) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . 2) (undo-tree-id605 . 2) (undo-tree-id606 . 2) (undo-tree-id607 . 2) (undo-tree-id608 . 2) (undo-tree-id609 . 2) (undo-tree-id610 . 2) (undo-tree-id611 . 2) (undo-tree-id612 . 2) (undo-tree-id613 . 1) (undo-tree-id614 . 2) (undo-tree-id615 . -1) (undo-tree-id616 . 1) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . 1) (undo-tree-id622 . -1) (undo-tree-id623 . 2) (undo-tree-id624 . 1) (undo-tree-id625 . 2) (undo-tree-id626 . -2) (undo-tree-id627 . 1) (undo-tree-id628 . -1) (undo-tree-id629 . 2) (undo-tree-id630 . 1) (undo-tree-id631 . 2) (undo-tree-id632 . 2) (undo-tree-id633 . 2)) ((372 . 374)) (25279 9169 802817 0) 0 nil] [nil nil ((#(") " 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t)) . 372) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . 2) (undo-tree-id552 . 2) (undo-tree-id553 . 2) (undo-tree-id554 . 2) (undo-tree-id555 . 2) (undo-tree-id556 . 2) (undo-tree-id557 . 2) (undo-tree-id558 . 2) (undo-tree-id559 . 2) (undo-tree-id560 . 1) (undo-tree-id561 . 2) (undo-tree-id562 . -1) (undo-tree-id563 . 1) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . 1) (undo-tree-id569 . -1) (undo-tree-id570 . 2) (undo-tree-id571 . 1) (undo-tree-id572 . 2) (undo-tree-id573 . -2) (undo-tree-id574 . 1) (undo-tree-id575 . -1) (undo-tree-id576 . 2) (undo-tree-id577 . 1) (undo-tree-id578 . 2)) ((372 . 374)) (25279 9166 17667 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -248) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("m" 0 1 (fontified t)) . -249) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#(" " 0 1 (fontified t)) . -250) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("'" 0 1 (fontified t)) . -251) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("r" 0 1 (fontified t)) . -252) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#("e" 0 1 (fontified t)) . -253) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#("s" 0 1 (fontified t)) . -254) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("e" 0 1 (fontified t)) . -255) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("t" 0 1 (fontified t)) . -256) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("-" 0 1 (fontified t)) . -257) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#("c" 0 1 (fontified t)) . -258) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("o" 0 1 (fontified t)) . -259) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("u" 0 1 (fontified t)) . -260) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#("n" 0 1 (fontified t)) . -261) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("t" 0 1 (fontified t)) . -262) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("r" 0 1 (fontified t)) . -265) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("e" 0 1 (fontified t)) . -266) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("s" 0 1 (fontified t)) . -267) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("e" 0 1 (fontified t)) . -268) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("t" 0 1 (fontified t)) . -269) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 270) nil (25292 290 681150 0) 0 nil])
([nil nil ((392 . 394)) ((#(" 4" 0 2 (fontified t)) . 392)) (25287 2380 232937 0) 0 nil])
nil
nil
nil
([nil nil ((#(" " 0 1 (fontified t)) . -242) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 243) (undo-tree-id317 . -1) (undo-tree-id318 . 1) (undo-tree-id319 . 1) (undo-tree-id320 . 1) (undo-tree-id321 . 1) (undo-tree-id322 . 1) (undo-tree-id323 . 1) (undo-tree-id324 . 1) (undo-tree-id325 . 1) (undo-tree-id326 . 1) (undo-tree-id327 . 1) (undo-tree-id328 . 1) (undo-tree-id329 . 1) (undo-tree-id330 . 1) (undo-tree-id331 . 1) (undo-tree-id332 . 1) (undo-tree-id333 . 1) (undo-tree-id334 . 1) (undo-tree-id335 . 1) (undo-tree-id336 . 1) (undo-tree-id337 . 1) (undo-tree-id338 . 1) (undo-tree-id339 . 1) (undo-tree-id340 . 1) (undo-tree-id341 . 1) (undo-tree-id342 . 1) (undo-tree-id343 . 1) (undo-tree-id344 . 1) (undo-tree-id345 . 1) (undo-tree-id346 . 1) (undo-tree-id347 . 1) (undo-tree-id348 . 1) (undo-tree-id349 . 1) (undo-tree-id350 . 1) (undo-tree-id351 . 1) (undo-tree-id352 . 1) (undo-tree-id353 . 1) (undo-tree-id354 . 1) (undo-tree-id355 . 1) (undo-tree-id356 . 1) (undo-tree-id357 . 1) (undo-tree-id358 . 1) (undo-tree-id359 . 1) (undo-tree-id360 . 1) (undo-tree-id361 . 1) (undo-tree-id362 . 1) (undo-tree-id363 . 1) (undo-tree-id364 . 1) (undo-tree-id365 . 1) (undo-tree-id366 . 1) (undo-tree-id367 . 1) (undo-tree-id368 . 1) (undo-tree-id369 . 1) (undo-tree-id370 . 1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -243) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 244) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . 1) (undo-tree-id407 . 1) (undo-tree-id408 . 1) (undo-tree-id409 . 1) (undo-tree-id410 . 1) (undo-tree-id411 . 1) (undo-tree-id412 . 1) (undo-tree-id413 . 1) (undo-tree-id414 . 1) (undo-tree-id415 . 1) (undo-tree-id416 . 1) (undo-tree-id417 . 1) (undo-tree-id418 . 1) (undo-tree-id419 . 1) (undo-tree-id420 . 1) (undo-tree-id421 . 1) (undo-tree-id422 . 1) (undo-tree-id423 . 1) (undo-tree-id424 . 1) (undo-tree-id425 . 1) (undo-tree-id426 . 1) (undo-tree-id427 . 1) (undo-tree-id428 . 1) (undo-tree-id429 . 1) (undo-tree-id430 . 1) (undo-tree-id431 . 1) (undo-tree-id432 . 1) (undo-tree-id433 . 1) (undo-tree-id434 . 1) (undo-tree-id435 . 1) (undo-tree-id436 . 1) (undo-tree-id437 . 1) (undo-tree-id438 . 1) (undo-tree-id439 . 1) (undo-tree-id440 . 1) (undo-tree-id441 . 1) (undo-tree-id442 . 1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -244) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("e" 0 1 (fontified t)) . -245) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("q" 0 1 (fontified t)) . -246) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("?" 0 1 (fontified t)) . -247) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 248) nil (25292 290 681511 0) 0 nil])
([nil nil ((#("(lambda (x) (+ x 4))" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-4-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 20 (fontified t face (rainbow-delimiters-depth-3-face))) . 169) (undo-tree-id653 . -20) (t 25279 9192 0 0)) ((169 . 189)) (25287 2380 199593 0) 0 nil] [nil nil ((nil rear-nonsticky nil 188 . 189) (nil fontified nil 188 . 189) (nil fontified nil 170 . 188) (nil fontified nil 169 . 170) (169 . 189) (t 25279 9192 0 0)) ((#("(new-rand 'generate)" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 19 (fontified nil) 19 20 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-3-face))) . 169) (undo-tree-id647 . -20) (undo-tree-id648 . 20) (undo-tree-id649 . -20) (nil rear-nonsticky t 188 . 189)) (25279 9236 955160 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 242) (undo-tree-id1147 . -1) (undo-tree-id1148 . 1) (undo-tree-id1149 . 1) (undo-tree-id1150 . 1) (undo-tree-id1151 . 1) (undo-tree-id1152 . 1) (undo-tree-id1153 . 1) (undo-tree-id1154 . 1) (undo-tree-id1155 . 1) (undo-tree-id1156 . 1) (undo-tree-id1157 . 1) (undo-tree-id1158 . 1) (undo-tree-id1159 . 1) (undo-tree-id1160 . 1) (undo-tree-id1161 . 1) (undo-tree-id1162 . 1) (undo-tree-id1163 . 1) (undo-tree-id1164 . 1) (undo-tree-id1165 . 1) (undo-tree-id1166 . 1) (undo-tree-id1167 . 1) (undo-tree-id1168 . 1) (undo-tree-id1169 . 1) (undo-tree-id1170 . 1) (undo-tree-id1171 . 1) (undo-tree-id1172 . 1) (undo-tree-id1173 . 1) (undo-tree-id1174 . 1) (undo-tree-id1175 . 1) (undo-tree-id1176 . 1) (undo-tree-id1177 . 1) (undo-tree-id1178 . 1) (undo-tree-id1179 . 1) (undo-tree-id1180 . 1) (undo-tree-id1181 . 1) (undo-tree-id1182 . 1) (undo-tree-id1183 . 1) (undo-tree-id1184 . 1) (undo-tree-id1185 . 1) (undo-tree-id1186 . 1) (undo-tree-id1187 . 1) (undo-tree-id1188 . 1) (undo-tree-id1189 . 1) (undo-tree-id1190 . 1) (undo-tree-id1191 . 1) (undo-tree-id1192 . 1) (undo-tree-id1193 . 1) (undo-tree-id1194 . 1) (undo-tree-id1195 . 1) (undo-tree-id1196 . 1) (undo-tree-id1197 . 1) (undo-tree-id1198 . 1) (undo-tree-id1199 . 1) (undo-tree-id1200 . 1) (undo-tree-id1201 . 1) (undo-tree-id1202 . 1) (undo-tree-id1203 . 1) (undo-tree-id1204 . 1) (undo-tree-id1205 . -1)) nil (25292 301 151999 0) 0 nil] [nil nil ((#("generate) (print \"GENERATE\"))
	   " 0 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-4-face)) 11 17 (fontified t) 17 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face (rainbow-delimiters-depth-4-face)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t) 30 34 (fontified t)) . 208) (undo-tree-id250 . -34) (undo-tree-id251 . -30) (undo-tree-id252 . 8) (undo-tree-id253 . 9) (undo-tree-id254 . -26) (undo-tree-id255 . 8) (undo-tree-id256 . -34) (undo-tree-id257 . -34) (undo-tree-id258 . -34) (undo-tree-id259 . -34) (undo-tree-id260 . -34) (undo-tree-id261 . -34) (undo-tree-id262 . -34) (undo-tree-id263 . -34) (undo-tree-id264 . -34) (undo-tree-id265 . -34) (undo-tree-id266 . -34) (undo-tree-id267 . -34) (undo-tree-id268 . -34) (undo-tree-id269 . -34) (undo-tree-id270 . -34) (undo-tree-id271 . -34) (undo-tree-id272 . -34) (undo-tree-id273 . -34) (undo-tree-id274 . -34) (undo-tree-id275 . -34) (undo-tree-id276 . -34) (undo-tree-id277 . -34) (undo-tree-id278 . -34) (undo-tree-id279 . -34) (undo-tree-id280 . -34) (undo-tree-id281 . -34) (undo-tree-id282 . -34) (undo-tree-id283 . -34) (undo-tree-id284 . -34) (undo-tree-id285 . -34) (undo-tree-id286 . -34) 242) ((208 . 242)) (25292 290 680839 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 205 . 206) (nil fontified nil 205 . 206) (nil fontified nil 204 . 205) (nil fontified nil 199 . 204) (nil fontified nil 198 . 199) (nil fontified nil 197 . 198) (nil fontified nil 196 . 197) (nil fontified nil 195 . 196) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 187 . 193) (nil fontified nil 186 . 187) (186 . 206)) ((#("(lambda (x) (+ x 4))" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-4-face) fontified nil) 9 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-4-face) fontified nil) 11 12 (fontified nil) 12 13 (face (rainbow-delimiters-depth-4-face) fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil) 19 20 (rear-nonsticky nil face (rainbow-delimiters-depth-3-face) fontified nil)) . 186) (undo-tree-id2190 . -13) (undo-tree-id2191 . 20) (undo-tree-id2192 . 20) (nil rear-nonsticky nil 205 . 206)) (25287 2380 165588 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -239) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#(" " 0 1 (fontified t)) . -240) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#(" " 0 1 (fontified t)) . -241) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) 242) nil (25292 301 582144 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -206) (#("4" 0 1 (fontified t)) . -207) 208) ((206 . 208)) (25287 2380 135966 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -240) (undo-tree-id1237 . -1) (#(" " 0 1 (fontified t)) . -241) (undo-tree-id1238 . -1) (#(" " 0 1 (fontified t)) . -242) (undo-tree-id1239 . -1) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id1240 . -1) 244) nil (25292 316 305066 0) 0 nil] [nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -273) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -274) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -275) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -276) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -277) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("K" 0 1 (fontified t face font-lock-string-face)) . -278) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -279) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -280) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -281) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -282) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -283) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("U" 0 1 (fontified t face font-lock-string-face)) . -284) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -285) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (#("U" 0 1 (fontified t face font-lock-string-face)) . -286) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("L" 0 1 (fontified t face font-lock-string-face)) . -287) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -288) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("T" 0 1 (fontified t face font-lock-string-face)) . -289) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -290) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -291) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#(" " 0 1 (fontified t)) . -293) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("m" 0 1 (fontified t)) . -294) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) 295) ((293 . 295) (273 . 292)) (25292 301 152312 0) 0 nil])
([nil nil ((186 . 187)) ((#(" " 0 1 (fontified t)) . 186)) (25287 2380 100151 0) 0 nil] [nil nil ((186 . 187)) ((#(" " 0 1 (fontified t)) . 186)) (25279 9262 675171 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -243) (undo-tree-id1232 . -1) (#(" " 0 1 (fontified t)) . -244) (undo-tree-id1233 . -1) (#(" " 0 1 (fontified t)) . -245) (undo-tree-id1234 . -1) (#(" " 0 1 (fontified nil)) . -246) (undo-tree-id1235 . -1) (#("	" 0 1 (fontified nil)) . 247) (undo-tree-id1236 . -1) (239 . 247) 240) nil (25292 316 305060 0) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face font-lock-string-face)) . -268) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -269) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -270) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -271) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -272) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) 273) ((268 . 273)) (25292 301 151683 0) 0 nil])
([nil nil ((169 . 171)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 169) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . 1) (undo-tree-id2189 . -1)) (25287 2380 67748 0) 0 nil])
nil
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -290) (undo-tree-id1231 . -1) 291) nil (25292 316 305053 0) 0 nil])
nil
([nil nil ((170 . 174)) ((#("rand" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 170)) (25287 2380 34211 0) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-string-face)) . -275) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -276) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#("K" 0 1 (fontified t face font-lock-string-face)) . -277) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -278) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -279) (undo-tree-id1220 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -280) (undo-tree-id1221 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -281) (undo-tree-id1222 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -282) (undo-tree-id1223 . -1) (#("U" 0 1 (fontified t face font-lock-string-face)) . -283) (undo-tree-id1224 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -284) (undo-tree-id1225 . -1) (#("U" 0 1 (fontified t face font-lock-string-face)) . -285) (undo-tree-id1226 . -1) (#("L" 0 1 (fontified t face font-lock-string-face)) . -286) (undo-tree-id1227 . -1) (#("A" 0 1 (fontified t face font-lock-string-face)) . -287) (undo-tree-id1228 . -1) (#("T" 0 1 (fontified t face font-lock-string-face)) . -288) (undo-tree-id1229 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -289) (undo-tree-id1230 . -1) 290) nil (25292 316 305046 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 419) (t 25279 9277 0 0)) ((419 . 420)) (25287 2380 613 0) 0 nil])
([nil nil ((275 . 281)) nil (25292 316 305010 0) 0 nil])
([nil nil ((419 . 420)) ((#("k" 0 1 (fontified t)) . 419) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1)) (25287 2379 968064 0) 0 nil])
([nil nil ((281 . 298) (t 25292 316 0 0)) nil (25292 329 333113 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -419) 420) ((419 . 420)) (25287 2379 935321 0) 0 nil])
([nil nil ((306 . 307) (t 25292 329 0 0)) nil (25292 422 748847 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 388)) ((388 . 389)) (25287 2379 901687 0) 0 nil])
([nil nil ((307 . 308)) nil (25292 422 748846 0) 0 nil])
([nil nil ((#("enerate" 0 7 (fontified t)) . 388)) ((388 . 395)) (25287 2379 868417 0) 0 nil])
([nil nil ((308 . 310)) nil (25292 422 748846 0) 0 nil])
([nil nil ((388 . 390)) ((#("re" 0 2 (fontified t)) . 388) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2)) (25287 2379 835669 0) 0 nil])
([nil nil ((309 . 320)) nil (25292 422 748845 0) 0 nil])
([nil nil ((390 . 393)) ((#("set" 0 3 (fontified t)) . 390)) (25287 2379 818912 0) 0 nil])
([nil nil ((316 . 322) (#("rand" 0 4 (fontified t face font-lock-function-name-face)) . -316) (undo-tree-id1243 . -4) 320) nil (25292 422 748844 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -410) (undo-tree-id659 . -1) (undo-tree-id661 . -1) (undo-tree-id663 . -1) (#("e" 0 1 (fontified t)) . -411) (undo-tree-id665 . -1) (undo-tree-id667 . -1) (#("s" 0 1 (fontified t)) . -412) (undo-tree-id670 . -1) (undo-tree-id672 . -1) (#("e" 0 1 (fontified t)) . -413) (undo-tree-id674 . -1) (#("t" 0 1 (fontified t)) . -414) (undo-tree-id677 . -1) 415) ((410 . 415)) (25287 2379 769963 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-function-name-face)) . -320) (undo-tree-id1241 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -321) (undo-tree-id1242 . -1) 322) nil (25292 422 748841 0) 0 nil])
([nil nil ((410 . 412)) ((#("gn" 0 1 (fontified t) 1 2 (fontified t)) . 410) (undo-tree-id2174 . -2) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . 1) (undo-tree-id2181 . -2)) (25287 2379 736556 0) 0 nil])
([nil nil ((320 . 323)) nil (25292 422 748830 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -411) 412) ((411 . 412)) (25287 2379 705036 0) 0 nil] [nil nil ((#("n" 0 1 (fontified t)) . -411) (undo-tree-id656 . 1) 412) ((411 . 412)) (25284 27169 53153 0) 0 nil])
([nil nil ((nil fontified nil 499 . 500) (nil fontified nil 498 . 499) (nil fontified nil 497 . 498) (nil fontified nil 496 . 497) (nil fontified nil 495 . 496) (nil fontified nil 494 . 495) (nil fontified nil 493 . 494) (nil fontified nil 469 . 493) (nil fontified nil 468 . 469) (nil fontified nil 467 . 468) (nil fontified nil 466 . 467) (nil fontified nil 465 . 466) (nil fontified nil 464 . 465) (nil fontified nil 463 . 464) (nil fontified nil 462 . 463) (nil fontified nil 451 . 462) (nil fontified nil 445 . 451) (nil fontified nil 444 . 445) (nil fontified nil 443 . 444) (nil fontified nil 439 . 443) (nil fontified nil 438 . 439) (nil fontified nil 434 . 438) (nil fontified nil 433 . 434) (nil fontified nil 432 . 433) (nil fontified nil 431 . 432) (nil fontified nil 430 . 431) (nil fontified nil 429 . 430) (nil fontified nil 420 . 429) (nil fontified nil 414 . 420) (nil fontified nil 413 . 414) (nil fontified nil 412 . 413) (nil fontified nil 411 . 412) (nil fontified nil 403 . 411) (nil fontified nil 396 . 403) (nil fontified nil 395 . 396) (nil fontified nil 394 . 395) (nil fontified nil 389 . 394) (nil fontified nil 388 . 389) (nil fontified nil 387 . 388) (nil fontified nil 386 . 387) (nil fontified nil 385 . 386) (nil fontified nil 379 . 385) (nil fontified nil 373 . 379) (nil fontified nil 372 . 373) (nil fontified nil 371 . 372) (nil fontified nil 370 . 371) (nil fontified nil 358 . 370) (nil fontified nil 357 . 358) (nil fontified nil 356 . 357) (nil fontified nil 355 . 356) (nil fontified nil 351 . 355) (nil fontified nil 350 . 351) (nil fontified nil 344 . 350) (nil fontified nil 343 . 344) (nil fontified nil 342 . 343) (nil fontified nil 340 . 342) (nil fontified nil 332 . 340) (nil fontified nil 331 . 332) (nil fontified nil 330 . 331) (nil fontified nil 324 . 330) (nil fontified nil 323 . 324) (323 . 500)) nil (25292 426 384024 0) 0 nil])
([nil nil ((411 . 416)) ((#("emera" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 411) (undo-tree-id2168 . -5) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . 4) (undo-tree-id2173 . -5)) (25287 2379 670910 0) 0 nil])
([nil nil ((411 . 418)) ((#("enerate" 0 7 (fontified t)) . 411)) (25284 27168 889516 0) 0 nil])
([nil nil ((500 . 503) (t 25292 422 0 0)) nil (25292 438 839807 0) 0 nil] [nil nil ((432 . 438) (t 25292 422 0 0)) ((#("
	    " 0 6 (fontified t)) . 432) (undo-tree-id1244 . -6) (undo-tree-id1245 . -1) (undo-tree-id1246 . 6) (undo-tree-id1247 . -6)) (25292 426 383459 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -412) (#("e" 0 1 (fontified t)) . -413) (#("r" 0 1 (fontified t)) . -414) (#("a" 0 1 (fontified t)) . -415) 416) ((412 . 416)) (25287 2379 638465 0) 0 nil])
([nil nil ((132 . 133) (77 . 82) (126 . 127) (t 25279 10586 0 0)) ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 126) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("					" 0 5 (fontified t)) . 77) (undo-tree-id20 . -5) (#("
" 0 1 (fontified t)) . 132) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1)) (25284 27168 589431 0) 0 nil])
([nil nil ((503 . 507)) nil (25292 438 839806 0) 0 nil])
nil
([nil nil ((412 . 417)) ((#("neara" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 412) (undo-tree-id2164 . -5) (undo-tree-id2165 . -2) (undo-tree-id2166 . 3) (undo-tree-id2167 . -5)) (25287 2379 605294 0) 0 nil])
([nil nil ((#("

" 0 1 (face font-lock-comment-face fontified t) 1 2 (fontified t)) . 131) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 133) ((131 . 133)) (25284 27168 589184 0) 0 nil] [nil nil ((nil rear-nonsticky nil 217 . 218) (nil fontified nil 188 . 218) (nil fontified nil 184 . 188) (nil fontified nil 173 . 184) (nil fontified nil 167 . 173) (nil fontified nil 152 . 167) (nil fontified nil 149 . 152) (nil fontified nil 145 . 149) (nil fontified nil 141 . 145) (nil fontified nil 140 . 141) (nil fontified nil 134 . 140) (nil fontified nil 133 . 134) (133 . 218)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-4-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-5-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 75 (fontified nil) 75 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-2-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 133) (nil fontified t 145 . 146) (nil fontified t 161 . 162) (nil fontified t 160 . 161) (nil fontified t 159 . 160) (nil fontified t 155 . 159) (nil fontified t 154 . 155) (nil fontified t 153 . 154) (nil fontified t 152 . 153) (nil fontified t 176 . 177) (nil fontified t 175 . 176) (nil fontified t 174 . 175) (nil fontified t 173 . 174) (nil fontified t 207 . 208) (nil fontified t 206 . 207) (nil fontified t 205 . 206) (nil fontified t 192 . 205) (nil fontified t 191 . 192) (nil fontified t 188 . 191) (nil rear-nonsticky t 217 . 218) (t 25284 27149 0 0)) (25284 27162 834309 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -502) (undo-tree-id1248 . -1) (#("r" 0 1 (fontified t)) . -503) (undo-tree-id1249 . -1) (#("a" 0 1 (fontified t)) . -504) (undo-tree-id1250 . -1) (#("n" 0 1 (fontified t)) . -505) (undo-tree-id1251 . -1) (#("d" 0 1 (fontified t)) . -506) (undo-tree-id1252 . -1) 507) nil (25292 438 839803 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -414) (#("r" 0 1 (fontified t)) . -415) (#("a" 0 1 (fontified t)) . -416) 417) ((414 . 417)) (25287 2379 572620 0) 0 nil])
nil
([nil nil ((#("
					" 0 1 (face font-lock-comment-face fontified t) 1 6 (fontified t)) . 76) (undo-tree-id0 . -6) (undo-tree-id1 . -1) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) 82 (t 25284 27149 0 0)) ((76 . 82)) (25284 27162 661597 0) 0 nil])
([nil nil ((502 . 511)) nil (25292 438 839787 0) 0 nil])
([nil nil ((414 . 418)) ((#("rate" 0 4 (fontified t)) . 414)) (25287 2379 539246 0) 0 nil])
([nil nil ((82 . 87) (39 . 44) (76 . 77)) ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 76) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . 1) (undo-tree-id8 . -1) (#("					" 0 5 (fontified t)) . 39) (#("					" 0 5 (fontified t)) . 82) (undo-tree-id9 . -5) (undo-tree-id10 . -5)) (25284 27162 661461 0) 0 nil])
([nil nil ((306 . 308) (t 25292 438 0 0)) nil (25292 513 569276 0) 0 nil])
([nil nil ((127 . 128)) ((#("
" 0 1 (fontified t)) . 127) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1)) (25287 2379 506420 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 408 . 409) (nil fontified nil 408 . 409) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 404 . 406) (nil fontified nil 403 . 404) (nil fontified nil 401 . 403) (nil fontified nil 400 . 401) (nil fontified nil 395 . 400) (nil fontified nil 394 . 395) (nil fontified nil 392 . 394) (nil fontified nil 391 . 392) (nil fontified nil 384 . 391) (nil fontified nil 383 . 384) (nil fontified nil 378 . 383) (nil fontified nil 377 . 378) (nil fontified nil 376 . 377) (nil fontified nil 375 . 376) (nil fontified nil 374 . 375) (nil fontified nil 365 . 374) (nil fontified nil 364 . 365) (nil fontified nil 360 . 364) (nil fontified nil 359 . 360) (nil fontified nil 357 . 359) (nil fontified nil 356 . 357) (nil fontified nil 354 . 356) (nil fontified nil 353 . 354) (nil fontified nil 349 . 353) (nil fontified nil 348 . 349) (nil fontified nil 346 . 348) (nil fontified nil 345 . 346) (nil fontified nil 341 . 345) (nil fontified nil 340 . 341) (nil fontified nil 339 . 340) (nil fontified nil 338 . 339) (nil fontified nil 335 . 338) (nil fontified nil 334 . 335) (nil fontified nil 331 . 334) (nil fontified nil 330 . 331) (nil fontified nil 328 . 330) (nil fontified nil 317 . 328) (nil fontified nil 316 . 317) (nil fontified nil 315 . 316) (nil fontified nil 309 . 315) (nil fontified nil 308 . 309) (308 . 409)) nil (25292 513 569269 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 212 . 213) (nil fontified nil 183 . 213) (nil fontified nil 179 . 183) (nil fontified nil 168 . 179) (nil fontified nil 162 . 168) (nil fontified nil 147 . 162) (nil fontified nil 144 . 147) (nil fontified nil 140 . 144) (nil fontified nil 136 . 140) (nil fontified nil 135 . 136) (nil fontified nil 129 . 135) (nil fontified nil 128 . 129) (128 . 213)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-4-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-5-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 75 (fontified nil) 75 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-2-face) fontified nil) 84 85 (rear-nonsticky nil face (rainbow-delimiters-depth-1-face) fontified nil)) . 128) (undo-tree-id2103 . -28) (undo-tree-id2104 . -15) (undo-tree-id2105 . -15) (undo-tree-id2106 . -15) (undo-tree-id2107 . -15) (undo-tree-id2108 . -28) (undo-tree-id2109 . -28) (undo-tree-id2110 . 56) (undo-tree-id2111 . -28) (undo-tree-id2112 . 57) (undo-tree-id2113 . 57) (undo-tree-id2114 . -28) (undo-tree-id2115 . 57) (undo-tree-id2116 . 57) (undo-tree-id2117 . -28) (undo-tree-id2118 . 57) (undo-tree-id2119 . 57) (undo-tree-id2120 . -28) (undo-tree-id2121 . 57) (undo-tree-id2122 . 57) (undo-tree-id2123 . -28) (undo-tree-id2124 . 57) (undo-tree-id2125 . 57) (undo-tree-id2126 . -28) (undo-tree-id2127 . 57) (undo-tree-id2128 . 57) (undo-tree-id2129 . -28) (undo-tree-id2130 . 57) (undo-tree-id2131 . 57) (undo-tree-id2132 . -28) (undo-tree-id2133 . 57) (undo-tree-id2134 . 57) (undo-tree-id2135 . -28) (undo-tree-id2136 . 57) (undo-tree-id2137 . 57) (undo-tree-id2138 . -28) (undo-tree-id2139 . 57) (undo-tree-id2140 . 57) (undo-tree-id2141 . -28) (undo-tree-id2142 . 57) (nil fontified t 140 . 141) (nil fontified t 156 . 157) (nil fontified t 155 . 156) (nil fontified t 154 . 155) (nil fontified t 150 . 154) (nil fontified t 149 . 150) (nil fontified t 148 . 149) (nil fontified t 147 . 148) (nil fontified t 171 . 172) (nil fontified t 170 . 171) (nil fontified t 169 . 170) (nil fontified t 168 . 169) (nil fontified t 202 . 203) (nil fontified t 201 . 202) (nil fontified t 200 . 201) (nil fontified t 187 . 200) (nil fontified t 186 . 187) (nil fontified t 183 . 186) (nil rear-nonsticky nil 212 . 213)) (25287 2379 472626 0) 0 nil])
([nil nil ((#("(require \"Ex3_5.rkt\")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 20 (fontified t face font-lock-string-face) 20 21 (fontified t face (rainbow-delimiters-depth-1-face))) . 15) (undo-tree-id1256 . -21) (undo-tree-id1257 . -21) (t 25292 513 0 0)) nil (25292 521 640392 0) 0 nil])
([nil nil ((214 . 216)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 214) (undo-tree-id1919 . -1) (undo-tree-id1920 . 1) (undo-tree-id1921 . 1) (undo-tree-id1922 . 1) (undo-tree-id1923 . 1) (undo-tree-id1924 . 2) (undo-tree-id1925 . 2) (undo-tree-id1926 . -1) (undo-tree-id1927 . -2) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . 1) (undo-tree-id1932 . 1) (undo-tree-id1933 . -1) (undo-tree-id1934 . 1) (undo-tree-id1935 . 1) (undo-tree-id1936 . -1) (undo-tree-id1937 . 1) (undo-tree-id1938 . 1) (undo-tree-id1939 . -1) (undo-tree-id1940 . 1) (undo-tree-id1941 . 1) (undo-tree-id1942 . -1) (undo-tree-id1943 . 1) (undo-tree-id1944 . 1) (undo-tree-id1945 . -1) (undo-tree-id1946 . 1) (undo-tree-id1947 . 1) (undo-tree-id1948 . -1) (undo-tree-id1949 . 1) (undo-tree-id1950 . 1) (undo-tree-id1951 . -1) (undo-tree-id1952 . 1) (undo-tree-id1953 . 1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . 1) (undo-tree-id1958 . 1) (undo-tree-id1959 . -1) (undo-tree-id1960 . 1) (undo-tree-id1961 . 1) (undo-tree-id1962 . -1) (undo-tree-id1963 . 1) (undo-tree-id1964 . 1) (undo-tree-id1965 . -1) (undo-tree-id1966 . 1) (undo-tree-id1967 . 1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . 1) (undo-tree-id1972 . 1) (undo-tree-id1973 . -1) (undo-tree-id1974 . 1) (undo-tree-id1975 . 1) (undo-tree-id1976 . -1) (undo-tree-id1977 . 1) (undo-tree-id1978 . 1) (undo-tree-id1979 . -1) (undo-tree-id1980 . 1) (undo-tree-id1981 . 1) (undo-tree-id1982 . -1) (undo-tree-id1983 . 1) (undo-tree-id1984 . 1) (undo-tree-id1985 . -1) (undo-tree-id1986 . 1) (undo-tree-id1987 . 1) (undo-tree-id1988 . -1) (undo-tree-id1989 . 1) (undo-tree-id1990 . 1) (undo-tree-id1991 . -1) (undo-tree-id1992 . 1) (undo-tree-id1993 . 1) (undo-tree-id1994 . -1) (undo-tree-id1995 . 1) (undo-tree-id1996 . 1) (undo-tree-id1997 . -1) (undo-tree-id1998 . 1) (undo-tree-id1999 . 1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . 1) (undo-tree-id2004 . 1) (undo-tree-id2005 . -1) (undo-tree-id2006 . 1) (undo-tree-id2007 . 1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . 1) (undo-tree-id2012 . 1) (undo-tree-id2013 . -1) (undo-tree-id2014 . 1) (undo-tree-id2015 . 1) (undo-tree-id2016 . -1) (undo-tree-id2017 . 1) (undo-tree-id2018 . 1) (undo-tree-id2019 . -1) (undo-tree-id2020 . 1) (undo-tree-id2021 . 1) (undo-tree-id2022 . -1) (undo-tree-id2023 . 1) (undo-tree-id2024 . 1) (undo-tree-id2025 . -1) (undo-tree-id2026 . 1) (undo-tree-id2027 . 1) (undo-tree-id2028 . -1) (undo-tree-id2029 . 1) (undo-tree-id2030 . 1) (undo-tree-id2031 . -1) (undo-tree-id2032 . 1) (undo-tree-id2033 . 1) (undo-tree-id2034 . -1) (undo-tree-id2035 . 1) (undo-tree-id2036 . 1) (undo-tree-id2037 . -1) (undo-tree-id2038 . 1) (undo-tree-id2039 . 1) (undo-tree-id2040 . -1) (undo-tree-id2041 . 1) (undo-tree-id2042 . 1) (undo-tree-id2043 . -1) (undo-tree-id2044 . 1) (undo-tree-id2045 . 1) (undo-tree-id2046 . -1) (undo-tree-id2047 . 1) (undo-tree-id2048 . 1) (undo-tree-id2049 . -1) (undo-tree-id2050 . 1) (undo-tree-id2051 . 1) (undo-tree-id2052 . -1) (undo-tree-id2053 . 1) (undo-tree-id2054 . 1) (undo-tree-id2055 . -1) (undo-tree-id2056 . 1) (undo-tree-id2057 . 1) (undo-tree-id2058 . -1) (undo-tree-id2059 . 1) (undo-tree-id2060 . 1) (undo-tree-id2061 . -1) (undo-tree-id2062 . 1) (undo-tree-id2063 . 1) (undo-tree-id2064 . -1) (undo-tree-id2065 . 1) (undo-tree-id2066 . 1) (undo-tree-id2067 . -1) (undo-tree-id2068 . 1) (undo-tree-id2069 . 1) (undo-tree-id2070 . -1) (undo-tree-id2071 . 1) (undo-tree-id2072 . 1) (undo-tree-id2073 . -1) (undo-tree-id2074 . 1) (undo-tree-id2075 . 1) (undo-tree-id2076 . -1) (undo-tree-id2077 . 1) (undo-tree-id2078 . 1) (undo-tree-id2079 . -1) (undo-tree-id2080 . 1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . 1) (undo-tree-id2084 . -1) (undo-tree-id2085 . 1) (undo-tree-id2086 . 1) (undo-tree-id2087 . -1) (undo-tree-id2088 . 1) (undo-tree-id2089 . 1) (undo-tree-id2090 . -1) (undo-tree-id2091 . 1) (undo-tree-id2092 . 1) (undo-tree-id2093 . -1) (undo-tree-id2094 . 1) (undo-tree-id2095 . 1) (undo-tree-id2096 . -1) (undo-tree-id2097 . 1) (undo-tree-id2098 . 1) (undo-tree-id2099 . -1) (undo-tree-id2100 . 1) (undo-tree-id2101 . 1) (undo-tree-id2102 . -1)) (25287 2379 439723 0) 0 nil] [nil nil ((#("r" 0 1 (face font-lock-function-name-face fontified t)) . -136) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -137) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -138) (undo-tree-id37 . -1) (undo-tree-id38 . 1) (undo-tree-id39 . 1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -139) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 140) ((136 . 140)) (25284 27390 184027 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15) (undo-tree-id1255 . -1)) nil (25292 521 640389 0) 0 nil])
([nil nil ((nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 297 . 298) (nil fontified nil 289 . 297) (nil fontified nil 288 . 289) (nil fontified nil 287 . 288) (nil fontified nil 274 . 287) (nil fontified nil 273 . 274) (nil fontified nil 270 . 273) (nil fontified nil 266 . 270) (nil fontified nil 265 . 266) (nil fontified nil 258 . 265) (nil fontified nil 257 . 258) (nil fontified nil 256 . 257) (nil fontified nil 255 . 256) (nil fontified nil 249 . 255) (nil fontified nil 248 . 249) (nil fontified nil 243 . 248) (nil fontified nil 242 . 243) (nil fontified nil 241 . 242) (nil fontified nil 237 . 241) (nil fontified nil 236 . 237) (nil fontified nil 235 . 236) (nil fontified nil 234 . 235) (nil fontified nil 231 . 234) (nil fontified nil 230 . 231) (nil fontified nil 228 . 230) (nil fontified nil 227 . 228) (nil fontified nil 226 . 227) (nil fontified nil 225 . 226) (nil fontified nil 224 . 225) (nil fontified nil 223 . 224) (nil fontified nil 222 . 223) (nil fontified nil 216 . 222) (nil fontified nil 215 . 216) (215 . 300)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-function-name-face fontified nil) 9 10 (face font-lock-function-name-face fontified nil) 10 11 (face font-lock-function-name-face fontified nil) 11 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil) 25 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (fontified nil) 29 32 (fontified nil) 32 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-4-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-5-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 75 (fontified nil) 75 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-2-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 215) (undo-tree-id1745 . -85) (undo-tree-id1746 . -13) (undo-tree-id1747 . -8) (undo-tree-id1748 . -33) (undo-tree-id1749 . -33) (undo-tree-id1750 . 56) (undo-tree-id1751 . 52) (undo-tree-id1752 . -29) (undo-tree-id1753 . 56) (undo-tree-id1754 . 56) (undo-tree-id1755 . -29) (undo-tree-id1756 . 56) (undo-tree-id1757 . 56) (undo-tree-id1758 . -29) (undo-tree-id1759 . 3) (undo-tree-id1760 . 56) (undo-tree-id1761 . -74) (undo-tree-id1762 . 10) (undo-tree-id1763 . 10) (undo-tree-id1764 . -74) (undo-tree-id1765 . 10) (undo-tree-id1766 . 11) (undo-tree-id1767 . -74) (undo-tree-id1768 . 11) (undo-tree-id1769 . 11) (undo-tree-id1770 . -74) (undo-tree-id1771 . 11) (undo-tree-id1772 . 11) (undo-tree-id1773 . -74) (undo-tree-id1774 . -29) (undo-tree-id1775 . -33) (undo-tree-id1776 . 52) (undo-tree-id1777 . 11) (undo-tree-id1778 . -33) (undo-tree-id1779 . 52) (undo-tree-id1780 . 52) (undo-tree-id1781 . -33) (undo-tree-id1782 . 52) (undo-tree-id1783 . 52) (undo-tree-id1784 . -33) (undo-tree-id1785 . 52) (undo-tree-id1786 . 52) (undo-tree-id1787 . -33) (undo-tree-id1788 . -13) (undo-tree-id1789 . -24) (undo-tree-id1790 . 59) (undo-tree-id1791 . 52) (undo-tree-id1792 . -24) (undo-tree-id1793 . 59) (undo-tree-id1794 . 59) (undo-tree-id1795 . -24) (undo-tree-id1796 . 62) (undo-tree-id1797 . 59) (undo-tree-id1798 . -22) (undo-tree-id1799 . 62) (undo-tree-id1800 . 63) (undo-tree-id1801 . -23) (undo-tree-id1802 . 11) (undo-tree-id1803 . 62) (undo-tree-id1804 . -74) (undo-tree-id1805 . 11) (undo-tree-id1806 . 11) (undo-tree-id1807 . -74) (undo-tree-id1808 . 11) (undo-tree-id1809 . 11) (undo-tree-id1810 . -74) (undo-tree-id1811 . 11) (undo-tree-id1812 . 11) (undo-tree-id1813 . -74) (undo-tree-id1814 . 11) (undo-tree-id1815 . 11) (undo-tree-id1816 . -74) (undo-tree-id1817 . 11) (undo-tree-id1818 . 11) (undo-tree-id1819 . -74) (undo-tree-id1820 . -29) (undo-tree-id1821 . -29) (undo-tree-id1822 . 56) (undo-tree-id1823 . 11) (undo-tree-id1824 . -29) (undo-tree-id1825 . 56) (undo-tree-id1826 . 56) (undo-tree-id1827 . -29) (undo-tree-id1828 . -29) (undo-tree-id1829 . -29) (undo-tree-id1830 . 56) (undo-tree-id1831 . 56) (undo-tree-id1832 . -29) (undo-tree-id1833 . 56) (undo-tree-id1834 . 56) (undo-tree-id1835 . -29) (undo-tree-id1836 . 56) (undo-tree-id1837 . 56) (undo-tree-id1838 . -29) (undo-tree-id1839 . 56) (undo-tree-id1840 . 56) (undo-tree-id1841 . -29) (undo-tree-id1842 . 56) (undo-tree-id1843 . 56) (undo-tree-id1844 . -29) (undo-tree-id1845 . 56) (undo-tree-id1846 . 56) (undo-tree-id1847 . -29) (undo-tree-id1848 . 56) (undo-tree-id1849 . 56) (undo-tree-id1850 . -29) (undo-tree-id1851 . 56) (undo-tree-id1852 . 56) (undo-tree-id1853 . -29) (undo-tree-id1854 . 56) (undo-tree-id1855 . 56) (undo-tree-id1856 . -29) (undo-tree-id1857 . 56) (undo-tree-id1858 . 56) (undo-tree-id1859 . -29) (undo-tree-id1860 . 56) (undo-tree-id1861 . 56) (undo-tree-id1862 . -29) (undo-tree-id1863 . 56) (undo-tree-id1864 . 56) (undo-tree-id1865 . -29) (undo-tree-id1866 . 56) (undo-tree-id1867 . 56) (undo-tree-id1868 . -29) (undo-tree-id1869 . 56) (undo-tree-id1870 . 56) (undo-tree-id1871 . -29) (undo-tree-id1872 . 56) (undo-tree-id1873 . 56) (undo-tree-id1874 . -29) (undo-tree-id1875 . 56) (undo-tree-id1876 . 56) (undo-tree-id1877 . -29) (undo-tree-id1878 . 56) (undo-tree-id1879 . 56) (undo-tree-id1880 . -29) (undo-tree-id1881 . 56) (undo-tree-id1882 . 56) (undo-tree-id1883 . -29) (undo-tree-id1884 . 56) (undo-tree-id1885 . 56) (undo-tree-id1886 . -29) (undo-tree-id1887 . 72) (undo-tree-id1888 . 56) (undo-tree-id1889 . -13) (undo-tree-id1890 . 72) (undo-tree-id1891 . 72) (undo-tree-id1892 . -13) (undo-tree-id1893 . 72) (undo-tree-id1894 . 72) (undo-tree-id1895 . -13) (undo-tree-id1896 . 72) (undo-tree-id1897 . 72) (undo-tree-id1898 . -13) (undo-tree-id1899 . 72) (undo-tree-id1900 . -13) (undo-tree-id1901 . -24) (undo-tree-id1902 . 59) (undo-tree-id1903 . -24) (undo-tree-id1904 . 59) (undo-tree-id1905 . 61) (undo-tree-id1906 . -26) (undo-tree-id1907 . 73) (undo-tree-id1908 . 59) (undo-tree-id1909 . -12) (undo-tree-id1910 . 77) (undo-tree-id1911 . 73) (undo-tree-id1912 . -8) (undo-tree-id1913 . 77) (undo-tree-id1914 . 77) (undo-tree-id1915 . -8) (undo-tree-id1916 . 77) (undo-tree-id1917 . 77) (undo-tree-id1918 . -8) (nil fontified t 227 . 228) (nil fontified t 243 . 244) (nil fontified t 258 . 259) (nil fontified t 289 . 290) (nil fontified t 299 . 300)) (25287 2379 405968 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 15) (undo-tree-id1254 . -1)) nil (25292 521 640387 0) 0 nil])
([nil nil ((223 . 226)) ((#("() " 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t)) . 223) (undo-tree-id1739 . -1) (undo-tree-id1740 . 2) (undo-tree-id1741 . -1) (undo-tree-id1742 . 2) (undo-tree-id1743 . 2) (undo-tree-id1744 . -1)) (25287 2379 372993 0) 0 nil] [nil nil ((223 . 224)) ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 223) (undo-tree-id52 . -1) (undo-tree-id53 . 1) (undo-tree-id54 . -1)) (25284 27559 31850 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15) (undo-tree-id1253 . -1)) nil (25292 521 640381 0) 0 nil])
([nil nil ((224 . 225)) ((#("r" 0 1 (face font-lock-function-name-face fontified t)) . 224) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1)) (25287 2379 339929 0) 0 nil])
nil
([nil nil ((395 . 398) (t 25292 521 0 0)) nil (25292 600 915058 0) 0 nil])
([nil nil ((225 . 238)) ((#("and-seed seed" 0 8 (face font-lock-function-name-face fontified t) 8 13 (fontified t)) . 225)) (25287 2379 308638 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 396) (undo-tree-id1292 . 1) (401 . 402) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -396) (undo-tree-id1293 . 1)) nil (25292 600 915056 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -239) (#("r" 0 1 (fontified t)) . -240) (undo-tree-id59 . 1) (#("a" 0 1 (fontified t)) . -241) (#("n" 0 1 (fontified t)) . -242) (#("d" 0 1 (fontified t)) . -243) 244) ((239 . 244)) (25287 2379 274967 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-function-name-face)) . -397) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . 1) (undo-tree-id1264 . 1) (undo-tree-id1265 . 1) (undo-tree-id1266 . 1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -398) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . 1) (undo-tree-id1277 . 1) (undo-tree-id1278 . 1) (undo-tree-id1279 . 1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -399) (undo-tree-id1283 . -1) (undo-tree-id1284 . 1) (undo-tree-id1285 . 1) (undo-tree-id1286 . -1) (undo-tree-id1287 . 1) (undo-tree-id1288 . 1) (undo-tree-id1289 . 1) (undo-tree-id1290 . 1) (undo-tree-id1291 . -1) 400) nil (25292 600 915048 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -251) (#("0" 0 1 (fontified t)) . -252) 253) ((251 . 253)) (25287 2379 241878 0) 0 nil])
([nil nil ((591 . 593) (t 25292 600 0 0)) nil (25292 615 157753 0) 0 nil])
([nil nil ((251 . 255)) ((#("seed" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 251) (undo-tree-id1735 . 4) (undo-tree-id1736 . -4)) (25287 2379 208398 0) 0 nil])
([nil nil ((593 . 595)) nil (25292 615 157751 0) 0 nil])
([nil nil ((608 . 610) (t 25284 28285 0 0)) ((#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 608) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -1) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . 1) (undo-tree-id1731 . -1) (undo-tree-id1732 . 1) (undo-tree-id1733 . 1) (undo-tree-id1734 . -1)) (25287 2379 176058 0) 0 nil] [nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 10 (face font-lock-function-name-face fontified t) 10 11 (face font-lock-function-name-face fontified t) 11 12 (face font-lock-function-name-face fontified t) 12 13 (fontified t) 13 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-4-face) fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-5-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-5-face) fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 128) (undo-tree-id78 . -85) (undo-tree-id79 . -13) (undo-tree-id81 . -85) (undo-tree-id83 . 85) (undo-tree-id85 . 85) (undo-tree-id87 . 85) (undo-tree-id89 . -85)) ((128 . 213)) (25284 28282 300258 0) 0 nil] [nil nil ((nil fontified nil 212 . 213) (nil fontified nil 211 . 212) (nil fontified nil 210 . 211) (nil fontified nil 202 . 210) (nil fontified nil 201 . 202) (nil fontified nil 200 . 201) (nil fontified nil 187 . 200) (nil fontified nil 186 . 187) (nil fontified nil 183 . 186) (nil fontified nil 179 . 183) (nil fontified nil 178 . 179) (nil fontified nil 171 . 178) (nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 168 . 169) (nil fontified nil 162 . 168) (nil fontified nil 161 . 162) (nil fontified nil 156 . 161) (nil fontified nil 155 . 156) (nil fontified nil 154 . 155) (nil fontified nil 150 . 154) (nil fontified nil 149 . 150) (nil fontified nil 148 . 149) (nil fontified nil 147 . 148) (nil fontified nil 144 . 147) (nil fontified nil 143 . 144) (nil fontified nil 141 . 143) (nil fontified nil 140 . 141) (nil fontified nil 139 . 140) (nil fontified nil 138 . 139) (nil fontified nil 137 . 138) (nil fontified nil 136 . 137) (nil fontified nil 135 . 136) (nil fontified nil 129 . 135) (nil fontified nil 128 . 129) (128 . 213)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-function-name-face fontified nil) 9 10 (face font-lock-function-name-face fontified nil) 10 11 (face font-lock-function-name-face fontified nil) 11 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-4-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-5-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 75 (fontified nil) 75 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-2-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky t)) . 128) (undo-tree-id64 . -75) (undo-tree-id65 . -85) (undo-tree-id66 . 85) (undo-tree-id67 . -85) (nil fontified t 140 . 141) (nil fontified t 156 . 157) (nil fontified t 171 . 172) (nil fontified t 202 . 203) (nil fontified t 212 . 213)) (25284 27611 858101 0) 0 nil])
([nil nil ((594 . 606)) nil (25292 615 157750 0) 0 nil])
([nil nil ((609 . 611)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 609) (undo-tree-id1721 . -1) (undo-tree-id1722 . 1) (undo-tree-id1723 . -1)) (25287 2379 143646 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 128) (undo-tree-id68 . -1) (undo-tree-id70 . 1) (undo-tree-id72 . 1) (undo-tree-id74 . 1) (undo-tree-id76 . 1)) ((128 . 129)) (25284 28281 974379 0) 0 nil])
nil
([nil nil ((606 . 608)) nil (25292 615 157748 0) 0 nil])
([nil nil ((610 . 622)) ((#("rand-seed 50" 0 12 (fontified t)) . 610)) (25287 2379 109956 0) 0 nil])
([nil nil ((522 . 524) (t 25284 27617 0 0)) ((#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -1) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) (undo-tree-id592 . -2) (undo-tree-id593 . -2) (undo-tree-id594 . 2) (undo-tree-id595 . 2) (undo-tree-id596 . 2) (undo-tree-id597 . 2) (undo-tree-id598 . 2) (undo-tree-id599 . 2) (undo-tree-id600 . 2) (undo-tree-id601 . 2) (undo-tree-id602 . 2) (undo-tree-id603 . 1) (undo-tree-id604 . 2) (undo-tree-id605 . -1) (undo-tree-id606 . 1) (undo-tree-id607 . 1) (undo-tree-id608 . -1) (undo-tree-id609 . 1) (undo-tree-id610 . 1) (undo-tree-id611 . -1)) (25284 28281 646980 0) 0 nil])
([nil nil ((607 . 608)) nil (25292 615 157742 0) 0 nil])
([nil nil ((624 . 625)) ((#("
" 0 1 (fontified t)) . 624) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1)) (25287 2379 77345 0) 0 nil] [nil nil ((624 . 625) 622) ((#("
" 0 1 (fontified t)) . 624) (undo-tree-id612 . -1) (t 25284 29013 0 0)) (25284 29013 679234 0) 0 nil])
([nil nil ((523 . 527)) ((#("rand" 0 4 (fontified t)) . 523) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4)) (25284 28281 277417 0) 0 nil])
([nil nil ((386 . 388) (t 25292 615 0 0)) nil (25292 1083 17178 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 640 . 641) (nil fontified nil 640 . 641) (nil fontified nil 639 . 640) (nil fontified nil 627 . 639) (nil fontified nil 626 . 627) (nil fontified nil 625 . 626) (625 . 641)) ((#("((rand-seed 50))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil) 15 16 (rear-nonsticky nil face (rainbow-delimiters-depth-1-face) fontified nil)) . 625) (undo-tree-id1711 . -16) (undo-tree-id1712 . -16) (undo-tree-id1713 . -16) (undo-tree-id1714 . -16) (nil rear-nonsticky nil 640 . 641)) (25287 2379 44053 0) 0 nil])
nil
([nil nil ((527 . 534)) ((#("-seed 5" 0 6 (fontified t) 6 7 (fontified t)) . 527) (undo-tree-id552 . -7) (undo-tree-id553 . -7)) (25284 28280 918219 0) 0 nil])
([nil nil ((387 . 389)) nil (25292 1083 17177 0) 0 nil])
([nil nil ((641 . 642)) ((#("
" 0 1 (fontified t)) . 641) (undo-tree-id1710 . -1)) (25287 2379 12183 0) 0 nil])
([nil nil ((535 . 536) 534) ((#("
" 0 1 (fontified t)) . 535) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . 1) (undo-tree-id533 . -1) (undo-tree-id534 . 1) (undo-tree-id535 . 1) (undo-tree-id536 . 1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1)) (25284 28280 675884 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 457 . 458) (nil fontified nil 457 . 458) (nil fontified nil 456 . 457) (nil fontified nil 455 . 456) (nil fontified nil 449 . 455) (nil fontified nil 448 . 449) (nil fontified nil 447 . 448) (nil fontified nil 446 . 447) (nil fontified nil 433 . 446) (nil fontified nil 432 . 433) (nil fontified nil 429 . 432) (nil fontified nil 425 . 429) (nil fontified nil 424 . 425) (nil fontified nil 418 . 424) (nil fontified nil 417 . 418) (nil fontified nil 416 . 417) (nil fontified nil 415 . 416) (nil fontified nil 414 . 415) (nil fontified nil 408 . 414) (nil fontified nil 407 . 408) (nil fontified nil 403 . 407) (nil fontified nil 402 . 403) (nil fontified nil 401 . 402) (nil fontified nil 400 . 401) (nil fontified nil 396 . 400) (nil fontified nil 395 . 396) (nil fontified nil 394 . 395) (nil fontified nil 393 . 394) (nil fontified nil 390 . 393) (nil fontified nil 389 . 390) (389 . 458)) nil (25292 1083 17174 0) 0 nil])
([nil nil ((156 . 161) (t 25284 29913 0 0)) ((#("
    " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 156) (undo-tree-id1696 . -1) (undo-tree-id1697 . -5) (undo-tree-id1698 . -1) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) (undo-tree-id1705 . -5) (undo-tree-id1706 . -5) (undo-tree-id1707 . -5) (undo-tree-id1708 . -5) (undo-tree-id1709 . -5)) (25287 2378 979025 0) 0 nil] [nil nil ((#("  " 0 2 (fontified nil)) . -305) (#("  " 0 2 (fontified t)) . -276) (#("  " 0 2 (fontified t)) . -261) (undo-tree-id647 . 2) (undo-tree-id649 . -1) (undo-tree-id651 . -2) (257 . 258) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -312) 243 (t 25284 29050 0 0)) ((312 . 313) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 257) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . 1) (undo-tree-id805 . 1) (undo-tree-id806 . 1) (undo-tree-id807 . -1) (261 . 263) (276 . 278) (305 . 307) (t 25284 29903 0 0)) (25284 29902 185122 0) 0 nil])
([nil nil ((522 . 525) (t 25284 27631 0 0)) ((#("() " 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (fontified t)) . 522) (undo-tree-id504 . -2) (undo-tree-id505 . 1) (undo-tree-id506 . -1) (undo-tree-id507 . 1) (undo-tree-id508 . 1) (undo-tree-id509 . 1) (undo-tree-id510 . 1) (undo-tree-id511 . -1) (undo-tree-id512 . 1) (undo-tree-id513 . 2) (undo-tree-id514 . -2)) (25284 28280 334012 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -396) (undo-tree-id1323 . -1) 397) nil (25292 1083 17167 0) 0 nil])
([nil nil ((161 . 163)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 161) (undo-tree-id1675 . -1) (undo-tree-id1676 . 2) (undo-tree-id1677 . 2) (undo-tree-id1678 . 1) (undo-tree-id1679 . 2) (undo-tree-id1680 . -1) (undo-tree-id1681 . 1) (undo-tree-id1682 . 1) (undo-tree-id1683 . -1) (undo-tree-id1684 . 1) (undo-tree-id1685 . 1) (undo-tree-id1686 . -1) (undo-tree-id1687 . 1) (undo-tree-id1688 . 1) (undo-tree-id1689 . -1) (undo-tree-id1690 . 1) (undo-tree-id1691 . 1) (undo-tree-id1692 . -1) (undo-tree-id1693 . 1) (undo-tree-id1694 . 1) (undo-tree-id1695 . -1)) (25287 2378 944779 0) 0 nil])
([nil nil ((270 . 274)) ((#("seed" 0 4 (fontified t)) . 270)) (25284 29901 663824 0) 0 nil] [nil nil ((#("(let ((x seed)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 242) (undo-tree-id736 . -16) (undo-tree-id738 . -8) (undo-tree-id740 . 9) (undo-tree-id742 . 10) (undo-tree-id744 . -6) (undo-tree-id746 . 10) (undo-tree-id748 . 12) (undo-tree-id750 . -4) (undo-tree-id752 . 12) (undo-tree-id754 . 14) (undo-tree-id756 . -2) (undo-tree-id758 . 14) (undo-tree-id760 . 14) (undo-tree-id762 . 15) (undo-tree-id764 . 15) (undo-tree-id766 . 15) (undo-tree-id768 . -1) (undo-tree-id770 . 15) (undo-tree-id772 . -16) (undo-tree-id773 . -1) (undo-tree-id775 . 15) (undo-tree-id776 . -16) (undo-tree-id778 . 15) (undo-tree-id780 . -1) (undo-tree-id782 . 15)) ((242 . 258)) (25284 29624 796192 0) 0 nil] [nil nil ((#("let ((x seed)))" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-4-face) fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t)) . 243) (undo-tree-id613 . -15) (undo-tree-id614 . 8) (undo-tree-id615 . -7) (undo-tree-id616 . 8) (undo-tree-id617 . 9) (undo-tree-id618 . -6) (undo-tree-id619 . 10) (undo-tree-id620 . 9) (undo-tree-id621 . -5) (undo-tree-id622 . 11) (undo-tree-id623 . 10) (undo-tree-id624 . -4) (undo-tree-id625 . 12) (undo-tree-id626 . 11) (undo-tree-id627 . -3) (undo-tree-id628 . 13) (undo-tree-id629 . 12) (undo-tree-id630 . -2) (undo-tree-id631 . 14) (undo-tree-id632 . 13) (undo-tree-id633 . -1) (undo-tree-id634 . 15) (undo-tree-id635 . 14) (undo-tree-id636 . 15) (undo-tree-id637 . 14) (undo-tree-id638 . -1) (undo-tree-id639 . 15) (undo-tree-id640 . 14) (undo-tree-id641 . 15) (undo-tree-id642 . 15) (undo-tree-id643 . 15) (undo-tree-id644 . -15) (undo-tree-id645 . 15)) ((243 . 258)) (25284 29456 108519 0) 0 nil])
([nil nil ((523 . 524) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -523)) ((523 . 524) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 523) (undo-tree-id500 . -1) (undo-tree-id501 . 1) (undo-tree-id502 . 1) (undo-tree-id503 . 1)) (25284 28280 14872 0) 0 nil])
([nil nil ((396 . 400)) nil (25292 1083 17165 0) 0 nil])
([nil nil ((162 . 166)) ((#("prit" 0 3 (fontified t) 3 4 (fontified t)) . 162) (undo-tree-id1668 . -4) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . 1) (undo-tree-id1674 . -4)) (25287 2378 911826 0) 0 nil])
([nil nil ((312 . 314) (281 . 283) (260 . 262) (310 . 311) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -257) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . 1) (undo-tree-id800 . 1) (undo-tree-id801 . 1) (t 25284 29855 0 0)) ((257 . 258) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 310) (#("  " 0 2 (fontified t)) . 260) (#("  " 0 2 (fontified t)) . 281) (#("  " 0 2 (fontified t)) . 312) (t 25284 29883 0 0)) (25284 29883 716193 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 242) (undo-tree-id699 . -1) (undo-tree-id701 . 1) (undo-tree-id703 . 1) (undo-tree-id705 . 1) (undo-tree-id707 . 1) (undo-tree-id709 . 1) (undo-tree-id711 . 1) (undo-tree-id713 . 1) (undo-tree-id715 . 1) (undo-tree-id717 . 1) (undo-tree-id719 . 1) (undo-tree-id721 . 1) (undo-tree-id723 . 1) (undo-tree-id725 . 1) (undo-tree-id727 . 1) (undo-tree-id729 . 1) (undo-tree-id731 . 1) (undo-tree-id733 . 1) (undo-tree-id735 . -1)) ((242 . 243)) (25284 29624 332639 0) 0 nil])
nil
([nil nil ((522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) 523) ((522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1)) (25284 28279 734940 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -401) (undo-tree-id1321 . -1) (#("0" 0 1 (fontified t)) . -402) (undo-tree-id1322 . -1) 403) nil (25292 1083 17164 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -165) 166) ((165 . 166)) (25287 2378 878528 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -242) (undo-tree-id652 . -1) (undo-tree-id654 . 1) (undo-tree-id656 . 1) (undo-tree-id658 . 1) (undo-tree-id660 . 1) (undo-tree-id662 . 1) (undo-tree-id664 . 1) (undo-tree-id666 . 1) (undo-tree-id668 . 1) (undo-tree-id670 . -1) (undo-tree-id672 . 1) (undo-tree-id674 . 1) (undo-tree-id676 . 1) (undo-tree-id678 . 1) (undo-tree-id680 . 1) (undo-tree-id682 . 1) (undo-tree-id684 . 1) (undo-tree-id686 . 1) (undo-tree-id688 . 1) (undo-tree-id690 . 1) (undo-tree-id692 . 1) (undo-tree-id694 . -1) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id695 . -1) (undo-tree-id697 . -1) 244) ((242 . 244)) (25284 29624 131507 0) 0 nil])
([nil nil ((522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id132 . -1) (undo-tree-id134 . -1) (undo-tree-id136 . -1) (undo-tree-id138 . -1) (undo-tree-id140 . -1) (undo-tree-id142 . -1) (undo-tree-id144 . -1) (undo-tree-id146 . -1) (522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (undo-tree-id169 . -1) 523) ((522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 522) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (522 . 523) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 522) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1)) (25284 28279 531739 0) 0 nil])
([nil nil ((401 . 402)) nil (25292 1083 17162 0) 0 nil])
([nil nil ((165 . 167)) ((#("nt" 0 2 (fontified t)) . 165) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2)) (25287 2378 845946 0) 0 nil])
([nil nil ((286 . 288)) ((#("  " 0 2 (fontified t)) . 286)) (25284 29623 937455 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 523) (undo-tree-id91 . 1) (undo-tree-id93 . 1) (undo-tree-id95 . 1) (undo-tree-id97 . 1) (undo-tree-id99 . 1) (undo-tree-id101 . 1) (undo-tree-id103 . 1) (undo-tree-id105 . 1) (537 . 538) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -523) (undo-tree-id107 . 1) (undo-tree-id109 . 1) (undo-tree-id111 . 1) (undo-tree-id113 . 1) (undo-tree-id115 . 1) (undo-tree-id117 . 1) (undo-tree-id119 . 1) (undo-tree-id121 . 1)) ((523 . 524) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 537) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (523 . 524)) (25284 28279 294079 0) 0 nil])
([nil nil ((409 . 410)) nil (25292 1083 17161 0) 0 nil])
([nil nil ((167 . 168)) ((#(" " 0 1 (fontified t)) . 167) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1)) (25287 2378 812712 0) 0 nil])
([nil nil ((237 . 238) (t 25284 29612 0 0)) ((#("n" 0 1 (fontified t)) . 237) (undo-tree-id793 . -1) (undo-tree-id794 . 1) (undo-tree-id795 . -1) (undo-tree-id796 . -1)) (25284 29623 708450 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 538 . 539) (nil fontified nil 538 . 539) (538 . 539) (t 25284 27726 0 0)) ((#("5" 0 1 (rear-nonsticky nil fontified nil)) . 538) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (nil rear-nonsticky t 538 . 539)) (25284 28279 100833 0) 0 nil] [nil nil ((#("5" 0 1 (fontified t)) . -534) 538 (t 25284 27726 0 0)) ((534 . 535)) (25284 27756 403988 0) 0 nil] [nil nil ((nil rear-nonsticky nil 607 . 608) (nil fontified nil 607 . 608) (nil fontified nil 606 . 607) (nil fontified nil 605 . 606) (nil fontified nil 604 . 605) (nil fontified nil 596 . 604) (nil fontified nil 595 . 596) (nil fontified nil 594 . 595) (nil fontified nil 581 . 594) (nil fontified nil 580 . 581) (nil fontified nil 577 . 580) (nil fontified nil 573 . 577) (nil fontified nil 572 . 573) (nil fontified nil 565 . 572) (nil fontified nil 564 . 565) (nil fontified nil 563 . 564) (nil fontified nil 562 . 563) (nil fontified nil 556 . 562) (nil fontified nil 555 . 556) (nil fontified nil 550 . 555) (nil fontified nil 549 . 550) (nil fontified nil 548 . 549) (nil fontified nil 544 . 548) (nil fontified nil 543 . 544) (nil fontified nil 542 . 543) (nil fontified nil 541 . 542) (nil fontified nil 538 . 541) (nil fontified nil 537 . 538) (nil fontified nil 535 . 537) (nil fontified nil 534 . 535) (nil fontified nil 533 . 534) (nil fontified nil 532 . 533) (nil fontified nil 531 . 532) (nil fontified nil 530 . 531) (nil fontified nil 529 . 530) (nil fontified nil 523 . 529) (nil fontified nil 522 . 523) (522 . 608) (t 25284 27726 0 0)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-function-name-face fontified nil) 9 10 (face font-lock-function-name-face fontified nil) 10 11 (face font-lock-function-name-face fontified nil) 11 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-4-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-5-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 75 (fontified nil) 75 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-2-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky t) 85 86 (rear-nonsticky nil fontified nil)) . 522) (undo-tree-id183 . -86) (undo-tree-id184 . -86) (undo-tree-id185 . 86) (undo-tree-id186 . -86) (nil fontified t 534 . 535) (nil fontified t 550 . 551) (nil fontified t 565 . 566) (nil fontified t 596 . 597) (nil rear-nonsticky t 607 . 608)) (25284 27747 844181 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -409) (undo-tree-id1320 . -1) 410) nil (25292 1083 17160 0) 0 nil])
([nil nil ((168 . 170)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 168) (undo-tree-id1658 . -1) (undo-tree-id1659 . 1) (undo-tree-id1660 . -1)) (25287 2378 780045 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -236) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (#("n" 0 1 (fontified t)) . -237) (undo-tree-id787 . -1) (undo-tree-id788 . 1) (undo-tree-id789 . -1) 238) ((236 . 238)) (25284 29623 482776 0) 0 nil])
([nil nil ((#("5" 0 1 (rear-nonsticky t fontified t)) . -538) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id194 . -1) 539) ((538 . 539)) (25284 28278 886069 0) 0 nil] [nil nil ((#("5" 0 1 (rear-nonsticky t fontified t)) . -538) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . 1) (undo-tree-id190 . -1) 539) ((538 . 539)) (25284 27761 842331 0) 0 nil])
nil
nil
([nil nil ((#("(lambda ()
      (set! x (rand-update x))
      x)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t) 11 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 22 (fontified t face font-lock-keyword-face) 22 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-4-face)) 26 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-4-face)) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-2-face))) . 409) (undo-tree-id1316 . -50) (undo-tree-id1317 . -1) (undo-tree-id1318 . -11) (undo-tree-id1319 . -50)) nil (25292 1083 17158 0) 0 nil])
([nil nil ((169 . 174)) ((#("hello" 0 5 (face font-lock-string-face fontified t)) . 169)) (25287 2378 746674 0) 0 nil])
([nil nil ((236 . 237)) ((#("e" 0 1 (fontified t)) . 236) (undo-tree-id790 . 1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (t 25284 29621 0 0)) (25284 29621 678608 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 552 . 553) (nil fontified nil 552 . 553) (nil fontified nil 551 . 552) (nil fontified nil 550 . 551) (nil fontified nil 540 . 550) (nil fontified nil 539 . 540) (nil fontified nil 538 . 539) (538 . 553)) ((#("((rand-seed 5))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 12 (fontified nil) 12 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-2-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 538) (undo-tree-id449 . -15) (undo-tree-id450 . -15) (undo-tree-id451 . -15) (undo-tree-id452 . -15) (undo-tree-id453 . -15) (undo-tree-id454 . -15) (undo-tree-id455 . -15) (undo-tree-id456 . -15) (undo-tree-id457 . -15) (undo-tree-id458 . -15) (undo-tree-id459 . -15) (undo-tree-id460 . -15) (undo-tree-id461 . -15) (undo-tree-id462 . -15) (undo-tree-id463 . -15) (undo-tree-id464 . -15) (undo-tree-id465 . -15) (undo-tree-id466 . -15) (undo-tree-id467 . -15) (undo-tree-id468 . -15) (undo-tree-id469 . -15) (undo-tree-id470 . -15) (undo-tree-id471 . -15) (undo-tree-id472 . -15) (undo-tree-id473 . -15) (undo-tree-id474 . -15) (undo-tree-id475 . -15) (undo-tree-id476 . -15) (undo-tree-id477 . -15) (undo-tree-id478 . -15) (undo-tree-id479 . -15) (nil rear-nonsticky t 552 . 553)) (25284 28278 534705 0) 0 nil])
nil
([nil nil ((nil fontified nil 585 . 586) (nil fontified nil 584 . 585) (nil fontified nil 583 . 584) (nil fontified nil 582 . 583) (nil fontified nil 581 . 582) (nil fontified nil 580 . 581) (nil fontified nil 579 . 580) (nil fontified nil 560 . 579) (nil fontified nil 555 . 560) (nil fontified nil 554 . 555) (nil fontified nil 553 . 554) (nil fontified nil 552 . 553) (nil fontified nil 551 . 552) (nil fontified nil 550 . 551) (nil fontified nil 549 . 550) (nil fontified nil 548 . 549) (nil fontified nil 537 . 548) (nil fontified nil 531 . 537) (nil fontified nil 530 . 531) (nil fontified nil 529 . 530) (nil fontified nil 525 . 529) (nil fontified nil 524 . 525) (nil fontified nil 522 . 524) (nil fontified nil 520 . 522) (nil fontified nil 519 . 520) (nil fontified nil 518 . 519) (nil fontified nil 517 . 518) (nil fontified nil 516 . 517) (nil fontified nil 515 . 516) (nil fontified nil 506 . 515) (nil fontified nil 500 . 506) (nil fontified nil 499 . 500) (nil fontified nil 498 . 499) (nil fontified nil 497 . 498) (nil fontified nil 489 . 497) (nil fontified nil 482 . 489) (nil fontified nil 481 . 482) (nil fontified nil 480 . 481) (nil fontified nil 475 . 480) (nil fontified nil 474 . 475) (nil fontified nil 473 . 474) (nil fontified nil 472 . 473) (nil fontified nil 471 . 472) (nil fontified nil 465 . 471) (nil fontified nil 459 . 465) (nil fontified nil 458 . 459) (nil fontified nil 457 . 458) (nil fontified nil 456 . 457) (nil fontified nil 444 . 456) (nil fontified nil 443 . 444) (nil fontified nil 442 . 443) (nil fontified nil 441 . 442) (nil fontified nil 437 . 441) (nil fontified nil 436 . 437) (nil fontified nil 430 . 436) (nil fontified nil 429 . 430) (nil fontified nil 428 . 429) (nil fontified nil 426 . 428) (nil fontified nil 418 . 426) (nil fontified nil 417 . 418) (nil fontified nil 416 . 417) (nil fontified nil 410 . 416) (nil fontified nil 409 . 410) (409 . 586)) nil (25292 1083 17151 0) 0 nil])
([nil nil ((#("(print \"hello\")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 7 (fontified t) 7 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face (rainbow-delimiters-depth-3-face))) . 161) (undo-tree-id18 . 2) (undo-tree-id20 . -13) (undo-tree-id22 . 2) (undo-tree-id24 . 15) (undo-tree-id26 . 15) (undo-tree-id28 . 15) (undo-tree-id30 . -15) (t 25285 45800 0 0)) ((161 . 176)) (25287 2378 714266 0) 0 nil])
nil
([nil nil ((553 . 554)) ((#("
" 0 1 (fontified t)) . 553) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1)) (25284 28278 59475 0) 0 nil] [nil nil ((553 . 554)) ((#("
" 0 1 (fontified t)) . 553) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . 1) (undo-tree-id265 . 1) (undo-tree-id266 . 1) (undo-tree-id267 . 1) (undo-tree-id268 . 1) (undo-tree-id269 . -1) (undo-tree-id270 . -1)) (25284 28090 512106 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 458) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -458) (undo-tree-id1303 . -1) (#("p" 0 1 (fontified t)) . -459) (undo-tree-id1304 . -1) (#("r" 0 1 (fontified t)) . -460) (undo-tree-id1305 . -1) (#("i" 0 1 (fontified t)) . -461) (undo-tree-id1306 . -1) (#("n" 0 1 (fontified t)) . -462) (undo-tree-id1307 . -1) (#("t" 0 1 (fontified t)) . -463) (undo-tree-id1308 . -1) (#(" " 0 1 (fontified t)) . -464) (undo-tree-id1309 . -1) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 465) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -465) (undo-tree-id1310 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -466) (undo-tree-id1311 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -467) (undo-tree-id1312 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -468) (undo-tree-id1313 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -469) (undo-tree-id1314 . -1) (#("T" 0 1 (fontified t face font-lock-string-face)) . -470) (undo-tree-id1315 . -1) 471) nil (25292 1083 17135 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 161) (undo-tree-id74 . 1) (undo-tree-id76 . 1) (undo-tree-id78 . 1) (undo-tree-id80 . 1) (undo-tree-id82 . 1) (undo-tree-id84 . 1) (undo-tree-id86 . 1) (undo-tree-id88 . 1) (undo-tree-id90 . -1)) ((161 . 162)) (25287 2378 681374 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 161) (undo-tree-id1 . -1) (undo-tree-id2 . 1) (undo-tree-id3 . 1) (undo-tree-id4 . 1) (undo-tree-id5 . 1) (undo-tree-id6 . 1) (undo-tree-id7 . 1) (undo-tree-id8 . 1) (undo-tree-id9 . 1) (undo-tree-id10 . 1) (undo-tree-id11 . 1) (undo-tree-id12 . 1) (undo-tree-id13 . 1) (undo-tree-id14 . 1) (undo-tree-id15 . 1) (undo-tree-id16 . -1)) ((161 . 162)) (25285 45826 56606 0) 0 nil])
([nil nil ((554 . 555) (t 25284 28092 0 0)) ((#("
" 0 1 (fontified t)) . 554) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1)) (25284 28277 696366 0) 0 nil])
([nil nil ((nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 566 . 567) (nil fontified nil 556 . 566) (nil fontified nil 555 . 556) (nil fontified nil 554 . 555) (554 . 569) (t 25284 27767 0 0)) ((#("((rand-seed 5))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 12 (fontified nil) 12 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-2-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky t)) . 554) (undo-tree-id257 . -15) (undo-tree-id258 . -15) (undo-tree-id259 . -15) (nil fontified t 568 . 569)) (25284 28089 711544 0) 0 nil])
([nil nil ((458 . 460)) nil (25292 1083 17122 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -157) (undo-tree-id32 . -1) (undo-tree-id34 . -1) (undo-tree-id36 . -1) (undo-tree-id38 . -1) (undo-tree-id40 . -1) (undo-tree-id42 . -1) (#(" " 0 1 (fontified t)) . -158) (undo-tree-id44 . -1) (undo-tree-id46 . -1) (undo-tree-id48 . -1) (undo-tree-id50 . -1) (undo-tree-id52 . -1) (#(" " 0 1 (fontified t)) . -159) (undo-tree-id55 . -1) (undo-tree-id57 . -1) (undo-tree-id59 . -1) (undo-tree-id61 . -1) (undo-tree-id63 . -1) (#(" " 0 1 (fontified t)) . -160) (undo-tree-id65 . -1) (undo-tree-id67 . -1) (undo-tree-id69 . -1) (undo-tree-id71 . -1) 161) ((157 . 161)) (25287 2378 648904 0) 0 nil])
nil
([nil nil ((555 . 557)) ((#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 555) (undo-tree-id358 . -2) (undo-tree-id359 . -1) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . 2) (undo-tree-id363 . 2) (undo-tree-id364 . 2) (undo-tree-id365 . 2) (undo-tree-id366 . 2) (undo-tree-id367 . 2) (undo-tree-id368 . 1) (undo-tree-id369 . 2) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . 1) (undo-tree-id373 . 1) (undo-tree-id374 . -1) (undo-tree-id375 . 1) (undo-tree-id376 . 1) (undo-tree-id377 . -1) (undo-tree-id378 . 2) (undo-tree-id379 . 1) (undo-tree-id380 . 2) (undo-tree-id381 . 2) (undo-tree-id382 . 1) (undo-tree-id383 . 2) (undo-tree-id384 . -1) (undo-tree-id385 . 1) (undo-tree-id386 . 1) (undo-tree-id387 . -1)) (25284 28277 333786 0) 0 nil])
([nil nil ((569 . 570)) ((#("
" 0 1 (fontified t)) . 569)) (25284 28088 928369 0) 0 nil])
([nil nil ((459 . 465)) nil (25292 1083 17122 0) 0 nil])
([nil nil ((240 . 241)) ((#("j" 0 1 (fontified t)) . 240) (undo-tree-id1655 . -1) (undo-tree-id1656 . 1) (undo-tree-id1657 . -1)) (25287 2378 615096 0) 0 nil] [nil nil ((240 . 241)) ((#("
" 0 1 (fontified t)) . 240) (undo-tree-id91 . -1) (undo-tree-id92 . 1) (undo-tree-id93 . 1)) (25285 45834 216629 0) 0 nil])
([nil nil ((556 . 570)) ((#("rand-update 3 " 0 13 (fontified t) 13 14 (fontified t)) . 556) (undo-tree-id349 . -14) (undo-tree-id350 . -13) (undo-tree-id351 . -13) (undo-tree-id352 . 2) (undo-tree-id353 . -12) (undo-tree-id354 . 14) (undo-tree-id355 . 2) (undo-tree-id356 . 14) (undo-tree-id357 . -14)) (25284 28277 51626 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -219) (#("  " 0 2 (fontified t)) . -190) (#("  " 0 2 (fontified t)) . -175) (undo-tree-id197 . -2) (171 . 172) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -226) 157 (t 25284 27808 0 0)) ((226 . 227) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 171) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (175 . 177) (190 . 192) (219 . 221)) (25284 28088 440378 0) 0 nil])
([nil nil ((465 . 467)) nil (25292 1083 17121 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -240) (undo-tree-id98 . 1) 241) ((240 . 241)) (25287 2378 582304 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -569) (undo-tree-id271 . -1) (undo-tree-id273 . -1) 570) ((569 . 570)) (25284 28276 852067 0) 0 nil])
([nil nil ((#("(let ((x seed)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 156) (undo-tree-id234 . -16) (undo-tree-id235 . -16) (undo-tree-id237 . 16) (undo-tree-id239 . 16) (undo-tree-id241 . 16) (undo-tree-id242 . -16)) ((156 . 172)) (25284 28088 16266 0) 0 nil] [nil nil ((nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 168 . 169) (nil fontified nil 158 . 168) (nil fontified nil 157 . 158) (nil fontified nil 156 . 157) (156 . 171)) ((#("((rand-seed 5))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil) 2 12 (fontified nil) 12 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-3-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky t)) . 156) (undo-tree-id198 . -15) (undo-tree-id199 . 15) (undo-tree-id200 . -15) (nil fontified t 170 . 171)) (25284 28010 98616 0) 0 nil])
([nil nil ((466 . 477)) nil (25292 1083 17120 0) 0 nil])
([nil nil ((240 . 241)) ((#("j" 0 1 (fontified t)) . 240) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1)) (25287 2378 549955 0) 0 nil])
([nil nil ((#("(rand-update 3)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t)) . 555) (undo-tree-id288 . -15) (undo-tree-id289 . -15) (undo-tree-id290 . -15) (undo-tree-id291 . -15) (undo-tree-id292 . 15) (undo-tree-id293 . 15) (undo-tree-id294 . 15) (undo-tree-id295 . 15) (undo-tree-id296 . 15) (undo-tree-id297 . 15) (undo-tree-id298 . 1) (undo-tree-id299 . 15) (undo-tree-id300 . -14) (undo-tree-id301 . -14) (undo-tree-id302 . 2) (undo-tree-id303 . 1) (undo-tree-id304 . -15) (undo-tree-id305 . -13) (undo-tree-id306 . 14) (undo-tree-id307 . 2) (undo-tree-id308 . -1) (undo-tree-id309 . 15) (undo-tree-id310 . 14)) ((555 . 570)) (25284 28276 659062 0) 0 nil] [nil nil ((570 . 571) 569) ((#("
" 0 1 (fontified t)) . 570) (undo-tree-id287 . -1) (t 25284 28183 0 0)) (25284 28208 908156 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 156) (undo-tree-id224 . -1) (undo-tree-id226 . 1) (undo-tree-id228 . 1) (undo-tree-id230 . 1) (undo-tree-id232 . 1)) ((156 . 157)) (25284 28087 629390 0) 0 nil])
nil
([nil nil ((478 . 486)) nil (25292 1083 17119 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -240) (undo-tree-id95 . 1) 241) ((240 . 241)) (25287 2378 517066 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 569 . 570) (nil fontified nil 569 . 570) (nil fontified nil 556 . 569) (nil fontified nil 555 . 556) (555 . 570)) ((#("(rand-update 3)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 555) (undo-tree-id338 . -15) (undo-tree-id339 . -15) (undo-tree-id340 . -15) (undo-tree-id341 . -15) (undo-tree-id342 . -15) (undo-tree-id343 . -15) (undo-tree-id344 . -15) (undo-tree-id345 . -15) (undo-tree-id346 . -15) (undo-tree-id347 . -15) (undo-tree-id348 . -15) (nil rear-nonsticky t 569 . 570)) (25284 28276 445837 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 571 . 572) (nil fontified nil 570 . 571) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 562 . 568) (nil fontified nil 561 . 562) (nil fontified nil 560 . 561) (nil fontified nil 559 . 560) (nil fontified nil 556 . 559) (nil fontified nil 555 . 556) (555 . 572) (t 25284 28183 0 0)) ((#("(let ((x seed)))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-2-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-3-face) fontified nil) 7 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-3-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 17 (rear-nonsticky nil fontified nil)) . 555) (undo-tree-id282 . -17) (undo-tree-id283 . -17) (undo-tree-id284 . -17) (undo-tree-id285 . -17) (undo-tree-id286 . -17) (nil rear-nonsticky t 571 . 572)) (25284 28208 781238 0) 0 nil] [nil nil ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 571 . 572) (nil fontified nil 570 . 571) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 562 . 568) (nil fontified nil 561 . 562) (nil fontified nil 560 . 561) (nil fontified nil 559 . 560) (nil fontified nil 556 . 559) (nil fontified nil 555 . 556) (555 . 572) (t 25284 28183 0 0)) ((#("(let ((x seed)))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-2-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-3-face) fontified nil) 7 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-3-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 17 (rear-nonsticky nil fontified nil)) . 555) (undo-tree-id274 . -17) (undo-tree-id275 . -17) (undo-tree-id276 . 17) (undo-tree-id277 . -17) (nil rear-nonsticky t 571 . 572)) (25284 28201 735426 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -154) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id210 . -1) (undo-tree-id212 . -1) (#(" " 0 1 (fontified t)) . -155) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id222 . -1) 156) ((154 . 156)) (25284 28087 216162 0) 0 nil])
([nil nil ((486 . 490)) nil (25292 1083 17119 0) 0 nil])
([nil nil ((258 . 259)) ((#("
" 0 1 (fontified t)) . 258) (undo-tree-id1607 . -1) (undo-tree-id1608 . 1) (undo-tree-id1609 . 1) (undo-tree-id1610 . 1) (undo-tree-id1611 . 1) (undo-tree-id1612 . 1) (undo-tree-id1613 . -1) (undo-tree-id1614 . 1) (undo-tree-id1615 . 1) (undo-tree-id1616 . 1) (undo-tree-id1617 . 1) (undo-tree-id1618 . 1) (undo-tree-id1619 . 1) (undo-tree-id1620 . 1) (undo-tree-id1621 . 1) (undo-tree-id1622 . 1) (undo-tree-id1623 . 1) (undo-tree-id1624 . 1) (undo-tree-id1625 . 1) (undo-tree-id1626 . 1) (undo-tree-id1627 . 1) (undo-tree-id1628 . 1) (undo-tree-id1629 . 1) (undo-tree-id1630 . 1) (undo-tree-id1631 . 1) (undo-tree-id1632 . 1) (undo-tree-id1633 . 1) (undo-tree-id1634 . 1) (undo-tree-id1635 . 1) (undo-tree-id1636 . 1) (undo-tree-id1637 . 1) (undo-tree-id1638 . 1) (undo-tree-id1639 . 1) (undo-tree-id1640 . 1) (undo-tree-id1641 . 1) (undo-tree-id1642 . 1) (undo-tree-id1643 . 1) (undo-tree-id1644 . 1) (undo-tree-id1645 . 1) (undo-tree-id1646 . 1) (undo-tree-id1647 . 1) (undo-tree-id1648 . 1) (undo-tree-id1649 . 1) (undo-tree-id1650 . 1) (undo-tree-id1651 . 1) (undo-tree-id1652 . 1)) (25287 2378 483430 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 584 . 585) (nil fontified nil 584 . 585) (nil fontified nil 571 . 584) (nil fontified nil 570 . 571) (570 . 585)) ((#("(rand-update 3)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 570) (undo-tree-id328 . -15) (undo-tree-id329 . -15) (undo-tree-id330 . -15) (undo-tree-id331 . -15) (undo-tree-id332 . -15) (undo-tree-id333 . -15) (undo-tree-id334 . -15) (undo-tree-id335 . 15) (undo-tree-id336 . 15) (undo-tree-id337 . -15) (nil rear-nonsticky t 584 . 585)) (25284 28276 254173 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 588 . 589) (nil fontified nil 588 . 589) (nil fontified nil 587 . 588) (nil fontified nil 586 . 587) (nil fontified nil 585 . 586) (nil fontified nil 579 . 585) (nil fontified nil 578 . 579) (nil fontified nil 577 . 578) (nil fontified nil 576 . 577) (nil fontified nil 573 . 576) (nil fontified nil 572 . 573) (572 . 589)) ((#("(let ((x seed)))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-2-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-3-face) fontified nil) 7 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-3-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 17 (rear-nonsticky nil fontified nil)) . 572) (undo-tree-id278 . -17) (undo-tree-id279 . -17) (undo-tree-id280 . 17) (undo-tree-id281 . -17) (nil rear-nonsticky t 588 . 589)) (25284 28208 780967 0) 0 nil])
nil
([nil nil ((#("x" 0 1 (fontified t)) . -177) (undo-tree-id250 . -1) (undo-tree-id251 . 1) (undo-tree-id252 . 1) (undo-tree-id253 . -1) 178 (t 25284 28021 0 0)) ((177 . 178)) (25284 28086 735515 0) 0 nil])
([nil nil ((478 . 486)) nil (25292 1083 17118 0) 0 nil])
([nil nil ((258 . 262)) ((#("    " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 258) (undo-tree-id1582 . -4) (undo-tree-id1583 . -4) (undo-tree-id1584 . -4) (undo-tree-id1585 . -4) (undo-tree-id1586 . -4) (undo-tree-id1587 . -4) (undo-tree-id1588 . -4) (undo-tree-id1589 . -4) (undo-tree-id1590 . -4) (undo-tree-id1591 . -4) (undo-tree-id1592 . -4) (undo-tree-id1593 . -4) (undo-tree-id1594 . -4) (undo-tree-id1595 . -4) (undo-tree-id1596 . -4) (undo-tree-id1597 . -4) (undo-tree-id1598 . -4) (undo-tree-id1599 . -4) (undo-tree-id1600 . -4) (undo-tree-id1601 . -4) (undo-tree-id1602 . -4) (undo-tree-id1603 . -4) (undo-tree-id1604 . -4) (undo-tree-id1605 . -4) (undo-tree-id1606 . -4)) (25287 2378 450780 0) 0 nil] [nil nil ((nil rear-nonsticky nil 258 . 259) (nil fontified nil 258 . 259) (258 . 259)) ((#("
" 0 1 (fontified nil rear-nonsticky nil)) . 258) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . 1) (undo-tree-id103 . -1) (nil rear-nonsticky t 258 . 259)) (25285 45840 280731 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 599 . 600) (nil fontified nil 599 . 600) (nil fontified nil 586 . 599) (nil fontified nil 585 . 586) (585 . 600)) ((#("(rand-update 3)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 585) (undo-tree-id318 . -15) (undo-tree-id319 . 15) (undo-tree-id320 . 15) (undo-tree-id321 . 15) (undo-tree-id322 . 15) (undo-tree-id323 . 15) (undo-tree-id324 . 15) (undo-tree-id325 . 15) (undo-tree-id326 . 15) (undo-tree-id327 . 15) (nil rear-nonsticky t 599 . 600)) (25284 28275 732063 0) 0 nil])
nil
([nil nil ((177 . 181)) ((#("seed" 0 4 (fontified t)) . 177)) (25284 28086 365939 0) 0 nil])
([nil nil ((486 . 488)) nil (25292 1083 17117 0) 0 nil])
([nil nil ((262 . 264)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 262) (undo-tree-id1527 . -1) (undo-tree-id1528 . 2) (undo-tree-id1529 . 2) (undo-tree-id1530 . 2) (undo-tree-id1531 . 2) (undo-tree-id1532 . 2) (undo-tree-id1533 . 2) (undo-tree-id1534 . 1) (undo-tree-id1535 . 2) (undo-tree-id1536 . -1) (undo-tree-id1537 . 1) (undo-tree-id1538 . 1) (undo-tree-id1539 . -1) (undo-tree-id1540 . 1) (undo-tree-id1541 . 1) (undo-tree-id1542 . -1) (undo-tree-id1543 . 1) (undo-tree-id1544 . 1) (undo-tree-id1545 . -1) (undo-tree-id1546 . 1) (undo-tree-id1547 . 1) (undo-tree-id1548 . -1) (undo-tree-id1549 . 1) (undo-tree-id1550 . 1) (undo-tree-id1551 . -1) (undo-tree-id1552 . 1) (undo-tree-id1553 . 1) (undo-tree-id1554 . -1) (undo-tree-id1555 . 1) (undo-tree-id1556 . 1) (undo-tree-id1557 . -1) (undo-tree-id1558 . 1) (undo-tree-id1559 . 1) (undo-tree-id1560 . -1) (undo-tree-id1561 . 1) (undo-tree-id1562 . 1) (undo-tree-id1563 . -1) (undo-tree-id1564 . 1) (undo-tree-id1565 . 1) (undo-tree-id1566 . -1) (undo-tree-id1567 . 1) (undo-tree-id1568 . 1) (undo-tree-id1569 . -1) (undo-tree-id1570 . 1) (undo-tree-id1571 . 1) (undo-tree-id1572 . -1) (undo-tree-id1573 . 1) (undo-tree-id1574 . 1) (undo-tree-id1575 . -1) (undo-tree-id1576 . 1) (undo-tree-id1577 . 1) (undo-tree-id1578 . -1) (undo-tree-id1579 . 1) (undo-tree-id1580 . 1) (undo-tree-id1581 . -1)) (25287 2378 418125 0) 0 nil])
nil
([nil nil ((570 . 571)) ((#("
" 0 1 (fontified t)) . 570) (undo-tree-id317 . -1)) (25284 28275 277615 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -195) (undo-tree-id245 . -1) (undo-tree-id246 . 1) (undo-tree-id247 . 1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 196) ((195 . 196)) (25284 28085 959613 0) 0 nil])
([nil nil ((487 . 493)) nil (25292 1083 17116 0) 0 nil])
([nil nil ((263 . 264)) ((#("h" 0 1 (fontified t)) . 263) (undo-tree-id1524 . -1) (undo-tree-id1525 . 1) (undo-tree-id1526 . -1)) (25287 2378 384693 0) 0 nil])
([nil nil ((586 . 587)) ((#("
" 0 1 (fontified t)) . 586) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . 1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) (25284 28274 818781 0) 0 nil])
([nil nil ((195 . 199)) ((#("seed" 0 4 (fontified t)) . 195)) (25284 28085 607633 0) 0 nil])
([nil nil ((493 . 495)) nil (25292 1083 17116 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -263) (undo-tree-id119 . 1) 264) ((263 . 264)) (25287 2378 351048 0) 0 nil])
([nil nil ((602 . 603) 587) ((#("
" 0 1 (fontified t)) . 602) (t 25284 28224 0 0)) (25284 28224 808551 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -206) (undo-tree-id243 . -1) (undo-tree-id244 . -1) 207) ((206 . 207)) (25284 28085 238899 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . 486) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . -486) (undo-tree-id1295 . -1) (#("p" 0 1 (fontified t)) . -487) (undo-tree-id1296 . -1) (#("r" 0 1 (fontified t)) . -488) (undo-tree-id1297 . -1) (#("i" 0 1 (fontified t)) . -489) (undo-tree-id1298 . -1) (#("n" 0 1 (fontified t)) . -490) (undo-tree-id1299 . -1) (#("t" 0 1 (fontified t)) . -491) (undo-tree-id1300 . -1) (#(" " 0 1 (fontified t)) . -492) (undo-tree-id1301 . -1) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 493) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -493) (undo-tree-id1302 . -1) 494) nil (25292 1083 17113 0) 0 nil])
([nil nil ((263 . 265)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 263) (undo-tree-id1520 . -1) (undo-tree-id1521 . 1) (undo-tree-id1522 . 2) (undo-tree-id1523 . -1)) (25287 2378 317734 0) 0 nil])
nil
([nil nil ((206 . 210)) ((#("seed" 0 4 (fontified t)) . 206) (undo-tree-id254 . -4) (t 25284 28046 0 0)) (25284 28046 419741 0) 0 nil])
([nil nil ((486 . 488)) nil (25292 1083 17103 0) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 263) (undo-tree-id114 . 1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -263) (undo-tree-id116 . 1) 264) ((263 . 264) (263 . 264)) (25287 2378 285852 0) 0 nil])
nil
([nil nil ((487 . 490)) nil (25292 1083 17102 0) 0 nil])
([nil nil ((263 . 270)) ((#("print x" 0 6 (fontified t) 6 7 (fontified t)) . 263) (undo-tree-id1505 . -7) (undo-tree-id1506 . -6) (undo-tree-id1507 . -6) (undo-tree-id1508 . -6) (undo-tree-id1509 . 2) (undo-tree-id1510 . -5) (undo-tree-id1511 . 2) (undo-tree-id1512 . -6) (undo-tree-id1513 . -6) (undo-tree-id1514 . -6) (undo-tree-id1515 . -6) (undo-tree-id1516 . -6) (undo-tree-id1517 . -6) (undo-tree-id1518 . 1) (undo-tree-id1519 . -7)) (25287 2378 252377 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -489) (undo-tree-id1294 . -1) 490) nil (25292 1083 17101 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -269) (undo-tree-id111 . 1) 270) ((269 . 270)) (25287 2378 218566 0) 0 nil])
([nil nil ((489 . 493)) nil (25292 1083 17093 0) 0 nil])
([nil nil ((269 . 271)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 269) (undo-tree-id1483 . -1) (undo-tree-id1484 . 1) (undo-tree-id1485 . -1) (undo-tree-id1486 . 1) (undo-tree-id1487 . 1) (undo-tree-id1488 . -1) (undo-tree-id1489 . 1) (undo-tree-id1490 . 1) (undo-tree-id1491 . -1) (undo-tree-id1492 . 1) (undo-tree-id1493 . -2) (undo-tree-id1494 . 1) (undo-tree-id1495 . -1) (undo-tree-id1496 . 1) (undo-tree-id1497 . 1) (undo-tree-id1498 . -1) (undo-tree-id1499 . 1) (undo-tree-id1500 . 1) (undo-tree-id1501 . -1) (undo-tree-id1502 . 1) (undo-tree-id1503 . 1) (undo-tree-id1504 . -1)) (25287 2378 186241 0) 0 nil])
([nil nil ((493 . 495)) nil (25292 1083 17091 0) 0 nil])
([nil nil ((270 . 291)) ((#("The initial value of " 0 21 (face font-lock-string-face fontified t)) . 270) (undo-tree-id1476 . -21) (undo-tree-id1477 . -21) (undo-tree-id1478 . -21) (undo-tree-id1479 . -21) (undo-tree-id1480 . -21) (undo-tree-id1481 . -21) (undo-tree-id1482 . -21)) (25287 2378 152715 0) 0 nil])
([nil nil ((494 . 499)) nil (25292 1083 17087 0) 0 nil])
([nil nil ((291 . 295)) ((#("x is" 0 4 (face font-lock-string-face fontified t)) . 291) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4)) (25287 2378 119481 0) 0 nil])
([nil nil ((#("(define (dispatch m)
      (cond ((eq? m 'reset) (print \"RESET\"))
	    ((eq? m 'generate) (print \"GENERATE\"))
	    (else (error \"Unknown request --RANDOM-NUMBER-GENERATOR\" m))))" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 17 (fontified t face font-lock-function-name-face) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-3-face)) 20 21 (fontified t) 21 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t face (rainbow-delimiters-depth-5-face)) 35 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-5-face)) 48 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-5-face)) 50 56 (fontified t) 56 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-5-face)) 64 65 (fontified t face (rainbow-delimiters-depth-4-face)) 65 66 (fontified t) 66 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-4-face)) 72 73 (fontified t face (rainbow-delimiters-depth-5-face)) 73 80 (fontified t) 80 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-5-face)) 89 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-5-face)) 91 97 (fontified t) 97 106 (fontified t face font-lock-string-face) 106 107 (fontified t face font-lock-string-face) 107 108 (fontified t face (rainbow-delimiters-depth-5-face)) 108 109 (fontified t face (rainbow-delimiters-depth-4-face)) 109 110 (fontified t) 110 111 (fontified t) 111 113 (fontified t) 113 115 (fontified t) 115 116 (fontified t face (rainbow-delimiters-depth-4-face)) 116 120 (fontified t face font-lock-keyword-face) 120 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-5-face)) 122 128 (fontified t) 128 139 (fontified t face font-lock-string-face) 139 140 (fontified t face font-lock-string-face) 140 141 (fontified t face font-lock-string-face) 141 142 (fontified t face font-lock-string-face) 142 143 (fontified t face font-lock-string-face) 143 144 (fontified t face font-lock-string-face) 144 145 (fontified t face font-lock-string-face) 145 146 (fontified t face font-lock-string-face) 146 151 (fontified t face font-lock-string-face) 151 170 (fontified t face font-lock-string-face) 170 171 (fontified t face font-lock-string-face) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t face (rainbow-delimiters-depth-5-face)) 174 175 (fontified t face (rainbow-delimiters-depth-4-face)) 175 176 (fontified t face (rainbow-delimiters-depth-3-face)) 176 177 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face))) . 644) (undo-tree-id1335 . -177) (undo-tree-id1336 . -21) (undo-tree-id1337 . -177) (undo-tree-id1338 . -177) (t 25292 1083 0 0)) nil (25292 1118 977446 0) 0 nil])
([nil nil ((295 . 298)) ((#(": l" 0 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 295) (undo-tree-id1465 . -3) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -3)) (25287 2378 86354 0) 0 nil])
([nil nil ((627 . 632)) nil (25292 1118 977441 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-string-face)) . -297) (undo-tree-id108 . 1) 298) ((297 . 298)) (25287 2378 53980 0) 0 nil])
([nil nil ((632 . 640)) nil (25292 1118 977439 0) 0 nil])
([nil nil ((298 . 300)) ((#(" x" 0 2 (fontified t)) . 298)) (25287 2378 21753 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 314) (undo-tree-id104 . -1) (undo-tree-id105 . 1) (undo-tree-id106 . -1)) ((314 . 315)) (25285 45860 660250 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -660) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("i" 0 1 (fontified t)) . -661) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (#("s" 0 1 (fontified t)) . -662) (undo-tree-id1329 . -1) (#("p" 0 1 (fontified t)) . -663) (undo-tree-id1330 . -1) (#("a" 0 1 (fontified t)) . -664) (undo-tree-id1331 . -1) (#("t" 0 1 (fontified t)) . -665) (undo-tree-id1332 . -1) (#("c" 0 1 (fontified t)) . -666) (undo-tree-id1333 . -1) (#("h" 0 1 (fontified t)) . -667) (undo-tree-id1334 . -1) 668) nil (25292 1118 977433 0) 0 nil])
([nil nil ((268 . 269) (t 25285 45865 0 0)) ((#("f" 0 1 (fontified t)) . 268)) (25287 2377 987738 0) 0 nil])
nil
([nil nil ((nil fontified nil 906 . 907) (nil fontified nil 894 . 906) (nil fontified nil 893 . 894) (nil fontified nil 892 . 893) (nil fontified nil 891 . 892) (nil fontified nil 890 . 891) (nil fontified nil 889 . 890) (nil fontified nil 888 . 889) (nil fontified nil 887 . 888) (nil fontified nil 886 . 887) (nil fontified nil 867 . 886) (nil fontified nil 862 . 867) (nil fontified nil 861 . 862) (nil fontified nil 860 . 861) (nil fontified nil 859 . 860) (nil fontified nil 858 . 859) (nil fontified nil 857 . 858) (nil fontified nil 856 . 857) (nil fontified nil 855 . 856) (nil fontified nil 844 . 855) (nil fontified nil 838 . 844) (nil fontified nil 837 . 838) (nil fontified nil 836 . 837) (nil fontified nil 832 . 836) (nil fontified nil 831 . 832) (nil fontified nil 829 . 831) (nil fontified nil 827 . 829) (nil fontified nil 826 . 827) (nil fontified nil 825 . 826) (nil fontified nil 824 . 825) (nil fontified nil 823 . 824) (nil fontified nil 822 . 823) (nil fontified nil 813 . 822) (nil fontified nil 807 . 813) (nil fontified nil 806 . 807) (nil fontified nil 805 . 806) (nil fontified nil 804 . 805) (nil fontified nil 796 . 804) (nil fontified nil 789 . 796) (nil fontified nil 788 . 789) (nil fontified nil 787 . 788) (nil fontified nil 782 . 787) (nil fontified nil 781 . 782) (nil fontified nil 780 . 781) (nil fontified nil 779 . 780) (nil fontified nil 768 . 779) (nil fontified nil 767 . 768) (nil fontified nil 766 . 767) (nil fontified nil 765 . 766) (nil fontified nil 759 . 765) (nil fontified nil 753 . 759) (nil fontified nil 752 . 753) (nil fontified nil 745 . 752) (nil fontified nil 744 . 745) (nil fontified nil 743 . 744) (nil fontified nil 736 . 743) (nil fontified nil 732 . 736) (nil fontified nil 731 . 732) (nil fontified nil 730 . 731) (nil fontified nil 725 . 730) (nil fontified nil 724 . 725) (nil fontified nil 723 . 724) (nil fontified nil 722 . 723) (nil fontified nil 710 . 722) (nil fontified nil 709 . 710) (nil fontified nil 708 . 709) (nil fontified nil 707 . 708) (nil fontified nil 703 . 707) (nil fontified nil 702 . 703) (nil fontified nil 696 . 702) (nil fontified nil 695 . 696) (nil fontified nil 694 . 695) (nil fontified nil 692 . 694) (nil fontified nil 684 . 692) (nil fontified nil 683 . 684) (nil fontified nil 682 . 683) (nil fontified nil 676 . 682) (nil fontified nil 675 . 676) (nil fontified nil 671 . 675) (nil fontified nil 670 . 671) (nil fontified nil 669 . 670) (nil fontified nil 668 . 669) (nil fontified nil 666 . 668) (nil fontified nil 662 . 666) (nil fontified nil 661 . 662) (nil fontified nil 660 . 661) (nil fontified nil 659 . 660) (nil fontified nil 656 . 659) (nil fontified nil 655 . 656) (655 . 907) (t 25292 1118 0 0)) nil (25292 1131 801579 0) 0 nil])
([nil nil ((298 . 300)) ((#("~a" 0 2 (face font-lock-string-face fontified t)) . 298) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2)) (25287 2377 956080 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -907) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#(" " 0 1 (fontified t)) . -908) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (#("
" 0 1 (fontified t)) . -909) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#(" " 0 1 (fontified t)) . -910) (undo-tree-id1356 . -1) (#(" " 0 1 (fontified t)) . -911) (undo-tree-id1357 . -1) 912) nil (25292 1131 801557 0) 0 nil])
([nil nil ((300 . 301) (t 25285 45933 0 0)) ((#(" " 0 1 (face font-lock-string-face fontified t)) . 300) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1)) (25287 2377 922928 0) 0 nil])
([nil nil ((#("(let ((seed 0))
    (define (dispatch m)
      (cond ((eq? m 'reset) (begin (set! seed 0)
				   (print \"Reset\")
				   seed))
	    ((eq? m 'generate) (print \"GENERATE\"))
	    (else (error \"Unknown request --RANDOM-NUMBER-GENERATOR\" m))))
    dispatch)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-2-face)) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 11 (fontified t) 11 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t) 16 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 37 (fontified t face font-lock-function-name-face) 37 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-3-face)) 40 41 (fontified t) 41 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-4-face)) 54 55 (fontified t face (rainbow-delimiters-depth-5-face)) 55 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-5-face)) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-5-face)) 70 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-6-face)) 77 81 (fontified t face font-lock-keyword-face) 81 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-6-face)) 89 90 (fontified t) 90 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-6-face)) 98 104 (fontified t) 104 110 (fontified t face font-lock-string-face) 110 111 (fontified t face font-lock-string-face) 111 112 (fontified t face (rainbow-delimiters-depth-6-face)) 112 113 (fontified t) 113 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-5-face)) 125 126 (fontified t face (rainbow-delimiters-depth-4-face)) 126 127 (fontified t) 127 132 (fontified t) 132 133 (fontified t face (rainbow-delimiters-depth-4-face)) 133 134 (fontified t face (rainbow-delimiters-depth-5-face)) 134 141 (fontified t) 141 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-5-face)) 150 151 (fontified t) 151 152 (fontified t face (rainbow-delimiters-depth-5-face)) 152 158 (fontified t) 158 167 (fontified t face font-lock-string-face) 167 168 (fontified t face font-lock-string-face) 168 169 (fontified t face (rainbow-delimiters-depth-5-face)) 169 170 (fontified t face (rainbow-delimiters-depth-4-face)) 170 171 (fontified t) 171 172 (fontified t) 172 174 (fontified t) 174 176 (fontified t) 176 177 (fontified t face (rainbow-delimiters-depth-4-face)) 177 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 183 (fontified t face (rainbow-delimiters-depth-5-face)) 183 189 (fontified t) 189 200 (fontified t face font-lock-string-face) 200 201 (fontified t face font-lock-string-face) 201 202 (fontified t face font-lock-string-face) 202 203 (fontified t face font-lock-string-face) 203 204 (fontified t face font-lock-string-face) 204 205 (fontified t face font-lock-string-face) 205 206 (fontified t face font-lock-string-face) 206 207 (fontified t face font-lock-string-face) 207 212 (fontified t face font-lock-string-face) 212 231 (fontified t face font-lock-string-face) 231 232 (fontified t face font-lock-string-face) 232 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t face (rainbow-delimiters-depth-5-face)) 235 236 (fontified t face (rainbow-delimiters-depth-4-face)) 236 237 (fontified t face (rainbow-delimiters-depth-3-face)) 237 238 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 238 239 (fontified t) 239 251 (fontified t) 251 252 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 389) (undo-tree-id1358 . -252) (undo-tree-id1359 . -16) (undo-tree-id1360 . -20) (undo-tree-id1361 . -20) (undo-tree-id1362 . -69) (undo-tree-id1363 . -20) (undo-tree-id1364 . -69) (undo-tree-id1365 . 183) (undo-tree-id1366 . 183) (undo-tree-id1367 . 183) (undo-tree-id1368 . 183) (undo-tree-id1369 . -125) (undo-tree-id1370 . -252) (undo-tree-id1371 . -252) (t 25292 1131 0 0)) nil (25292 1168 730158 0) 0 nil])
([nil nil ((301 . 303)) ((#("\\n" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 301)) (25287 2377 889512 0) 0 nil])
([nil nil ((403 . 405)) nil (25292 1168 730135 0) 0 nil])
([nil nil ((262 . 263) (t 25285 45966 0 0)) ((#("n" 0 1 (fontified t)) . 262) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1)) (25287 2377 857166 0) 0 nil] [nil nil ((nil rear-nonsticky nil 262 . 263) (nil fontified nil 262 . 263) (262 . 263) (t 25285 45966 0 0)) ((#("
" 0 1 (fontified nil rear-nonsticky nil)) . 262) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . 1) (undo-tree-id124 . -1) (nil rear-nonsticky t 262 . 263)) (25285 45987 936957 0) 0 nil])
([nil nil ((515 . 516) (t 25292 1168 0 0)) nil (25292 1179 267410 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -262) 263) ((262 . 263)) (25287 2377 822880 0) 0 nil])
nil
([nil nil ((516 . 518)) nil (25292 1179 267404 0) 0 nil])
([nil nil ((353 . 360)) ((#("
      " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 353) (undo-tree-id1444 . -1) (undo-tree-id1445 . -7) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . 6) (undo-tree-id1449 . -7) (undo-tree-id1450 . -7) (undo-tree-id1451 . -7) (undo-tree-id1452 . -7) (undo-tree-id1453 . -7) (undo-tree-id1454 . -7) (undo-tree-id1455 . -7) (undo-tree-id1456 . -7)) (25287 2377 789625 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 447 . 448) (nil fontified nil 447 . 448) (nil fontified nil 436 . 447) (nil fontified nil 435 . 436) (nil fontified nil 434 . 435) (nil fontified nil 433 . 434) (nil fontified nil 432 . 433) (nil fontified nil 431 . 432) (nil fontified nil 424 . 431) (nil fontified nil 418 . 424) (nil fontified nil 417 . 418) (nil fontified nil 410 . 417) (nil fontified nil 409 . 410) (nil fontified nil 408 . 409) (nil fontified nil 401 . 408) (nil fontified nil 397 . 401) (nil fontified nil 396 . 397) (nil fontified nil 395 . 396) (nil fontified nil 390 . 395) (nil fontified nil 389 . 390) (389 . 448) (t 25292 1179 0 0)) nil (25292 1217 331648 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 404 . 405) (nil fontified nil 404 . 405) (nil fontified nil 402 . 404) (nil fontified nil 401 . 402) (nil fontified nil 400 . 401) (nil fontified nil 399 . 400) (nil fontified nil 368 . 399) (nil fontified nil 361 . 368) (nil fontified nil 360 . 361) (360 . 405)) ((#("(printf \"The initial value of x is: ~a \\n\" x)" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 8 (fontified nil) 8 13 (face font-lock-string-face fontified nil) 13 14 (face font-lock-string-face fontified nil) 14 15 (face font-lock-string-face fontified nil) 15 16 (face font-lock-string-face fontified nil) 16 17 (face font-lock-string-face fontified nil) 17 18 (face font-lock-string-face fontified nil) 18 19 (face font-lock-string-face fontified nil) 19 20 (face font-lock-string-face fontified nil) 20 39 (face font-lock-string-face fontified nil) 39 40 (face font-lock-string-face fontified nil) 40 41 (face font-lock-string-face fontified nil) 41 42 (face font-lock-string-face fontified nil) 42 44 (fontified nil) 44 45 (face (rainbow-delimiters-depth-4-face) rear-nonsticky nil fontified nil)) . 360) (undo-tree-id1429 . -20) (undo-tree-id1430 . 45) (undo-tree-id1431 . 45) (undo-tree-id1432 . 45) (undo-tree-id1433 . 25) (undo-tree-id1434 . -13) (undo-tree-id1435 . 25) (undo-tree-id1436 . 25) (undo-tree-id1437 . -13) (undo-tree-id1438 . 25) (undo-tree-id1439 . 25) (undo-tree-id1440 . -13) (undo-tree-id1441 . 25) (undo-tree-id1442 . 32) (undo-tree-id1443 . -20) (nil rear-nonsticky t 404 . 405)) (25287 2377 756745 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -415) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (#(" " 0 1 (fontified t)) . -416) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) 417) nil (25292 1217 331643 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -373) (#("n" 0 1 (fontified t face font-lock-string-face)) . -374) (#("i" 0 1 (fontified t face font-lock-string-face)) . -375) (#("t" 0 1 (fontified t face font-lock-string-face)) . -376) (#("i" 0 1 (fontified t face font-lock-string-face)) . -377) (#("a" 0 1 (fontified t face font-lock-string-face)) . -378) (#("l" 0 1 (fontified t face font-lock-string-face)) . -379) 380) ((373 . 380)) (25287 2377 723941 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -414) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) 415) nil (25292 1217 331638 0) 0 nil])
([nil nil ((373 . 376)) ((#("bew" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 373) (undo-tree-id1426 . -3) (undo-tree-id1427 . 3) (undo-tree-id1428 . -3)) (25287 2377 691047 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -413) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (#(" " 0 1 (fontified t)) . -414) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (#(" " 0 1 (fontified t)) . -415) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (#(" " 0 1 (fontified t)) . -416) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (#(" " 0 1 (fontified t)) . -418) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (#(" " 0 1 (fontified t)) . -419) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (#(" " 0 1 (fontified nil)) . -420) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (#("	" 0 1 (fontified nil)) . 421) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (413 . 421) 414) nil (25292 1217 331629 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-string-face)) . -373) (#("e" 0 1 (fontified t face font-lock-string-face)) . -374) (#("w" 0 1 (fontified t face font-lock-string-face)) . -375) 376) ((373 . 376)) (25287 2377 658129 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -412) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (#(" " 0 1 (fontified t)) . -413) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (#(" " 0 1 (fontified t)) . -414) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (#(" " 0 1 (fontified t)) . -415) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (#(" " 0 1 (fontified t)) . -416) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (#(" " 0 1 (fontified t)) . -418) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (#(" " 0 1 (fontified nil)) . -419) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (#("	" 0 1 (fontified nil)) . 420) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (412 . 420) 413) nil (25292 1217 331569 0) 0 nil])
([nil nil ((373 . 376)) ((#("new" 0 3 (face font-lock-string-face fontified t)) . 373)) (25287 2377 625320 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -415) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (#(" " 0 1 (fontified t)) . -416) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (#(" " 0 1 (fontified nil)) . -418) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (#("	" 0 1 (fontified nil)) . 419) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (411 . 419) 412) nil (25292 1217 331445 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -249) 250 (t 25285 46035 0 0)) ((249 . 250)) (25287 2377 591401 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -411) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (#(" " 0 1 (fontified t)) . -412) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#(" " 0 1 (fontified t)) . -413) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (#(" " 0 1 (fontified t)) . -414) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) 415) nil (25292 1217 331363 0) 0 nil])
([nil nil ((249 . 257)) ((#("internal" 0 8 (fontified t)) . 249)) (25287 2377 559623 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -417) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (#("	" 0 1 (fontified nil)) . 418) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (410 . 418) 411) nil (25292 1217 331288 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -258) (#("e" 0 1 (fontified t)) . -259) (#("e" 0 1 (fontified t)) . -260) (#("d" 0 1 (fontified t)) . -261) 262) ((258 . 262)) (25287 2377 526182 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -440) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#(" " 0 1 (fontified t)) . -442) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) 443) nil (25292 1217 331248 0) 0 nil])
([nil nil ((258 . 260)) ((#("-1" 0 2 (fontified t)) . 258)) (25287 2377 493053 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -439) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (#(" " 0 1 (fontified t)) . -440) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#(" " 0 1 (fontified t)) . -442) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#(" " 0 1 (fontified t)) . -444) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (#(" " 0 1 (fontified t)) . -445) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (#(" " 0 1 (fontified nil)) . -446) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (#("	" 0 1 (fontified nil)) . 447) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (439 . 447) 440) nil (25292 1217 331231 0) 0 nil])
([nil nil ((317 . 318)) ((#("
" 0 1 (fontified t)) . 317) (undo-tree-id1419 . -1) (undo-tree-id1420 . 1) (undo-tree-id1421 . 1) (undo-tree-id1422 . 1) (undo-tree-id1423 . 1) (undo-tree-id1424 . 1) (undo-tree-id1425 . 1)) (25287 2377 460056 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -438) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#(" " 0 1 (fontified t)) . -439) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#(" " 0 1 (fontified t)) . -440) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (#(" " 0 1 (fontified t)) . -442) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (#(" " 0 1 (fontified t)) . -444) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (#(" " 0 1 (fontified nil)) . -445) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("	" 0 1 (fontified nil)) . 446) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (438 . 446) 439) nil (25292 1217 331160 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 364 . 365) (nil fontified nil 317 . 365) (317 . 365)) ((#("(if (positive? -5) (error \"doesn't get here\") 2)" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (face (rainbow-delimiters-depth-4-face) fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (fontified nil) 19 20 (face (rainbow-delimiters-depth-4-face) fontified nil) 20 26 (fontified nil) 26 44 (face font-lock-string-face fontified nil) 44 45 (face (rainbow-delimiters-depth-4-face) fontified nil) 45 46 (fontified nil) 46 47 (fontified nil) 47 48 (rear-nonsticky nil face (rainbow-delimiters-depth-3-face) fontified nil)) . 317) (undo-tree-id1409 . -46) (undo-tree-id1410 . -18) (undo-tree-id1411 . -18) (undo-tree-id1412 . 31) (undo-tree-id1413 . -19) (undo-tree-id1414 . 29) (undo-tree-id1415 . -19) (undo-tree-id1416 . 2) (undo-tree-id1417 . 29) (undo-tree-id1418 . -46) (nil rear-nonsticky nil 364 . 365)) (25287 2377 426661 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -443) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (#(" " 0 1 (fontified nil)) . -444) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (#("	" 0 1 (fontified nil)) . 445) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (437 . 445) 438) nil (25292 1217 331045 0) 0 nil])
([nil nil ((363 . 364) (#(" " 0 1 (fontified nil)) . 362) (undo-tree-id142 . -1) (363 . 364)) ((#("
" 0 1 (fontified nil)) . 363) (undo-tree-id1408 . -1) (362 . 363) (#("	" 0 1 (fontified t)) . 363)) (25287 2377 393646 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -437) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#(" " 0 1 (fontified t)) . -438) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (#(" " 0 1 (fontified t)) . -439) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (#(" " 0 1 (fontified t)) . -440) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (#(" " 0 1 (fontified t)) . -442) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) 443) nil (25292 1217 330983 0) 0 nil])
([nil nil ((336 . 337) (#(" " 0 1 (fontified nil)) . 335) (undo-tree-id246 . 1) (undo-tree-id248 . -1) (336 . 337)) ((#("
" 0 1 (fontified nil)) . 336) (335 . 336) (#("	" 0 1 (fontified t)) . 336)) (25287 2377 360457 0) 0 nil] [nil nil ((#("(if " 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 317) (undo-tree-id136 . 4) (undo-tree-id137 . -4) (undo-tree-id138 . 4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 321) ((317 . 321)) (25285 46604 858896 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -443) (undo-tree-id2397 . -1) (#("	" 0 1 (fontified nil)) . 444) (undo-tree-id2398 . -1) (436 . 444) 437 (t 25292 1217 0 0)) nil (25292 1265 672061 0) 0 nil])
([nil nil ((#("(printf \"The new value of x is: ~a \\n\" x)" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 8 (fontified t) 8 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 40 (fontified t) 40 41 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-4-face))) . 416) (undo-tree-id235 . 39) (undo-tree-id237 . 40) (undo-tree-id239 . -1) (undo-tree-id241 . 40) (undo-tree-id243 . 41)) ((416 . 457)) (25287 2377 328889 0) 0 nil])
nil
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -425) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -426) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -427) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -428) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -429) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) 430) nil (25292 1265 672057 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 416) (undo-tree-id224 . 1) (undo-tree-id226 . 1) (undo-tree-id228 . 1) (undo-tree-id230 . 1) (undo-tree-id232 . 1)) ((416 . 417)) (25287 2377 294751 0) 0 nil])
([nil nil ((425 . 433)) nil (25292 1265 672049 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -410) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -411) (undo-tree-id164 . -1) (undo-tree-id166 . -1) (undo-tree-id168 . -1) (undo-tree-id170 . -1) (undo-tree-id172 . -1) (undo-tree-id174 . -1) (undo-tree-id176 . -1) (#(" " 0 1 (fontified t)) . -412) (undo-tree-id178 . -1) (undo-tree-id180 . -1) (undo-tree-id182 . -1) (undo-tree-id184 . -1) (undo-tree-id186 . -1) (undo-tree-id188 . -1) (#(" " 0 1 (fontified t)) . -413) (undo-tree-id191 . -1) (undo-tree-id193 . -1) (undo-tree-id195 . -1) (undo-tree-id197 . -1) (undo-tree-id199 . -1) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -414) (undo-tree-id203 . -1) (undo-tree-id205 . -1) (undo-tree-id207 . -1) (undo-tree-id209 . -1) (undo-tree-id211 . -1) (#(" " 0 1 (fontified t)) . -415) (undo-tree-id214 . -1) (undo-tree-id216 . -1) (undo-tree-id218 . -1) (undo-tree-id220 . -1) (undo-tree-id222 . -1) 416) ((410 . 416)) (25287 2377 261353 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -407) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) 408) nil (25292 1265 672048 0) 0 nil])
([nil nil ((#("      x" 0 7 (fontified t)) . 410) (undo-tree-id360 . 7) (undo-tree-id362 . 7) (undo-tree-id364 . 7) (undo-tree-id366 . 7) (undo-tree-id368 . 7) (undo-tree-id370 . 7) (undo-tree-id372 . -7) (t 25285 46630 0 0)) ((410 . 417)) (25287 2377 228280 0) 0 nil])
([nil nil ((407 . 409)) nil (25292 1265 672153 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -409) (undo-tree-id340 . -1) (undo-tree-id342 . -1) (undo-tree-id344 . -1) (undo-tree-id346 . -1) (undo-tree-id348 . -1) (undo-tree-id350 . -1) (undo-tree-id352 . -1) (undo-tree-id354 . -1) (undo-tree-id356 . -1) (undo-tree-id358 . -1) 410) ((409 . 410)) (25287 2377 211774 0) 0 nil])
([nil nil ((408 . 416)) nil (25292 1303 17009 0) 0 nil] [nil nil ((408 . 416)) ((#("+ seed 1" 0 8 (fontified t)) . 408)) (25292 1265 672034 0) 0 nil])
([nil nil ((#("(printf \"The initial value of x is: ~a \\n\" x)" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 8 (fontified t) 8 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-3-face))) . 267) (undo-tree-id324 . -45) (undo-tree-id326 . 19) (undo-tree-id328 . 19) (undo-tree-id330 . 19) (undo-tree-id332 . -26) (undo-tree-id334 . 19) (undo-tree-id336 . 19) (undo-tree-id338 . -45)) ((267 . 312)) (25287 2377 163125 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 783 . 784) (nil fontified nil 783 . 784) (nil fontified nil 769 . 783) (nil fontified nil 768 . 769) (768 . 784) (t 25292 1278 0 0)) nil (25292 1306 976263 0) 0 nil] [nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 768) (undo-tree-id2399 . -16) (undo-tree-id2400 . 16) (undo-tree-id2401 . 16) (undo-tree-id2402 . 16) (undo-tree-id2403 . 16) (undo-tree-id2404 . 16) (undo-tree-id2405 . -16) (t 25292 1278 0 0)) ((768 . 784)) (25292 1303 16307 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 267) (undo-tree-id311 . 1) (undo-tree-id313 . 1) (undo-tree-id315 . 1) (undo-tree-id317 . 1) (undo-tree-id319 . 1) (undo-tree-id321 . 1)) ((267 . 268)) (25287 2377 129535 0) 0 nil])
([nil nil ((784 . 785)) nil (25292 1306 976261 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -264) (undo-tree-id269 . -1) (undo-tree-id271 . -1) (undo-tree-id273 . -1) (undo-tree-id275 . -1) (undo-tree-id277 . -1) (undo-tree-id279 . -1) (undo-tree-id281 . -1) (#(" " 0 1 (fontified t)) . -265) (undo-tree-id284 . -1) (undo-tree-id286 . -1) (undo-tree-id288 . -1) (undo-tree-id290 . -1) (undo-tree-id292 . -1) (undo-tree-id294 . -1) (undo-tree-id296 . -1) (#(" " 0 1 (fontified t)) . -266) (undo-tree-id298 . -1) (undo-tree-id300 . -1) (undo-tree-id302 . -1) (undo-tree-id304 . -1) (undo-tree-id306 . -1) (undo-tree-id308 . -1) 267) ((264 . 267)) (25287 2377 97456 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 800 . 801) (nil fontified nil 800 . 801) (nil fontified nil 786 . 800) (nil fontified nil 785 . 786) (785 . 801)) nil (25292 1306 976259 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -273) (undo-tree-id438 . 1) (undo-tree-id440 . -1) (undo-tree-id442 . -1) (undo-tree-id444 . -1) (undo-tree-id446 . -1) (undo-tree-id448 . -1) (undo-tree-id450 . -1) (undo-tree-id452 . -1) (undo-tree-id454 . -1) (undo-tree-id456 . -1) (undo-tree-id458 . -1) (undo-tree-id460 . -1) (undo-tree-id462 . -1) (#("o" 0 1 (fontified t)) . -274) (undo-tree-id464 . 1) (undo-tree-id466 . -1) (undo-tree-id468 . -1) (undo-tree-id470 . -1) (undo-tree-id472 . -1) (undo-tree-id474 . -1) (undo-tree-id476 . -1) (undo-tree-id478 . -1) (undo-tree-id480 . -1) (undo-tree-id482 . -1) (undo-tree-id484 . -1) (undo-tree-id486 . -1) (#("s" 0 1 (fontified t)) . -275) (undo-tree-id488 . 1) (undo-tree-id490 . -1) (undo-tree-id492 . -1) (undo-tree-id494 . -1) (undo-tree-id496 . -1) (undo-tree-id498 . -1) (undo-tree-id500 . -1) (undo-tree-id502 . -1) (undo-tree-id504 . -1) (undo-tree-id506 . -1) (undo-tree-id508 . -1) (#("i" 0 1 (fontified t)) . -276) (undo-tree-id510 . 1) (undo-tree-id512 . -1) (undo-tree-id514 . -1) (undo-tree-id516 . -1) (undo-tree-id518 . -1) (undo-tree-id520 . -1) (undo-tree-id522 . -1) (undo-tree-id524 . -1) (undo-tree-id526 . -1) (undo-tree-id528 . -1) (#("t" 0 1 (fontified t)) . -277) (undo-tree-id530 . 1) (undo-tree-id532 . -1) (undo-tree-id534 . -1) (undo-tree-id536 . -1) (undo-tree-id538 . -1) (undo-tree-id540 . -1) (undo-tree-id542 . -1) (undo-tree-id544 . -1) (undo-tree-id546 . -1) (#("i" 0 1 (fontified t)) . -278) (undo-tree-id548 . 1) (undo-tree-id550 . -1) (undo-tree-id552 . -1) (undo-tree-id554 . -1) (undo-tree-id556 . -1) (undo-tree-id558 . -1) (undo-tree-id560 . -1) (undo-tree-id562 . -1) (#("v" 0 1 (fontified t)) . -279) (undo-tree-id564 . 1) (undo-tree-id566 . -1) (undo-tree-id568 . -1) (undo-tree-id570 . -1) (undo-tree-id572 . -1) (undo-tree-id574 . -1) (undo-tree-id576 . -1) (#("e" 0 1 (fontified t)) . -280) (undo-tree-id578 . 1) (undo-tree-id580 . -1) (undo-tree-id582 . -1) (undo-tree-id584 . -1) (undo-tree-id586 . -1) (undo-tree-id588 . -1) (#("?" 0 1 (fontified t)) . -281) (undo-tree-id590 . 1) (undo-tree-id592 . -1) (undo-tree-id594 . -1) (undo-tree-id596 . -1) (undo-tree-id598 . -1) (#(" " 0 1 (fontified t)) . -282) (undo-tree-id600 . 1) (undo-tree-id602 . -1) (undo-tree-id604 . -1) (undo-tree-id606 . -1) (#("-" 0 1 (fontified t)) . -283) (undo-tree-id608 . 1) (undo-tree-id610 . -1) (undo-tree-id612 . -1) (#("5" 0 1 (fontified t)) . -284) (undo-tree-id614 . 1) (undo-tree-id616 . -1) 285) ((273 . 285)) (25287 2377 64351 0) 0 nil] [nil nil ((nil rear-nonsticky nil 364 . 365) (nil fontified nil 364 . 365) (nil fontified nil 363 . 364) (nil fontified nil 361 . 363) (nil fontified nil 360 . 361) (nil fontified nil 359 . 360) (nil fontified nil 358 . 359) (nil fontified nil 327 . 358) (nil fontified nil 320 . 327) (nil fontified nil 319 . 320) (319 . 365)) ((#("(printf \"The initial value of x is: ~a \\n\" x)
" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 8 (fontified nil) 8 39 (fontified nil face font-lock-string-face) 39 40 (fontified nil face font-lock-string-face) 40 41 (fontified nil face font-lock-string-face) 41 42 (fontified nil face font-lock-string-face) 42 44 (fontified nil) 44 45 (fontified nil face (rainbow-delimiters-depth-3-face)) 45 46 (fontified nil rear-nonsticky nil)) . 319) (undo-tree-id375 . -46) (undo-tree-id376 . -46) (undo-tree-id377 . 46) (undo-tree-id378 . -46) (nil rear-nonsticky t 364 . 365)) (25285 46670 608638 0) 0 nil] [nil nil ((#("    " 0 4 (fontified nil)) . 263) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . 4) (undo-tree-id261 . 4) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (264 . 267) (264 . 265)) ((#("
" 0 1 (fontified nil)) . 264) (undo-tree-id373 . -1) (undo-tree-id374 . 1) (#("   " 0 3 (fontified nil)) . 264) (263 . 267)) (25285 46664 929525 0) 0 nil])
([nil nil ((801 . 802)) nil (25292 1331 331636 0) 0 nil])
([nil nil ((273 . 281)) ((#("= intenr" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 273) (undo-tree-id1404 . -8) (undo-tree-id1405 . -6) (undo-tree-id1406 . 2) (undo-tree-id1407 . -8)) (25287 2377 31438 0) 0 nil])
nil
nil
([nil nil ((#("(begin (set! seed (+ seed 1))
       (print \"Generate \\n\")
       seed)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 12 (fontified t face font-lock-keyword-face) 12 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t) 30 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 44 (fontified t) 44 54 (fontified t face font-lock-string-face) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t) 59 66 (fontified t) 66 70 (fontified t) 70 71 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 389) (undo-tree-id2500 . -71) (undo-tree-id2501 . -30) (undo-tree-id2502 . 71) (undo-tree-id2503 . 71) (undo-tree-id2504 . -66) (undo-tree-id2505 . 71) (undo-tree-id2506 . 71) (undo-tree-id2507 . 71) (undo-tree-id2508 . -71) (t 25292 1306 0 0)) nil (25292 1344 543286 0) 0 nil] [nil nil ((#("(begin (set! seed (+ seed 1))
       (print \"Generate \\n\")
       seed)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 12 (fontified t face font-lock-keyword-face) 12 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t) 30 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 44 (fontified t) 44 54 (fontified t face font-lock-string-face) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t) 59 66 (fontified t) 66 70 (fontified t) 70 71 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 389) (undo-tree-id2453 . -71) (undo-tree-id2454 . -30) (undo-tree-id2455 . 71) (undo-tree-id2456 . 71) (undo-tree-id2457 . -66) (undo-tree-id2459 . 71) (undo-tree-id2461 . 71) (undo-tree-id2463 . -71) (t 25292 1306 0 0)) ((389 . 460)) (25292 1330 816555 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -279) (undo-tree-id430 . 1) (undo-tree-id432 . -1) (#("r" 0 1 (fontified t)) . -280) (undo-tree-id435 . 1) 281) ((279 . 281)) (25287 2376 997258 0) 0 nil])
([nil nil ((nil fontified nil 628 . 629) (nil fontified nil 624 . 628) (nil fontified nil 617 . 624) (nil fontified nil 616 . 617) (nil fontified nil 615 . 616) (nil fontified nil 614 . 615) (nil fontified nil 613 . 614) (nil fontified nil 612 . 613) (nil fontified nil 602 . 612) (nil fontified nil 596 . 602) (nil fontified nil 595 . 596) (nil fontified nil 588 . 595) (nil fontified nil 587 . 588) (nil fontified nil 586 . 587) (nil fontified nil 585 . 586) (nil fontified nil 577 . 585) (nil fontified nil 576 . 577) (nil fontified nil 570 . 576) (nil fontified nil 566 . 570) (nil fontified nil 565 . 566) (nil fontified nil 564 . 565) (nil fontified nil 559 . 564) (nil fontified nil 558 . 559) (558 . 629)) nil (25292 1344 543275 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 703 . 704) (nil fontified nil 703 . 704) (nil fontified nil 702 . 703) (nil fontified nil 701 . 702) (nil fontified nil 690 . 701) (nil fontified nil 689 . 690) (nil fontified nil 688 . 689) (nil fontified nil 687 . 688) (nil fontified nil 686 . 687) (nil fontified nil 685 . 686) (nil fontified nil 678 . 685) (nil fontified nil 672 . 678) (nil fontified nil 671 . 672) (nil fontified nil 664 . 671) (nil fontified nil 663 . 664) (nil fontified nil 662 . 663) (nil fontified nil 655 . 662) (nil fontified nil 651 . 655) (nil fontified nil 650 . 651) (nil fontified nil 649 . 650) (nil fontified nil 644 . 649) (nil fontified nil 643 . 644) (nil fontified nil 642 . 643) (nil fontified nil 641 . 642) (nil fontified nil 629 . 641) (nil fontified nil 628 . 629) (nil fontified nil 627 . 628) (nil fontified nil 626 . 627) (nil fontified nil 622 . 626) (nil fontified nil 621 . 622) (nil fontified nil 615 . 621) (nil fontified nil 614 . 615) (nil fontified nil 613 . 614) (nil fontified nil 611 . 613) (nil fontified nil 603 . 611) (nil fontified nil 602 . 603) (nil fontified nil 601 . 602) (nil fontified nil 595 . 601) (nil fontified nil 594 . 595) (nil fontified nil 590 . 594) (nil fontified nil 589 . 590) (nil fontified nil 588 . 589) (nil fontified nil 587 . 588) (nil fontified nil 585 . 587) (nil fontified nil 581 . 585) (nil fontified nil 580 . 581) (nil fontified nil 579 . 580) (nil fontified nil 578 . 579) (nil fontified nil 575 . 578) (nil fontified nil 574 . 575) (nil fontified nil 572 . 574) (nil fontified nil 571 . 572) (nil fontified nil 570 . 571) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 561 . 567) (nil fontified nil 560 . 561) (nil fontified nil 559 . 560) (nil fontified nil 558 . 559) (558 . 704)) ((#("

(define (r)
  (let ((seed 0))
    (define (dispatch m)
      (cond ((eq? m 'reset) (begin (set! seed 0)
				   (print \"Reset \\n\")
				   seed))
" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil face (rainbow-delimiters-depth-6-face)) 3 9 (fontified nil face font-lock-keyword-face) 9 10 (fontified nil) 10 11 (fontified nil face (rainbow-delimiters-depth-7-face)) 11 12 (fontified nil face font-lock-function-name-face) 12 13 (fontified nil face (rainbow-delimiters-depth-7-face)) 13 14 (fontified nil) 14 16 (fontified nil) 16 17 (fontified nil face (rainbow-delimiters-depth-7-face)) 17 20 (fontified nil face font-lock-keyword-face) 20 21 (fontified nil) 21 22 (fontified nil face (rainbow-delimiters-depth-8-face)) 22 23 (fontified nil face (rainbow-delimiters-depth-9-face)) 23 27 (fontified nil) 27 29 (fontified nil) 29 30 (fontified nil face (rainbow-delimiters-depth-9-face)) 30 31 (fontified nil face (rainbow-delimiters-depth-8-face)) 31 32 (fontified nil) 32 36 (fontified nil) 36 37 (fontified nil face (rainbow-delimiters-depth-8-face)) 37 43 (fontified nil face font-lock-keyword-face) 43 44 (fontified nil) 44 45 (fontified nil face (rainbow-delimiters-depth-9-face)) 45 53 (fontified nil face font-lock-function-name-face) 53 55 (fontified nil) 55 56 (fontified nil face (rainbow-delimiters-depth-9-face)) 56 57 (fontified nil) 57 63 (fontified nil) 63 64 (fontified nil face (rainbow-delimiters-depth-9-face)) 64 68 (fontified nil face font-lock-keyword-face) 68 69 (fontified nil) 69 70 (fontified nil face (rainbow-delimiters-depth-1-face)) 70 71 (fontified nil face (rainbow-delimiters-depth-2-face)) 71 83 (fontified nil) 83 84 (fontified nil face (rainbow-delimiters-depth-2-face)) 84 85 (fontified nil) 85 86 (fontified nil face (rainbow-delimiters-depth-2-face)) 86 91 (fontified nil face font-lock-keyword-face) 91 92 (fontified nil) 92 93 (fontified nil face (rainbow-delimiters-depth-3-face)) 93 97 (fontified nil face font-lock-keyword-face) 97 104 (fontified nil) 104 105 (fontified nil face (rainbow-delimiters-depth-3-face)) 105 106 (fontified nil) 106 113 (fontified nil) 113 114 (fontified nil face (rainbow-delimiters-depth-3-face)) 114 120 (fontified nil) 120 127 (fontified nil face font-lock-string-face) 127 128 (fontified nil face font-lock-string-face) 128 129 (fontified nil face font-lock-string-face) 129 130 (fontified nil face font-lock-string-face) 130 131 (fontified nil face (rainbow-delimiters-depth-3-face)) 131 132 (fontified nil) 132 143 (fontified nil) 143 144 (fontified nil face (rainbow-delimiters-depth-2-face)) 144 145 (fontified nil face (rainbow-delimiters-depth-1-face)) 145 146 (fontified nil rear-nonsticky nil)) . 558) (undo-tree-id2464 . -146) (undo-tree-id2465 . -146) (undo-tree-id2466 . 146) (undo-tree-id2467 . -146) (nil fontified t 558 . 559) (nil fontified t 559 . 560) (nil fontified t 571 . 572) (nil fontified t 589 . 590) (nil fontified t 614 . 615) (nil fontified t 663 . 664) (nil fontified t 689 . 690) (nil rear-nonsticky t 703 . 704)) (25292 1330 815554 0) 0 nil] [nil nil ((#("

(define (r)
  (let ((seed 0))
    (define (dispatch m)
      (cond ((eq? m 'reset) (begin (set! seed 0)
				   (print \"Reset \\n\")
				   seed))
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t) 14 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t face (rainbow-delimiters-depth-4-face)) 23 27 (fontified t) 27 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-4-face)) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-3-face)) 37 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-4-face)) 45 53 (fontified t face font-lock-function-name-face) 53 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-4-face)) 56 57 (fontified t) 57 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-4-face)) 64 68 (fontified t face font-lock-keyword-face) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-5-face)) 70 71 (fontified t face (rainbow-delimiters-depth-6-face)) 71 83 (fontified t) 83 84 (fontified t face (rainbow-delimiters-depth-6-face)) 84 85 (fontified t) 85 86 (fontified t face (rainbow-delimiters-depth-6-face)) 86 91 (fontified t face font-lock-keyword-face) 91 92 (fontified t) 92 93 (fontified t face (rainbow-delimiters-depth-7-face)) 93 97 (fontified t face font-lock-keyword-face) 97 104 (fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-7-face)) 105 106 (fontified t) 106 113 (fontified t) 113 114 (fontified t face (rainbow-delimiters-depth-7-face)) 114 120 (fontified t) 120 127 (fontified t face font-lock-string-face) 127 128 (fontified t face font-lock-string-face) 128 129 (fontified t face font-lock-string-face) 129 130 (fontified t face font-lock-string-face) 130 131 (fontified t face (rainbow-delimiters-depth-7-face)) 131 132 (fontified t) 132 143 (fontified t) 143 144 (fontified t face (rainbow-delimiters-depth-6-face)) 144 145 (fontified t face (rainbow-delimiters-depth-5-face)) 145 146 (fontified t)) . 389) (undo-tree-id2406 . -10) (undo-tree-id2407 . -146) (undo-tree-id2408 . 146) (undo-tree-id2409 . 146) (undo-tree-id2410 . 146) (undo-tree-id2411 . 146) (undo-tree-id2412 . -14) (undo-tree-id2413 . -85) (undo-tree-id2414 . -144) (undo-tree-id2415 . 146) (undo-tree-id2416 . 146) (undo-tree-id2417 . -146) (undo-tree-id2418 . 146) (undo-tree-id2419 . 146) (undo-tree-id2420 . 146) (undo-tree-id2421 . 146) (undo-tree-id2422 . 146) (undo-tree-id2423 . 146) (undo-tree-id2424 . 146) (undo-tree-id2425 . 145) (undo-tree-id2426 . 146) (undo-tree-id2427 . -1) (undo-tree-id2428 . 144) (undo-tree-id2429 . 145) (undo-tree-id2430 . -2) (undo-tree-id2431 . 132) (undo-tree-id2432 . 144) (undo-tree-id2433 . -14) (undo-tree-id2434 . 114) (undo-tree-id2435 . 132) (undo-tree-id2436 . -32) (undo-tree-id2437 . 89) (undo-tree-id2438 . 114) (undo-tree-id2439 . -57) (undo-tree-id2440 . 40) (undo-tree-id2441 . 89) (undo-tree-id2442 . -106) (undo-tree-id2443 . 14) (undo-tree-id2444 . 40) (undo-tree-id2445 . -132) (undo-tree-id2446 . 14) (undo-tree-id2447 . -146) (undo-tree-id2448 . 146) (undo-tree-id2449 . -146) (undo-tree-id2450 . 146) (undo-tree-id2451 . -146) (undo-tree-id2452 . -146) 535) ((389 . 535)) (25292 1323 544407 0) 0 nil])
([nil nil ((279 . 286)) ((#("rnal -1" 0 7 (fontified t)) . 279)) (25287 2376 965512 0) 0 nil])
([nil nil ((#("(print \"GENERATE\")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 7 (fontified t) 7 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face (rainbow-delimiters-depth-6-face))) . 630) (undo-tree-id2490 . -18) (undo-tree-id2491 . -18) (undo-tree-id2492 . 18) (undo-tree-id2493 . 18) (undo-tree-id2494 . 18) (undo-tree-id2495 . 18) (undo-tree-id2496 . 18) (undo-tree-id2497 . 18) (undo-tree-id2498 . 18) (undo-tree-id2499 . -18)) nil (25292 1344 543410 0) 0 nil])
nil
nil
([nil nil ((#("(lambda ()
      (set! x (rand-update x)))" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 10 (fontified t face (rainbow-delimiters-depth-4-face)) 10 11 (fontified t) 11 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-4-face)) 18 22 (fontified t face font-lock-keyword-face) 22 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-5-face)) 26 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-5-face)) 40 41 (fontified t face (rainbow-delimiters-depth-4-face)) 41 42 (fontified t face (rainbow-delimiters-depth-3-face))) . 320) (undo-tree-id418 . -11) (undo-tree-id420 . -41) (undo-tree-id422 . -42) (undo-tree-id424 . 42) (undo-tree-id426 . 42) (undo-tree-id428 . -42)) ((320 . 362)) (25287 2376 932045 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -629) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . 1) (undo-tree-id2559 . 1) (undo-tree-id2560 . 1) (undo-tree-id2561 . 1) (undo-tree-id2562 . 1) (undo-tree-id2563 . 1) (undo-tree-id2564 . 1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . 1) (undo-tree-id2568 . 1) (undo-tree-id2569 . 1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . 1) (undo-tree-id2576 . 1) (undo-tree-id2577 . -1) 630) nil (25292 1352 634692 0) 0 nil] [nil nil ((#("d" 0 1 (fontified t)) . -627) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (#(" " 0 1 (fontified t)) . -629) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . 1) (undo-tree-id2475 . 1) (undo-tree-id2476 . 1) (undo-tree-id2477 . 1) (undo-tree-id2478 . 1) (undo-tree-id2479 . 1) (undo-tree-id2480 . 1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . 1) (undo-tree-id2484 . 1) (undo-tree-id2485 . 1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) 630) ((629 . 630) (627 . 628)) (25292 1344 543256 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -319) (undo-tree-id404 . -1) (undo-tree-id406 . -1) (undo-tree-id408 . -1) (undo-tree-id410 . -1) (undo-tree-id412 . -1) (undo-tree-id414 . -1) (undo-tree-id416 . -1) 320) ((319 . 320)) (25287 2376 899760 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -616) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (#(" " 0 1 (fontified t)) . -617) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (#(" " 0 1 (fontified t)) . -618) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (#(" " 0 1 (fontified t)) . -619) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (#(" " 0 1 (fontified t)) . -620) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (#(" " 0 1 (fontified t)) . -621) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (#(" " 0 1 (fontified t)) . -622) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (#(" " 0 1 (fontified t)) . -623) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) 624) nil (25292 1352 634670 0) 0 nil])
nil
([nil nil ((#("(error \"doesn't get here\")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 7 (fontified t) 7 25 (fontified t face font-lock-string-face) 25 26 (fontified t face (rainbow-delimiters-depth-4-face))) . 289) (undo-tree-id638 . -26)) ((289 . 315)) (25287 2376 865556 0) 0 nil] [nil nil ((#("	(error \"doesn't get here\")
	2)" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-4-face)) 2 8 (fontified t) 8 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-4-face)) 27 28 (fontified t) 28 30 (fontified t) 30 31 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-3-face))) . 288) (undo-tree-id379 . -31) (undo-tree-id380 . -28) (undo-tree-id381 . -31) (undo-tree-id382 . -31) (undo-tree-id383 . -31) (undo-tree-id384 . -31) (undo-tree-id385 . -31) (undo-tree-id386 . -31) (undo-tree-id387 . -31) (undo-tree-id388 . -31) (undo-tree-id389 . -31) (undo-tree-id390 . -31) (undo-tree-id391 . -31) (undo-tree-id392 . -31) (undo-tree-id393 . 28) (undo-tree-id394 . -3) (undo-tree-id395 . 29) (undo-tree-id396 . 28) (undo-tree-id397 . -2) (undo-tree-id398 . 29) (undo-tree-id399 . 16) (undo-tree-id400 . -15) (undo-tree-id401 . 31) (undo-tree-id402 . 16)) ((288 . 319)) (25285 46724 507651 0) 0 nil])
([nil nil ((619 . 628) (588 . 597) (#("       " 0 7 (fontified nil)) . 588) (616 . 617)) nil (25292 1352 634625 0) 0 nil])
([nil nil ((288 . 289)) ((#("f" 0 1 (fontified t)) . 288) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1)) (25287 2376 832623 0) 0 nil])
nil
([nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face))) . 787) (undo-tree-id2578 . -16) (undo-tree-id2579 . -16) (undo-tree-id2580 . 16) (undo-tree-id2581 . 16) (undo-tree-id2582 . 16) (undo-tree-id2583 . 16) (undo-tree-id2584 . 16) (undo-tree-id2585 . -16) (t 25292 1352 0 0)) nil (25292 1372 69031 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -288) 289) ((288 . 289)) (25287 2376 800813 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 802 . 803) (nil fontified nil 802 . 803) (nil fontified nil 788 . 802) (nil fontified nil 787 . 788) (787 . 803)) nil (25292 1372 69016 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 338 . 339) (nil fontified nil 338 . 339) (nil fontified nil 330 . 338) (nil fontified nil 329 . 330) (nil fontified nil 328 . 329) (nil fontified nil 315 . 328) (nil fontified nil 314 . 315) (nil fontified nil 311 . 314) (nil fontified nil 307 . 311) (nil fontified nil 306 . 307) (nil fontified nil 300 . 306) (nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 297 . 298) (nil fontified nil 296 . 297) (nil fontified nil 290 . 296) (nil fontified nil 289 . 290) (289 . 339)) ((#("(lambda ()
      (set! x (rand-update x))
      x)" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-5-face) fontified nil) 9 10 (face (rainbow-delimiters-depth-5-face) fontified nil) 10 11 (fontified nil) 11 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-5-face) fontified nil) 18 22 (face font-lock-keyword-face fontified nil) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil) 25 26 (face (rainbow-delimiters-depth-6-face) fontified nil) 26 38 (fontified nil) 38 39 (fontified nil) 39 40 (face (rainbow-delimiters-depth-6-face) fontified nil) 40 41 (face (rainbow-delimiters-depth-5-face) fontified nil) 41 42 (fontified nil) 42 48 (fontified nil) 48 49 (fontified nil) 49 50 (rear-nonsticky nil face (rainbow-delimiters-depth-4-face) fontified nil)) . 289) (undo-tree-id1368 . -11) (undo-tree-id1369 . 1) (undo-tree-id1370 . -42) (undo-tree-id1371 . 1) (undo-tree-id1372 . 2) (undo-tree-id1373 . -49) (undo-tree-id1374 . 26) (undo-tree-id1375 . 1) (undo-tree-id1376 . -23) (undo-tree-id1377 . 26) (undo-tree-id1378 . 26) (undo-tree-id1379 . -23) (undo-tree-id1380 . 26) (undo-tree-id1381 . 26) (undo-tree-id1382 . -23) (undo-tree-id1383 . 26) (undo-tree-id1384 . 26) (undo-tree-id1385 . -23) (undo-tree-id1386 . 26) (undo-tree-id1387 . 27) (undo-tree-id1388 . -24) (undo-tree-id1389 . 11) (undo-tree-id1390 . 26) (undo-tree-id1391 . -38) (undo-tree-id1392 . 11) (undo-tree-id1393 . 12) (undo-tree-id1394 . -39) (undo-tree-id1395 . 11) (undo-tree-id1396 . -50) (undo-tree-id1397 . 31) (undo-tree-id1398 . -19) (undo-tree-id1399 . 50) (undo-tree-id1400 . 31) (undo-tree-id1401 . 50) (nil fontified t 299 . 300) (nil fontified t 330 . 331) (nil rear-nonsticky nil 338 . 339)) (25287 2376 766902 0) 0 nil])
([nil nil ((803 . 804)) nil (25292 1372 69014 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -294) (undo-tree-id625 . -1) (undo-tree-id627 . -1) (#(" " 0 1 (fontified nil)) . -295) (undo-tree-id629 . -1) (undo-tree-id631 . -1) (#("	" 0 1 (fontified nil)) . 296) (undo-tree-id633 . -1) (undo-tree-id635 . -1) (288 . 296) 289) ((#("        " 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 288) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (294 . 297)) (25287 2376 733808 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 819 . 820) (nil fontified nil 819 . 820) (nil fontified nil 805 . 819) (nil fontified nil 804 . 805) (804 . 820)) nil (25292 1372 69009 0) 0 nil])
([nil nil ((294 . 296)) ((#("  " 0 2 (fontified t)) . 294)) (25287 2376 701095 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -811) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (#("e" 0 1 (fontified t)) . -812) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (#("n" 0 1 (fontified t)) . -813) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (#("e" 0 1 (fontified t)) . -814) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (#("r" 0 1 (fontified t)) . -815) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (#("a" 0 1 (fontified t)) . -816) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (#("t" 0 1 (fontified t)) . -817) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (#("e" 0 1 (fontified t)) . -818) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) 819 (t 25292 1372 0 0)) nil (25292 1398 634629 0) 0 nil])
([nil nil ((307 . 310) (#("      " 0 6 (fontified t)) . 307) 315) ((307 . 313) (#("	  " 0 3 (fontified t)) . 307)) (25287 2376 668237 0) 0 nil])
([nil nil ((811 . 816)) nil (25292 1398 634610 0) 0 nil])
([nil nil ((335 . 338) (#("      " 0 6 (fontified t)) . 335) 343) ((335 . 341) (#("	  " 0 3 (fontified t)) . 335) (undo-tree-id1365 . -3)) (25287 2376 635375 0) 0 nil])
([nil nil ((#("(rand 'generate)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 15 (fontified t) 15 16 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face))) . 787) (undo-tree-id2586 . -16) (undo-tree-id2587 . 4) (undo-tree-id2588 . -12) (undo-tree-id2589 . -12) (undo-tree-id2590 . 9) (undo-tree-id2591 . 4) (undo-tree-id2592 . -16) (undo-tree-id2593 . -7) (undo-tree-id2594 . 10) (undo-tree-id2595 . 9) (undo-tree-id2596 . -6) (undo-tree-id2597 . 15) (undo-tree-id2598 . 10) (undo-tree-id2599 . -1) (undo-tree-id2600 . 16) (undo-tree-id2601 . 15)) nil (25292 1398 634607 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -331) 332) ((331 . 332)) (25287 2376 602166 0) 0 nil])
([nil nil ((nil fontified nil 802 . 803) (nil fontified nil 788 . 802) (nil fontified nil 787 . 788) (787 . 803)) nil (25292 1398 634585 0) 0 nil])
([nil nil ((331 . 335)) ((#("seed" 0 4 (fontified t)) . 331)) (25287 2376 569773 0) 0 nil])
([nil nil ((817 . 818)) nil (25292 1398 634583 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -316) 317) ((316 . 317)) (25287 2376 536015 0) 0 nil])
([nil nil ((nil fontified nil 833 . 834) (nil fontified nil 819 . 833) (nil fontified nil 818 . 819) (818 . 834)) nil (25292 1422 30184 0) 0 nil])
([nil nil ((316 . 320)) ((#("seed" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 316) (undo-tree-id1360 . -4) (undo-tree-id1361 . 4) (undo-tree-id1362 . -3) (undo-tree-id1363 . 1) (undo-tree-id1364 . -4)) (25287 2376 504214 0) 0 nil])
([nil nil ((#("(print \"Generate \\n\")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 7 (fontified t) 7 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face (rainbow-delimiters-depth-7-face))) . 597) (undo-tree-id3082 . -21) (undo-tree-id3083 . 21) (undo-tree-id3084 . 21) (undo-tree-id3085 . 21) (undo-tree-id3086 . 21) (undo-tree-id3087 . 21) (undo-tree-id3088 . 21) (undo-tree-id3089 . 21) (undo-tree-id3090 . -21) (t 25292 1398 0 0)) nil (25292 1439 803727 0) 0 nil] [nil nil ((#("(print \"Generate \\n\")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 7 (fontified t) 7 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face (rainbow-delimiters-depth-7-face))) . 597) (undo-tree-id2627 . -21) (undo-tree-id2628 . 21) (undo-tree-id2629 . 21) (undo-tree-id2630 . 21) (undo-tree-id2631 . 21) (undo-tree-id2632 . 21) (undo-tree-id2633 . -21) (t 25292 1398 0 0)) ((597 . 618)) (25292 1421 490168 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -319) 320) ((319 . 320)) (25287 2376 470343 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 597) (undo-tree-id3067 . -1) (undo-tree-id3068 . 1) (undo-tree-id3069 . 1) (undo-tree-id3070 . 1) (undo-tree-id3071 . 1) (undo-tree-id3072 . 1) (undo-tree-id3073 . 1) (undo-tree-id3074 . 1) (undo-tree-id3075 . 1) (undo-tree-id3076 . 1) (undo-tree-id3077 . 1) (undo-tree-id3078 . 1) (undo-tree-id3079 . 1) (undo-tree-id3080 . 1) (undo-tree-id3081 . -1)) nil (25292 1439 803719 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 597) (undo-tree-id2618 . -1) (undo-tree-id2619 . 1) (undo-tree-id2620 . 1) (undo-tree-id2621 . 1) (undo-tree-id2622 . 1) (undo-tree-id2623 . 1) (undo-tree-id2624 . 1) (undo-tree-id2625 . 1) (undo-tree-id2626 . -1)) ((597 . 598)) (25292 1421 489910 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -316) (#("e" 0 1 (fontified t)) . -317) (#("e" 0 1 (fontified t)) . -318) 319) ((316 . 319)) (25287 2376 438043 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -596) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) 597) nil (25292 1439 803708 0) 0 nil])
nil
([nil nil ((316 . 324)) ((#("internal" 0 8 (fontified t)) . 316)) (25287 2376 404573 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -600) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (#(" " 0 1 (fontified t)) . -601) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (#(" " 0 1 (fontified t)) . -602) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (#(" " 0 1 (fontified t)) . -603) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (#(" " 0 1 (fontified t)) . -604) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) 605) nil (25292 1439 803699 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -348) 349) ((348 . 349)) (25287 2376 371069 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -599) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (#(" " 0 1 (fontified t)) . -600) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (#(" " 0 1 (fontified t)) . -601) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (#(" " 0 1 (fontified t)) . -602) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (#(" " 0 1 (fontified t)) . -603) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (#(" " 0 1 (fontified t)) . -604) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (#(" " 0 1 (fontified t)) . -605) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (#(" " 0 1 (fontified nil)) . -606) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (#("	" 0 1 (fontified nil)) . 607) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (599 . 607) 600) nil (25292 1439 803679 0) 0 nil])
([nil nil ((348 . 356)) ((#("internal" 0 8 (fontified t)) . 348)) (25287 2376 338336 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -598) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (#(" " 0 1 (fontified t)) . -599) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (#(" " 0 1 (fontified t)) . -600) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (#(" " 0 1 (fontified t)) . -601) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (#(" " 0 1 (fontified t)) . -602) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (#(" " 0 1 (fontified t)) . -603) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (#(" " 0 1 (fontified t)) . -604) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (#(" " 0 1 (fontified nil)) . -605) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (#("	" 0 1 (fontified nil)) . 606) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (598 . 606) 599) nil (25292 1439 803607 0) 0 nil])
([nil nil ((287 . 288) (#(" " 0 1 (fontified nil)) . -267) (287 . 288) (t 25285 46796 0 0)) ((#("
" 0 1 (fontified nil)) . 287) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . 1) (undo-tree-id1318 . 1) (undo-tree-id1319 . 1) (undo-tree-id1320 . 1) (undo-tree-id1321 . 1) (undo-tree-id1322 . 1) (undo-tree-id1323 . 1) (undo-tree-id1324 . 1) (undo-tree-id1325 . 1) (undo-tree-id1326 . 1) (undo-tree-id1327 . 1) (undo-tree-id1328 . 1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (267 . 268) (#("	" 0 1 (fontified t)) . 287) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1)) (25287 2376 304786 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -600) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (#(" " 0 1 (fontified t)) . -601) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (#(" " 0 1 (fontified t)) . -602) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (#(" " 0 1 (fontified t)) . -603) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (#(" " 0 1 (fontified nil)) . -604) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (#("	" 0 1 (fontified nil)) . 605) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (597 . 605) 598) nil (25292 1439 803486 0) 0 nil])
([nil nil ((288 . 290)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 288) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . 1) (undo-tree-id1267 . -1) (undo-tree-id1268 . 1) (undo-tree-id1269 . 1) (undo-tree-id1270 . -1) (undo-tree-id1271 . 1) (undo-tree-id1272 . 1) (undo-tree-id1273 . -1) (undo-tree-id1274 . 1) (undo-tree-id1275 . 1) (undo-tree-id1276 . -1) (undo-tree-id1277 . 1) (undo-tree-id1278 . 1) (undo-tree-id1279 . -1) (undo-tree-id1280 . 1) (undo-tree-id1281 . 1) (undo-tree-id1282 . -1) (undo-tree-id1283 . 1) (undo-tree-id1284 . 1) (undo-tree-id1285 . -1) (undo-tree-id1286 . 1) (undo-tree-id1287 . 1) (undo-tree-id1288 . -1) (undo-tree-id1289 . 1) (undo-tree-id1290 . 1) (undo-tree-id1291 . -1) (undo-tree-id1292 . 1) (undo-tree-id1293 . 1) (undo-tree-id1294 . -1) (undo-tree-id1295 . 1) (undo-tree-id1296 . 1) (undo-tree-id1297 . -1) (undo-tree-id1298 . 1) (undo-tree-id1299 . 1) (undo-tree-id1300 . -1) (undo-tree-id1301 . 1) (undo-tree-id1302 . 1) (undo-tree-id1303 . -1) (undo-tree-id1304 . 1) (undo-tree-id1305 . 1) (undo-tree-id1306 . -1) (undo-tree-id1307 . 1) (undo-tree-id1308 . 1) (undo-tree-id1309 . -1)) (25287 2376 272465 0) 0 nil])
([nil nil ((#("(print \"Reset \\n\")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 7 (fontified t) 7 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face (rainbow-delimiters-depth-7-face))) . 502) (undo-tree-id3763 . -18) (undo-tree-id3764 . -18) (t 25292 1439 0 0)) nil (25292 1459 200492 0) 0 nil])
([nil nil ((289 . 295)) ((#("print " 0 6 (fontified t)) . 289) (undo-tree-id1246 . -6) (undo-tree-id1247 . -6) (undo-tree-id1248 . -6) (undo-tree-id1249 . -6) (undo-tree-id1250 . 1) (undo-tree-id1251 . -5) (undo-tree-id1252 . 1) (undo-tree-id1253 . -6) (undo-tree-id1254 . -6) (undo-tree-id1255 . -6) (undo-tree-id1256 . -6) (undo-tree-id1257 . -6) (undo-tree-id1258 . -6) (undo-tree-id1259 . -6) (undo-tree-id1260 . -6) (undo-tree-id1261 . -6) (undo-tree-id1262 . -6) (undo-tree-id1263 . -6)) (25287 2376 239451 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id3762 . -1)) nil (25292 1459 200490 0) 0 nil])
([nil nil ((295 . 297)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 295) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . 1) (undo-tree-id1214 . -1) (undo-tree-id1215 . 1) (undo-tree-id1216 . 1) (undo-tree-id1217 . -1) (undo-tree-id1218 . 1) (undo-tree-id1219 . -2) (undo-tree-id1220 . 1) (undo-tree-id1221 . -1) (undo-tree-id1222 . 1) (undo-tree-id1223 . 1) (undo-tree-id1224 . -1) (undo-tree-id1225 . 1) (undo-tree-id1226 . 1) (undo-tree-id1227 . -1) (undo-tree-id1228 . 1) (undo-tree-id1229 . 1) (undo-tree-id1230 . -1) (undo-tree-id1231 . 1) (undo-tree-id1232 . 1) (undo-tree-id1233 . -1) (undo-tree-id1234 . 1) (undo-tree-id1235 . 1) (undo-tree-id1236 . -1) (undo-tree-id1237 . 1) (undo-tree-id1238 . 1) (undo-tree-id1239 . -1) (undo-tree-id1240 . 1) (undo-tree-id1241 . 1) (undo-tree-id1242 . -1) (undo-tree-id1243 . 1) (undo-tree-id1244 . 1) (undo-tree-id1245 . -1)) (25287 2376 206219 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -506) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) 509) nil (25292 1459 200487 0) 0 nil])
([nil nil ((296 . 307)) ((#("The value i" 0 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t)) . 296) (undo-tree-id1198 . -11) (undo-tree-id1199 . -10) (undo-tree-id1200 . -10) (undo-tree-id1201 . -10) (undo-tree-id1202 . -10) (undo-tree-id1203 . -10) (undo-tree-id1204 . -10) (undo-tree-id1205 . -10) (undo-tree-id1206 . -10) (undo-tree-id1207 . -10) (undo-tree-id1208 . -10) (undo-tree-id1209 . 1) (undo-tree-id1210 . -11)) (25287 2376 173242 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -505) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (#(" " 0 1 (fontified t)) . -506) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (#(" " 0 1 (fontified t)) . -509) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (#(" " 0 1 (fontified t)) . -510) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (#(" " 0 1 (fontified t)) . -511) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (#(" " 0 1 (fontified nil)) . -512) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (#("	" 0 1 (fontified nil)) . 513) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (505 . 513) 506) nil (25292 1459 200475 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -306) (undo-tree-id676 . 1) 307) ((306 . 307)) (25287 2376 140005 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -504) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (#(" " 0 1 (fontified t)) . -506) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (#(" " 0 1 (fontified t)) . -509) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (#(" " 0 1 (fontified t)) . -510) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (#(" " 0 1 (fontified nil)) . -511) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (#("	" 0 1 (fontified nil)) . 512) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (504 . 512) 505) nil (25292 1459 200415 0) 0 nil])
([nil nil ((306 . 321)) ((#("of internal is " 0 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 15 (face font-lock-string-face fontified t)) . 306) (undo-tree-id1186 . -15) (undo-tree-id1187 . -11) (undo-tree-id1188 . -11) (undo-tree-id1189 . -11) (undo-tree-id1190 . -11) (undo-tree-id1191 . -11) (undo-tree-id1192 . -11) (undo-tree-id1193 . 4) (undo-tree-id1194 . -14) (undo-tree-id1195 . -14) (undo-tree-id1196 . 1) (undo-tree-id1197 . -15)) (25287 2376 107236 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -509) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (#(" " 0 1 (fontified nil)) . -510) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (#("	" 0 1 (fontified nil)) . 511) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (503 . 511) 504) nil (25292 1459 200314 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -320) (undo-tree-id673 . 1) 321) ((320 . 321)) (25287 2376 74310 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -503) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (#(" " 0 1 (fontified t)) . -504) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (#(" " 0 1 (fontified t)) . -506) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) 509) nil (25292 1459 200262 0) 0 nil])
([nil nil ((320 . 321)) ((#(" " 0 1 (face font-lock-string-face fontified t)) . 320) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1)) (25287 2376 41833 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -503) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (#(" " 0 1 (fontified t)) . -504) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (#(" " 0 1 (fontified nil)) . -506) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (#("	" 0 1 (fontified nil)) . 507) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (502 . 507) 503) nil (25292 1459 636743 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -317) (undo-tree-id643 . 1) (undo-tree-id645 . -1) (undo-tree-id647 . -1) (undo-tree-id649 . -1) (undo-tree-id651 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -318) (undo-tree-id654 . 1) (undo-tree-id656 . -1) (undo-tree-id658 . -1) (undo-tree-id660 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -319) (undo-tree-id663 . 1) (undo-tree-id665 . -1) (undo-tree-id667 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -320) (undo-tree-id670 . 1) 321) ((317 . 321)) (25287 2376 8072 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -552) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (#(" " 0 1 (fontified t)) . -553) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (#("s" 0 1 (fontified t)) . -554) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (#("e" 0 1 (fontified t)) . -555) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (#("e" 0 1 (fontified t)) . -556) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (#("d" 0 1 (fontified t)) . -557) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (#(" " 0 1 (fontified t)) . -558) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (#("1" 0 1 (fontified t)) . -559) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) 560 (t 25292 1462 0 0)) nil (25292 1484 616363 0) 0 nil] [nil nil ((#("0)
				    " 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-7-face)) 2 3 (fontified t) 3 10 (fontified t) 10 11 (fontified t)) . -492) (undo-tree-id3127 . -10) (undo-tree-id3128 . -3) (undo-tree-id3129 . -11) (undo-tree-id3130 . -10) (undo-tree-id3131 . -11) (undo-tree-id3132 . -11) (undo-tree-id3133 . -11) (undo-tree-id3134 . -11) (undo-tree-id3135 . -11) (undo-tree-id3136 . -11) (undo-tree-id3137 . -11) (undo-tree-id3138 . -11) (undo-tree-id3139 . -11) (undo-tree-id3140 . -11) (undo-tree-id3141 . -11) (undo-tree-id3142 . -11) (undo-tree-id3143 . -11) (undo-tree-id3144 . -11) (undo-tree-id3145 . -11) (undo-tree-id3146 . -11) (undo-tree-id3147 . -11) (undo-tree-id3148 . -11) (undo-tree-id3149 . -11) (undo-tree-id3150 . -11) (undo-tree-id3151 . -11) (undo-tree-id3152 . -11) (undo-tree-id3153 . -11) (undo-tree-id3154 . -11) (undo-tree-id3155 . -11) (undo-tree-id3156 . -11) (undo-tree-id3157 . -11) (undo-tree-id3158 . -11) (undo-tree-id3159 . -11) (undo-tree-id3160 . -11) (undo-tree-id3161 . -11) (undo-tree-id3162 . -11) 503) ((492 . 503)) (25292 1459 200666 0) 0 nil])
([nil nil ((317 . 318)) ((#(";" 0 1 (face font-lock-string-face fontified t)) . 317) (undo-tree-id1181 . -1) (undo-tree-id1182 . 1) (undo-tree-id1183 . -1)) (25287 2375 974320 0) 0 nil])
([nil nil ((552 . 557)) nil (25292 1484 616318 0) 0 nil])
([nil nil ((492 . 498) (#(" " 0 1 (fontified nil)) . 491) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (492 . 493)) ((#("
" 0 1 (fontified nil)) . 492) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . 1) (undo-tree-id3768 . -1) (491 . 492) (#("					 " 0 6 (fontified t)) . 492) (undo-tree-id3769 . -6) (undo-tree-id3770 . -6)) (25292 1459 200014 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-string-face)) . -317) (undo-tree-id640 . 1) 318) ((317 . 318)) (25287 2375 941794 0) 0 nil])
([nil nil ((552 . 563) (#("rand-" 0 5 (fontified t)) . -552) (undo-tree-id3771 . -5) (undo-tree-id3772 . 5) (undo-tree-id3773 . -3) (undo-tree-id3774 . 2) (undo-tree-id3775 . -4) (undo-tree-id3776 . 1) (undo-tree-id3777 . -5) 557) nil (25292 1484 616316 0) 0 nil])
nil
([nil nil ((317 . 321)) ((#(": ~a" 0 4 (face font-lock-string-face fontified t)) . 317) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4)) (25287 2375 909981 0) 0 nil])
([nil nil ((563 . 568)) nil (25292 1484 616300 0) 0 nil])
([nil nil ((322 . 331)) ((#(" internal" 0 9 (fontified t)) . 322)) (25287 2375 876183 0) 0 nil])
([nil nil ((#("(rand 'reset)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 12 (fontified t) 12 13 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 694) (undo-tree-id3838 . -13) (undo-tree-id3839 . 8) (undo-tree-id3840 . 7) (undo-tree-id3841 . 8) (undo-tree-id3842 . 8) (undo-tree-id3843 . 8) (undo-tree-id3844 . 8) (undo-tree-id3845 . -5) (undo-tree-id3846 . -13) (t 25292 1484 0 0)) nil (25292 2721 558577 0) 0 nil])
([nil nil ((286 . 288) (t 25285 46870 0 0)) ((#("
	" 0 1 (fontified t) 1 2 (fontified t)) . 286) (undo-tree-id1171 . -1) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -2) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2)) (25287 2375 843086 0) 0 nil])
([nil nil ((694 . 696)) nil (25292 2721 558563 0) 0 nil])
([nil nil ((288 . 290)) ((#("be" 0 1 (fontified t) 1 2 (fontified t)) . 288) (undo-tree-id1168 . -2) (undo-tree-id1169 . 2) (undo-tree-id1170 . -2)) (25287 2375 810764 0) 0 nil])
([nil nil ((nil fontified nil 707 . 708) (nil fontified nil 696 . 707) (nil fontified nil 695 . 696) (695 . 708)) nil (25292 2721 558561 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -288) (undo-tree-id686 . 1) (undo-tree-id688 . 1) (undo-tree-id690 . -1) (#("e" 0 1 (fontified t)) . -289) (undo-tree-id692 . 1) 290) ((288 . 290)) (25287 2375 777261 0) 0 nil])
([nil nil ((708 . 710)) nil (25292 2721 558678 0) 0 nil])
([nil nil ((288 . 290)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 288) (undo-tree-id1164 . -1) (undo-tree-id1165 . -2) (undo-tree-id1166 . 1) (undo-tree-id1167 . -1)) (25287 2375 744654 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 762 . 763) (nil fontified nil 762 . 763) (nil fontified nil 760 . 762) (nil fontified nil 759 . 760) (nil fontified nil 748 . 759) (nil fontified nil 747 . 748) (nil fontified nil 746 . 747) (746 . 763)) nil (25292 2735 491207 0) 0 nil] [nil nil ((nil fontified nil 706 . 707) (nil fontified nil 695 . 706) (nil fontified nil 694 . 695) (694 . 707)) ((#("(rand 'reset)" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face)) 1 12 (fontified nil) 12 13 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 694) (undo-tree-id3847 . -13) (undo-tree-id3848 . 13) (undo-tree-id3849 . -13) (nil fontified t 706 . 707)) (25292 2721 558553 0) 0 nil])
([nil nil ((289 . 295)) ((#("begin " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 289)) (25287 2375 712072 0) 0 nil])
([nil nil ((763 . 764)) nil (25292 2735 491204 0) 0 nil])
nil
([nil nil ((408 . 410) (368 . 370) (352 . 354) (413 . 414) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -343) (297 . 299) (341 . 342) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -295) (undo-tree-id679 . 1) (undo-tree-id681 . 1) (undo-tree-id683 . 1)) ((295 . 296) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 341) (#("  " 0 2 (fontified nil)) . 297) (343 . 344) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 413) (#("  " 0 2 (fontified t)) . 352) (#("  " 0 2 (fontified t)) . 368) (#("  " 0 2 (fontified t)) . 408)) (25287 2375 677994 0) 0 nil])
([nil nil ((#("(rand 'reset)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 12 (fontified t) 12 13 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 781) (undo-tree-id3858 . -13) (undo-tree-id3859 . 13) (undo-tree-id3860 . 13) (undo-tree-id3861 . 13) (undo-tree-id3862 . -13)) nil (25292 2735 491202 0) 0 nil])
([nil nil ((305 . 306) (t 25285 46910 0 0)) ((#("f" 0 1 (fontified t)) . 305)) (25287 2375 644901 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 781) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . 1) (undo-tree-id3853 . 1) (undo-tree-id3854 . 1) (undo-tree-id3855 . 1) (undo-tree-id3856 . 1) (undo-tree-id3857 . -1)) nil (25292 2735 491193 0) 0 nil])
([nil nil ((333 . 334) (t 25285 46941 0 0)) ((#(" " 0 1 (face font-lock-string-face fontified t)) . 333) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1)) (25287 2375 611634 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -761) (undo-tree-id3863 . -1) (undo-tree-id3864 . 1) (undo-tree-id3865 . 1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) 762 (t 25292 2735 0 0)) nil (25292 2743 212550 0) 0 nil])
([nil nil ((334 . 336)) ((#("\\n" 0 2 (face font-lock-string-face fontified t)) . 334)) (25287 2375 578587 0) 0 nil])
([nil nil ((761 . 762)) nil (25292 2743 212534 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -426) 427 (t 25285 46965 0 0)) ((426 . 427)) (25287 2375 547844 0) 0 nil])
([nil nil ((#("(begin (set! seed 0)
				    seed)" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-7-face)) 8 12 (fontified t face font-lock-keyword-face) 12 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-7-face)) 20 21 (fontified t) 21 28 (fontified t) 28 29 (fontified t) 29 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-6-face))) . 474) (undo-tree-id3868 . -34) (undo-tree-id3869 . -21) (undo-tree-id3870 . -28) (undo-tree-id3871 . -28) (undo-tree-id3872 . -34) (t 25292 2743 0 0)) nil (25292 2761 519264 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 561 . 562) (nil fontified nil 561 . 562) (nil fontified nil 560 . 561) (nil fontified nil 547 . 560) (nil fontified nil 546 . 547) (nil fontified nil 545 . 546) (nil fontified nil 544 . 545) (nil fontified nil 528 . 544) (nil fontified nil 527 . 528) (nil fontified nil 517 . 527) (nil fontified nil 513 . 517) (nil fontified nil 512 . 513) (nil fontified nil 507 . 512) (nil fontified nil 506 . 507) (nil fontified nil 505 . 506) (nil fontified nil 504 . 505) (nil fontified nil 503 . 504) (nil fontified nil 497 . 503) (nil fontified nil 496 . 497) (nil fontified nil 486 . 496) (nil fontified nil 485 . 486) (nil fontified nil 484 . 485) (nil fontified nil 475 . 484) (nil fontified nil 474 . 475) (nil fontified nil 473 . 474) (nil fontified nil 472 . 473) (nil fontified nil 445 . 472) (nil fontified nil 438 . 445) (nil fontified nil 437 . 438) (nil fontified nil 434 . 437) (nil fontified nil 433 . 434) (nil fontified nil 432 . 433) (nil fontified nil 427 . 432) (nil fontified nil 426 . 427) (426 . 562)) ((#("(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update seed))
	    internal))" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-5-face) fontified nil) 12 19 (fontified nil) 19 49 (face font-lock-string-face fontified nil) 49 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-5-face) fontified nil) 59 60 (fontified nil) 60 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-5-face) fontified nil) 71 75 (face font-lock-keyword-face fontified nil) 75 77 (face font-lock-keyword-face fontified nil) 77 78 (fontified nil) 78 79 (face (rainbow-delimiters-depth-6-face) fontified nil) 79 80 (face (rainbow-delimiters-depth-6-face) fontified nil) 80 81 (fontified nil) 81 86 (fontified nil) 86 87 (face (rainbow-delimiters-depth-6-face) fontified nil) 87 91 (face font-lock-keyword-face fontified nil) 91 101 (fontified nil) 101 102 (face (rainbow-delimiters-depth-7-face) fontified nil) 102 114 (fontified nil) 114 115 (fontified nil) 115 116 (fontified nil) 116 117 (fontified nil) 117 118 (fontified nil) 118 119 (face (rainbow-delimiters-depth-7-face) fontified nil) 119 120 (face (rainbow-delimiters-depth-6-face) fontified nil) 120 121 (fontified nil) 121 134 (fontified nil) 134 135 (face (rainbow-delimiters-depth-5-face) fontified nil) 135 136 (rear-nonsticky nil face (rainbow-delimiters-depth-4-face) fontified nil)) . 426) (undo-tree-id1150 . -81) (undo-tree-id1151 . -121) (undo-tree-id1152 . -118) (undo-tree-id1153 . 18) (undo-tree-id1154 . -114) (undo-tree-id1155 . 18) (undo-tree-id1156 . 18) (undo-tree-id1157 . -114) (undo-tree-id1158 . 18) (undo-tree-id1159 . 22) (undo-tree-id1160 . -118) (nil fontified t 433 . 434) (nil fontified t 485 . 486) (nil fontified t 506 . 507) (nil fontified t 546 . 547) (nil rear-nonsticky nil 561 . 562)) (25287 2375 513003 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 422 . 423) (nil fontified nil 422 . 423) (nil fontified nil 418 . 422) (nil fontified nil 417 . 418) (nil fontified nil 410 . 417) (nil fontified nil 409 . 410) (nil fontified nil 408 . 409) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 401 . 406) (nil fontified nil 397 . 401) (nil fontified nil 396 . 397) (nil fontified nil 395 . 396) (nil fontified nil 390 . 395) (nil fontified nil 389 . 390) (389 . 423)) nil (25292 2774 710939 0) 0 nil] [nil nil ((nil rear-nonsticky nil 422 . 423) (nil fontified nil 422 . 423) (nil fontified nil 418 . 422) (nil fontified nil 417 . 418) (nil fontified nil 410 . 417) (nil fontified nil 409 . 410) (nil fontified nil 408 . 409) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 401 . 406) (nil fontified nil 397 . 401) (nil fontified nil 396 . 397) (nil fontified nil 395 . 396) (nil fontified nil 390 . 395) (nil fontified nil 389 . 390) (389 . 423)) ((#("(begin (set! seed 0)
				    seed)" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face)) 1 6 (fontified nil face font-lock-keyword-face) 6 7 (fontified nil) 7 8 (fontified nil face (rainbow-delimiters-depth-2-face)) 8 12 (fontified nil face font-lock-keyword-face) 12 17 (fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil face (rainbow-delimiters-depth-2-face)) 20 21 (fontified nil) 21 28 (fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-1-face))) . 389) (nil fontified t 409 . 410) (nil rear-nonsticky t 422 . 423)) (25292 2761 518959 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -540) (#("e" 0 1 (fontified t)) . -541) (#("e" 0 1 (fontified t)) . -542) (#("d" 0 1 (fontified t)) . -543) 544) ((540 . 544)) (25287 2375 479989 0) 0 nil])
([nil nil ((411 . 418) (#("       " 0 7 (fontified nil)) . 410) (undo-tree-id3885 . -7) (undo-tree-id3886 . -7) (undo-tree-id3887 . -7) (undo-tree-id3888 . -7) (#("				    " 0 1 (fontified nil) 1 7 (fontified nil) 7 8 (fontified nil)) . -417) (undo-tree-id3889 . -8) (undo-tree-id3890 . -8) (undo-tree-id3891 . -8) (undo-tree-id3892 . -8) (417 . 418) (#("	" 0 1 (fontified nil)) . 417) (410 . 417) (418 . 419)) nil (25292 2778 762299 0) 0 nil] [nil nil ((#("0)
				    " 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t) 3 10 (fontified t) 10 11 (fontified t)) . -407) (undo-tree-id3876 . -3) (undo-tree-id3877 . -11) (undo-tree-id3878 . -11) (undo-tree-id3879 . -11) 418) ((407 . 418)) (25292 2774 710694 0) 0 nil] [nil nil ((#("0)
				    " 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t) 3 10 (fontified t) 10 11 (fontified t)) . -407) (undo-tree-id3873 . -3) (undo-tree-id3874 . -11) (undo-tree-id3875 . -11) 418) ((407 . 418)) (25292 2772 55536 0) 0 nil])
nil
([nil nil ((540 . 543)) ((#("int" 0 3 (fontified t)) . 540) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3)) (25287 2375 446679 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 410) (undo-tree-id3880 . -1) (undo-tree-id3881 . 1) (undo-tree-id3882 . 1) (undo-tree-id3883 . 1) (undo-tree-id3884 . -1)) nil (25292 2778 762287 0) 0 nil])
nil
nil
([nil nil ((543 . 548)) ((#("ernal" 0 5 (fontified t)) . 543)) (25287 2375 413819 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 436 . 437) (nil fontified nil 436 . 437) (nil fontified nil 435 . 436) (nil fontified nil 429 . 435) (nil fontified nil 428 . 429) (nil fontified nil 427 . 428) (nil fontified nil 426 . 427) (nil fontified nil 413 . 426) (nil fontified nil 412 . 413) (nil fontified nil 409 . 412) (nil fontified nil 405 . 409) (nil fontified nil 404 . 405) (nil fontified nil 398 . 404) (nil fontified nil 397 . 398) (nil fontified nil 396 . 397) (nil fontified nil 395 . 396) (nil fontified nil 394 . 395) (nil fontified nil 388 . 394) (nil fontified nil 387 . 388) (387 . 437) (t 25292 2778 0 0)) nil (25292 2867 947579 0) 0 nil])
([nil nil ((214 . 216) (t 25285 47171 0 0)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 214) (undo-tree-id1069 . 1) (undo-tree-id1070 . 1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -2) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . 1) (undo-tree-id1082 . -1) (undo-tree-id1083 . 1) (undo-tree-id1084 . 1) (undo-tree-id1085 . -1) (undo-tree-id1086 . 1) (undo-tree-id1087 . 1) (undo-tree-id1088 . -1) (undo-tree-id1089 . 1) (undo-tree-id1090 . 1) (undo-tree-id1091 . -1) (undo-tree-id1092 . 1) (undo-tree-id1093 . 1) (undo-tree-id1094 . -1) (undo-tree-id1095 . 1) (undo-tree-id1096 . 1) (undo-tree-id1097 . -1) (undo-tree-id1098 . 1) (undo-tree-id1099 . 1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . 1) (undo-tree-id1104 . 1) (undo-tree-id1105 . -1) (undo-tree-id1106 . 1) (undo-tree-id1107 . 1) (undo-tree-id1108 . -1) (undo-tree-id1109 . 1) (undo-tree-id1110 . 1) (undo-tree-id1111 . -1) (undo-tree-id1112 . 1) (undo-tree-id1113 . 1) (undo-tree-id1114 . -1) (undo-tree-id1115 . 1) (undo-tree-id1116 . 1) (undo-tree-id1117 . -1) (undo-tree-id1118 . 1) (undo-tree-id1119 . 1) (undo-tree-id1120 . -1) (undo-tree-id1121 . 1) (undo-tree-id1122 . 1) (undo-tree-id1123 . -1) (undo-tree-id1124 . 1) (undo-tree-id1125 . 1) (undo-tree-id1126 . -1) (undo-tree-id1127 . 1) (undo-tree-id1128 . 1) (undo-tree-id1129 . -1) (undo-tree-id1130 . 1) (undo-tree-id1131 . 1) (undo-tree-id1132 . -1) (undo-tree-id1133 . 1) (undo-tree-id1134 . 1) (undo-tree-id1135 . -1) (undo-tree-id1136 . 1) (undo-tree-id1137 . 1) (undo-tree-id1138 . -1) (undo-tree-id1139 . 1) (undo-tree-id1140 . 1) (undo-tree-id1141 . -1) (undo-tree-id1142 . 1) (undo-tree-id1143 . 1) (undo-tree-id1144 . -1) (undo-tree-id1145 . 1) (undo-tree-id1146 . 1) (undo-tree-id1147 . -1)) (25287 2375 381285 0) 0 nil])
([nil nil ((#("(set! x (rand-update x))" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 5 (fontified t face font-lock-keyword-face) 5 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face))) . 404) (undo-tree-id3947 . -24) (undo-tree-id3948 . -24)) nil (25292 2867 947574 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 568 . 569) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 566 . 567) (nil fontified nil 565 . 566) (nil fontified nil 564 . 565) (nil fontified nil 551 . 564) (nil fontified nil 550 . 551) (nil fontified nil 549 . 550) (nil fontified nil 548 . 549) (nil fontified nil 528 . 548) (nil fontified nil 527 . 528) (nil fontified nil 517 . 527) (nil fontified nil 513 . 517) (nil fontified nil 512 . 513) (nil fontified nil 507 . 512) (nil fontified nil 506 . 507) (nil fontified nil 505 . 506) (nil fontified nil 504 . 505) (nil fontified nil 503 . 504) (nil fontified nil 501 . 503) (nil fontified nil 497 . 501) (nil fontified nil 496 . 497) (nil fontified nil 485 . 496) (nil fontified nil 484 . 485) (nil fontified nil 475 . 484) (nil fontified nil 445 . 475) (nil fontified nil 438 . 445) (nil fontified nil 437 . 438) (nil fontified nil 432 . 437) (nil fontified nil 427 . 432) (nil fontified nil 426 . 427) (nil fontified nil 424 . 426) (nil fontified nil 423 . 424) (nil fontified nil 422 . 423) (nil fontified nil 408 . 422) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 390 . 406) (nil fontified nil 389 . 390) (nil fontified nil 379 . 389) (nil fontified nil 375 . 379) (nil fontified nil 374 . 375) (nil fontified nil 368 . 374) (nil fontified nil 367 . 368) (nil fontified nil 366 . 367) (nil fontified nil 365 . 366) (nil fontified nil 359 . 365) (nil fontified nil 358 . 359) (nil fontified nil 347 . 358) (nil fontified nil 346 . 347) (nil fontified nil 337 . 346) (nil fontified nil 307 . 337) (nil fontified nil 300 . 307) (nil fontified nil 299 . 300) (nil fontified nil 294 . 299) (nil fontified nil 289 . 294) (nil fontified nil 288 . 289) (nil fontified nil 286 . 288) (nil fontified nil 285 . 286) (nil fontified nil 272 . 285) (nil fontified nil 271 . 272) (nil fontified nil 270 . 271) (nil fontified nil 268 . 270) (nil fontified nil 267 . 268) (nil fontified nil 262 . 267) (nil fontified nil 261 . 262) (nil fontified nil 260 . 261) (nil fontified nil 249 . 260) (nil fontified nil 248 . 249) (nil fontified nil 247 . 248) (nil fontified nil 246 . 247) (nil fontified nil 243 . 246) (nil fontified nil 242 . 243) (nil fontified nil 239 . 242) (nil fontified nil 238 . 239) (nil fontified nil 233 . 238) (nil fontified nil 224 . 233) (nil fontified nil 223 . 224) (nil fontified nil 222 . 223) (nil fontified nil 216 . 222) (nil fontified nil 215 . 216) (215 . 569)) ((#("(define (rand-seed seed)
  (let ((internal -1))
    (if (= internal -1)
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update seed))
	    internal))
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update internal))
	    internal)))))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-2-face) fontified nil) 9 18 (face font-lock-function-name-face fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil) 21 22 (fontified nil) 22 23 (fontified nil) 23 24 (face (rainbow-delimiters-depth-2-face) fontified nil) 24 25 (fontified nil) 25 26 (fontified nil) 26 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-2-face) fontified nil) 28 31 (face font-lock-keyword-face fontified nil) 31 32 (fontified nil) 32 33 (face (rainbow-delimiters-depth-3-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-4-face) fontified nil) 34 45 (fontified nil) 45 46 (face (rainbow-delimiters-depth-4-face) fontified nil) 46 47 (face (rainbow-delimiters-depth-3-face) fontified nil) 47 48 (fontified nil) 48 52 (fontified nil) 52 53 (face (rainbow-delimiters-depth-3-face) fontified nil) 53 55 (face font-lock-keyword-face fontified nil) 55 56 (fontified nil) 56 57 (face (rainbow-delimiters-depth-4-face) fontified nil) 57 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-4-face) fontified nil) 71 72 (fontified nil) 72 73 (fontified nil) 73 74 (face (rainbow-delimiters-depth-4-face) fontified nil) 74 79 (face font-lock-keyword-face fontified nil) 79 81 (fontified nil) 81 84 (fontified nil) 84 85 (face (rainbow-delimiters-depth-5-face) fontified nil) 85 92 (fontified nil) 92 122 (face font-lock-string-face fontified nil) 122 131 (fontified nil) 131 132 (face (rainbow-delimiters-depth-5-face) fontified nil) 132 133 (fontified nil) 133 143 (fontified nil) 143 144 (face (rainbow-delimiters-depth-5-face) fontified nil) 144 150 (face font-lock-keyword-face fontified nil) 150 151 (fontified nil) 151 152 (face (rainbow-delimiters-depth-6-face) fontified nil) 152 153 (face (rainbow-delimiters-depth-6-face) fontified nil) 153 154 (fontified nil) 154 159 (fontified nil) 159 160 (face (rainbow-delimiters-depth-6-face) fontified nil) 160 164 (face font-lock-keyword-face fontified nil) 164 174 (fontified nil) 174 175 (face (rainbow-delimiters-depth-7-face) fontified nil) 175 191 (fontified nil) 191 192 (face (rainbow-delimiters-depth-7-face) fontified nil) 192 193 (face (rainbow-delimiters-depth-6-face) fontified nil) 193 194 (fontified nil) 194 207 (fontified nil) 207 208 (face (rainbow-delimiters-depth-5-face) fontified nil) 208 209 (face (rainbow-delimiters-depth-4-face) fontified nil) 209 210 (fontified nil) 210 211 (fontified nil) 211 212 (face (rainbow-delimiters-depth-4-face) fontified nil) 212 217 (face font-lock-keyword-face fontified nil) 217 219 (fontified nil) 219 222 (fontified nil) 222 223 (face (rainbow-delimiters-depth-5-face) fontified nil) 223 230 (fontified nil) 230 260 (face font-lock-string-face fontified nil) 260 269 (fontified nil) 269 270 (face (rainbow-delimiters-depth-5-face) fontified nil) 270 271 (fontified nil) 271 281 (fontified nil) 281 282 (face (rainbow-delimiters-depth-5-face) fontified nil) 282 286 (face font-lock-keyword-face fontified nil) 286 288 (face font-lock-keyword-face fontified nil) 288 289 (fontified nil) 289 290 (face (rainbow-delimiters-depth-6-face) fontified nil) 290 291 (face (rainbow-delimiters-depth-6-face) fontified nil) 291 292 (fontified nil) 292 297 (fontified nil) 297 298 (face (rainbow-delimiters-depth-6-face) fontified nil) 298 302 (face font-lock-keyword-face fontified nil) 302 312 (fontified nil) 312 313 (face (rainbow-delimiters-depth-7-face) fontified nil) 313 333 (fontified nil) 333 334 (face (rainbow-delimiters-depth-7-face) fontified nil) 334 335 (face (rainbow-delimiters-depth-6-face) fontified nil) 335 336 (fontified nil) 336 349 (fontified nil) 349 350 (face (rainbow-delimiters-depth-5-face) fontified nil) 350 351 (face (rainbow-delimiters-depth-4-face) fontified nil) 351 352 (face (rainbow-delimiters-depth-3-face) fontified nil) 352 353 (face (rainbow-delimiters-depth-2-face) fontified nil) 353 354 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 215) (undo-tree-id995 . 329) (undo-tree-id996 . 329) (undo-tree-id997 . -25) (undo-tree-id998 . -25) (undo-tree-id999 . -48) (undo-tree-id1000 . -27) (undo-tree-id1001 . -25) (undo-tree-id1002 . -25) (undo-tree-id1003 . -25) (undo-tree-id1004 . -25) (undo-tree-id1005 . 1) (undo-tree-id1006 . -25) (undo-tree-id1007 . 1) (undo-tree-id1008 . 1) (undo-tree-id1009 . -25) (undo-tree-id1010 . 1) (undo-tree-id1011 . 1) (undo-tree-id1012 . -25) (undo-tree-id1013 . 1) (undo-tree-id1014 . 1) (undo-tree-id1015 . -25) (undo-tree-id1016 . 1) (undo-tree-id1017 . 1) (undo-tree-id1018 . -25) (undo-tree-id1019 . 1) (undo-tree-id1020 . 1) (undo-tree-id1021 . -25) (undo-tree-id1022 . 1) (undo-tree-id1023 . 1) (undo-tree-id1024 . -25) (undo-tree-id1025 . -25) (undo-tree-id1026 . -25) (undo-tree-id1027 . 329) (undo-tree-id1028 . 1) (undo-tree-id1029 . -25) (undo-tree-id1030 . 329) (undo-tree-id1031 . 329) (undo-tree-id1032 . -25) (undo-tree-id1033 . 329) (undo-tree-id1034 . 329) (undo-tree-id1035 . -25) (undo-tree-id1036 . 1) (undo-tree-id1037 . 329) (undo-tree-id1038 . -27) (undo-tree-id1039 . 329) (undo-tree-id1040 . 1) (undo-tree-id1041 . -25) (undo-tree-id1042 . 329) (undo-tree-id1043 . 329) (undo-tree-id1044 . -25) (undo-tree-id1045 . 329) (undo-tree-id1046 . 329) (undo-tree-id1047 . -25) (undo-tree-id1048 . 329) (undo-tree-id1049 . 329) (undo-tree-id1050 . -25) (undo-tree-id1051 . 329) (undo-tree-id1052 . 329) (undo-tree-id1053 . -25) (undo-tree-id1054 . 331) (undo-tree-id1055 . 329) (undo-tree-id1056 . -19) (undo-tree-id1057 . 331) (undo-tree-id1058 . 331) (undo-tree-id1059 . -19) (undo-tree-id1060 . 331) (undo-tree-id1061 . 331) (undo-tree-id1062 . -19) (undo-tree-id1063 . 331) (undo-tree-id1064 . 331) (undo-tree-id1065 . -23) (undo-tree-id1066 . 327) (undo-tree-id1067 . 331) (undo-tree-id1068 . -27) (nil fontified t 239 . 240) (nil fontified t 262 . 263) (nil fontified t 286 . 287) (nil fontified t 294 . 296) (nil fontified t 347 . 348) (nil fontified t 368 . 369) (nil fontified t 408 . 409) (nil fontified t 424 . 425) (nil fontified t 432 . 434) (nil fontified t 485 . 486) (nil fontified t 506 . 507) (nil fontified t 550 . 551) (nil rear-nonsticky t 568 . 569)) (25287 2375 348187 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 411)) nil (25292 2867 947572 0) 0 nil])
([nil nil ((#("(let ((internal -1))
    (if (= internal -1)
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update seed))
	    internal))
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update internal))
	    internal))))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-4-face) fontified t) 44 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-4-face) fontified t) 47 52 (face font-lock-keyword-face fontified t) 52 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t) 58 65 (fontified t) 65 95 (face font-lock-string-face fontified t) 95 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-5-face) fontified t) 105 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-5-face) fontified t) 117 123 (face font-lock-keyword-face fontified t) 123 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-6-face) fontified t) 125 126 (face (rainbow-delimiters-depth-6-face) fontified t) 126 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-6-face) fontified t) 133 137 (face font-lock-keyword-face fontified t) 137 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-7-face) fontified t) 148 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-7-face) fontified t) 165 166 (face (rainbow-delimiters-depth-6-face) fontified t) 166 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-5-face) fontified t) 181 182 (face (rainbow-delimiters-depth-4-face) fontified t) 182 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-4-face) fontified t) 185 190 (face font-lock-keyword-face fontified t) 190 195 (fontified t) 195 196 (face (rainbow-delimiters-depth-5-face) fontified t) 196 203 (fontified t) 203 233 (face font-lock-string-face fontified t) 233 242 (fontified t) 242 243 (face (rainbow-delimiters-depth-5-face) fontified t) 243 254 (fontified t) 254 255 (face (rainbow-delimiters-depth-5-face) fontified t) 255 259 (face font-lock-keyword-face fontified t) 259 261 (face font-lock-keyword-face fontified t) 261 262 (fontified t) 262 263 (face (rainbow-delimiters-depth-6-face) fontified t) 263 264 (face (rainbow-delimiters-depth-6-face) fontified t) 264 265 (fontified t) 265 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-6-face) fontified t) 271 275 (face font-lock-keyword-face fontified t) 275 285 (fontified t) 285 286 (face (rainbow-delimiters-depth-7-face) fontified t) 286 306 (fontified t) 306 307 (face (rainbow-delimiters-depth-7-face) fontified t) 307 308 (face (rainbow-delimiters-depth-6-face) fontified t) 308 309 (fontified t) 309 322 (fontified t) 322 323 (face (rainbow-delimiters-depth-5-face) fontified t) 323 324 (face (rainbow-delimiters-depth-4-face) fontified t) 324 325 (face (rainbow-delimiters-depth-3-face) fontified t) 325 326 (face (rainbow-delimiters-depth-2-face) fontified t)) . 242) (undo-tree-id37 . -21) (undo-tree-id38 . -326) (undo-tree-id40 . -326)) ((242 . 568)) (25287 2375 314986 0) 0 nil] [nil nil ((#("let ((internal -1))
    (if (= internal -1)
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update seed))
	    internal))
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update internal))
	    internal))))" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 51 (face font-lock-keyword-face fontified t) 51 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-5-face) fontified t) 57 64 (fontified t) 64 94 (face font-lock-string-face fontified t) 94 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-5-face) fontified t) 104 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-5-face) fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-6-face) fontified t) 124 125 (face (rainbow-delimiters-depth-6-face) fontified t) 125 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-6-face) fontified t) 132 136 (face font-lock-keyword-face fontified t) 136 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-7-face) fontified t) 147 163 (fontified t) 163 164 (face (rainbow-delimiters-depth-7-face) fontified t) 164 165 (face (rainbow-delimiters-depth-6-face) fontified t) 165 179 (fontified t) 179 180 (face (rainbow-delimiters-depth-5-face) fontified t) 180 181 (face (rainbow-delimiters-depth-4-face) fontified t) 181 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-4-face) fontified t) 184 189 (face font-lock-keyword-face fontified t) 189 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-5-face) fontified t) 195 202 (fontified t) 202 232 (face font-lock-string-face fontified t) 232 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-5-face) fontified t) 242 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-5-face) fontified t) 254 258 (face font-lock-keyword-face fontified t) 258 260 (face font-lock-keyword-face fontified t) 260 261 (fontified t) 261 262 (face (rainbow-delimiters-depth-6-face) fontified t) 262 263 (face (rainbow-delimiters-depth-6-face) fontified t) 263 264 (fontified t) 264 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-6-face) fontified t) 270 274 (face font-lock-keyword-face fontified t) 274 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-7-face) fontified t) 285 305 (fontified t) 305 306 (face (rainbow-delimiters-depth-7-face) fontified t) 306 307 (face (rainbow-delimiters-depth-6-face) fontified t) 307 308 (fontified t) 308 321 (fontified t) 321 322 (face (rainbow-delimiters-depth-5-face) fontified t) 322 323 (face (rainbow-delimiters-depth-4-face) fontified t) 323 324 (face (rainbow-delimiters-depth-3-face) fontified t) 324 325 (face (rainbow-delimiters-depth-2-face) fontified t)) . 243) (undo-tree-id0 . -20) (undo-tree-id1 . -325) (undo-tree-id2 . 305) (undo-tree-id3 . -20) (undo-tree-id4 . 305) (undo-tree-id5 . 322) (undo-tree-id6 . -3) (undo-tree-id7 . 325) (undo-tree-id8 . 322) (undo-tree-id9 . 325) (undo-tree-id10 . 322) (undo-tree-id11 . -3) (undo-tree-id12 . 325) (undo-tree-id13 . 322) (undo-tree-id14 . 325) (undo-tree-id15 . -325) (undo-tree-id16 . 325) (undo-tree-id17 . 325) (undo-tree-id18 . 325)) ((243 . 568)) (25287 318 440913 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -397) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (#(" " 0 1 (fontified t)) . -398) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (#(" " 0 1 (fontified t)) . -399) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (#(" " 0 1 (fontified t)) . -400) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (#(" " 0 1 (fontified t)) . -401) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (#(" " 0 1 (fontified t)) . -402) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (#(" " 0 1 (fontified t)) . -403) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (#("
" 0 1 (fontified t)) . -404) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (#(" " 0 1 (fontified t)) . -405) (undo-tree-id3941 . -1) (#(" " 0 1 (fontified t)) . -406) (undo-tree-id3942 . -1) (#(" " 0 1 (fontified t)) . -407) (undo-tree-id3943 . -1) (#(" " 0 1 (fontified t)) . -408) (undo-tree-id3944 . -1) (#(" " 0 1 (fontified t)) . -409) (undo-tree-id3945 . -1) (#(" " 0 1 (fontified t)) . -410) (undo-tree-id3946 . -1) 411) nil (25292 2867 947568 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -234) (undo-tree-id33 . -1) (#("e" 0 1 (fontified t)) . -235) (undo-tree-id34 . -1) (#("e" 0 1 (fontified t)) . -236) (undo-tree-id35 . -1) (#("d" 0 1 (fontified t)) . -237) (undo-tree-id36 . -1) 238) ((234 . 238)) (25287 2375 282160 0) 0 nil])
nil
([nil nil ((397 . 398)) nil (25292 2867 947541 0) 0 nil])
([nil nil ((234 . 238)) ((#("rand" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 234) (undo-tree-id993 . -4) (undo-tree-id994 . -4)) (25287 2375 248601 0) 0 nil])
([nil nil ((396 . 398)) nil (25292 2867 947540 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -234) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t)) . -235) (undo-tree-id30 . -1) (#("n" 0 1 (fontified t)) . -236) (undo-tree-id31 . -1) (#("d" 0 1 (fontified t)) . -237) (undo-tree-id32 . -1) 238) ((234 . 238)) (25287 2375 215608 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -396) (undo-tree-id3915 . -1) (#("x" 0 1 (fontified t)) . -397) (undo-tree-id3916 . -1) 398) nil (25292 2867 947539 0) 0 nil])
([nil nil ((234 . 238)) ((#("seed" 0 4 (fontified t)) . 234)) (25287 2375 183372 0) 0 nil])
([nil nil ((396 . 397)) nil (25292 2867 947537 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 324 . 325) (nil fontified nil 324 . 325) (nil fontified nil 323 . 324) (nil fontified nil 322 . 323) (nil fontified nil 314 . 322) (nil fontified nil 313 . 314) (nil fontified nil 312 . 313) (nil fontified nil 299 . 312) (nil fontified nil 298 . 299) (nil fontified nil 295 . 298) (nil fontified nil 291 . 295) (nil fontified nil 290 . 291) (nil fontified nil 283 . 290) (nil fontified nil 282 . 283) (nil fontified nil 281 . 282) (nil fontified nil 280 . 281) (nil fontified nil 274 . 280) (nil fontified nil 273 . 274) (nil fontified nil 268 . 273) (nil fontified nil 267 . 268) (nil fontified nil 266 . 267) (nil fontified nil 262 . 266) (nil fontified nil 261 . 262) (nil fontified nil 260 . 261) (nil fontified nil 259 . 260) (nil fontified nil 256 . 259) (nil fontified nil 255 . 256) (nil fontified nil 252 . 255) (nil fontified nil 248 . 252) (nil fontified nil 247 . 248) (nil fontified nil 241 . 247) (nil fontified nil 240 . 241) (240 . 325)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-3-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-4-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-5-face) fontified nil) 22 24 (fontified nil) 24 25 (fontified nil) 25 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-5-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-4-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-4-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-5-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-5-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-5-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 56 (fontified nil) 56 57 (fontified nil) 57 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-6-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-6-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-5-face) fontified nil) 74 75 (fontified nil) 75 81 (fontified nil) 81 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-4-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-3-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 240) (undo-tree-id960 . 85) (undo-tree-id961 . 85) (undo-tree-id962 . -13) (undo-tree-id963 . -10) (undo-tree-id964 . -85) (undo-tree-id965 . -85) (undo-tree-id966 . -85) (undo-tree-id967 . -85) (undo-tree-id968 . -85) (undo-tree-id969 . -85) (undo-tree-id970 . -85) (undo-tree-id971 . -13) (undo-tree-id972 . -24) (undo-tree-id973 . 59) (undo-tree-id974 . -24) (undo-tree-id975 . 59) (undo-tree-id976 . 59) (undo-tree-id977 . -26) (undo-tree-id978 . 59) (undo-tree-id979 . 1) (undo-tree-id980 . -84) (undo-tree-id981 . 1) (undo-tree-id982 . 25) (undo-tree-id983 . -60) (undo-tree-id984 . 42) (undo-tree-id985 . 25) (undo-tree-id986 . -43) (undo-tree-id987 . 60) (undo-tree-id988 . 42) (undo-tree-id989 . -25) (undo-tree-id990 . 75) (undo-tree-id991 . 60) (undo-tree-id992 . -10) (nil fontified t 252 . 253) (nil fontified t 268 . 269) (nil fontified t 283 . 284) (nil fontified t 314 . 315) (nil rear-nonsticky t 324 . 325)) (25287 2375 149425 0) 0 nil])
([nil nil ((nil fontified nil 431 . 432) (nil fontified nil 427 . 431) (nil fontified nil 420 . 427) (nil fontified nil 419 . 420) (nil fontified nil 418 . 419) (nil fontified nil 417 . 418) (nil fontified nil 416 . 417) (nil fontified nil 411 . 416) (nil fontified nil 407 . 411) (nil fontified nil 406 . 407) (nil fontified nil 405 . 406) (nil fontified nil 400 . 405) (nil fontified nil 399 . 400) (399 . 432)) nil (25292 2867 947535 0) 0 nil])
([nil nil ((240 . 242) 250) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 240) (undo-tree-id955 . 1) (undo-tree-id956 . 1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1)) (25287 2375 116653 0) 0 nil])
([nil nil ((420 . 425) (#("       " 0 7 (fontified t)) . 420) 432) nil (25292 2867 947532 0) 0 nil])
([nil nil ((257 . 259) 267) ((#("  " 0 2 (fontified t)) . 257)) (25287 2375 83920 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -417) (undo-tree-id3914 . -1) 418) nil (25292 2867 947531 0) 0 nil])
([nil nil ((277 . 279) 287) ((#("  " 0 2 (fontified t)) . 277)) (25287 2375 50808 0) 0 nil])
([nil nil ((417 . 418)) nil (25292 2867 947529 0) 0 nil])
([nil nil ((290 . 291) (#("      " 0 6 (fontified t)) . 290) 306) ((290 . 296) (#("	" 0 1 (fontified t)) . 290)) (25287 2375 17559 0) 0 nil])
([nil nil ((#("(begin (set! seed 0)
       seed)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 12 (fontified t face font-lock-keyword-face) 12 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 28 (fontified t) 28 32 (fontified t) 32 33 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 433) (undo-tree-id3910 . -33) (undo-tree-id3911 . -21) (undo-tree-id3912 . -33) (undo-tree-id3913 . -33)) nil (25292 2867 947527 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -326) (undo-tree-id19 . -1) (undo-tree-id21 . -1) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t)) . -327) (undo-tree-id24 . -1) (undo-tree-id26 . -1) (undo-tree-id28 . -1) 328) ((326 . 328)) (25287 2374 985220 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 433) (undo-tree-id3905 . 1) (undo-tree-id3906 . 1) (undo-tree-id3907 . 1) (undo-tree-id3908 . 1) (undo-tree-id3909 . -1)) nil (25292 2867 947523 0) 0 nil])
([nil nil ((316 . 317) (#("      " 0 6 (fontified t)) . 316) 325) ((316 . 322) (#("	" 0 1 (fontified t)) . 316)) (25287 2374 952894 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 433) (undo-tree-id3900 . 1) (undo-tree-id3901 . 1) (undo-tree-id3902 . 1) (undo-tree-id3903 . 1) (undo-tree-id3904 . -1)) nil (25292 2867 947518 0) 0 nil])
([nil nil ((#("(define (rand-seed seed)
  (let ((internal -1))
    (if (= internal -1)
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update seed))
	    internal))
	(begin 
	  (printf \"The value of internal: ~a \\n\" internal)
          (lambda ()
	    (set! internal (rand-update internal))
	    internal)))))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 18 (face font-lock-function-name-face fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t) 47 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 79 (face font-lock-keyword-face fontified t) 79 84 (fontified t) 84 85 (face (rainbow-delimiters-depth-5-face) fontified t) 85 92 (fontified t) 92 122 (face font-lock-string-face fontified t) 122 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-5-face) fontified t) 132 143 (fontified t) 143 144 (face (rainbow-delimiters-depth-5-face) fontified t) 144 150 (face font-lock-keyword-face fontified t) 150 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-6-face) fontified t) 152 153 (face (rainbow-delimiters-depth-6-face) fontified t) 153 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-6-face) fontified t) 160 164 (face font-lock-keyword-face fontified t) 164 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-7-face) fontified t) 175 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-7-face) fontified t) 192 193 (face (rainbow-delimiters-depth-6-face) fontified t) 193 207 (fontified t) 207 208 (face (rainbow-delimiters-depth-5-face) fontified t) 208 209 (face (rainbow-delimiters-depth-4-face) fontified t) 209 211 (fontified t) 211 212 (face (rainbow-delimiters-depth-4-face) fontified t) 212 217 (face font-lock-keyword-face fontified t) 217 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-5-face) fontified t) 223 230 (fontified t) 230 260 (face font-lock-string-face fontified t) 260 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-5-face) fontified t) 270 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-5-face) fontified t) 282 286 (face font-lock-keyword-face fontified t) 286 288 (face font-lock-keyword-face fontified t) 288 289 (fontified t) 289 290 (face (rainbow-delimiters-depth-6-face) fontified t) 290 291 (face (rainbow-delimiters-depth-6-face) fontified t) 291 292 (fontified t) 292 297 (fontified t) 297 298 (face (rainbow-delimiters-depth-6-face) fontified t) 298 302 (face font-lock-keyword-face fontified t) 302 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-7-face) fontified t) 313 333 (fontified t) 333 334 (face (rainbow-delimiters-depth-7-face) fontified t) 334 335 (face (rainbow-delimiters-depth-6-face) fontified t) 335 336 (fontified t) 336 349 (fontified t) 349 350 (face (rainbow-delimiters-depth-5-face) fontified t) 350 351 (face (rainbow-delimiters-depth-4-face) fontified t) 351 352 (face (rainbow-delimiters-depth-3-face) fontified t) 352 353 (face (rainbow-delimiters-depth-2-face) fontified t) 353 354 (face (rainbow-delimiters-depth-1-face) fontified t)) . 324) (undo-tree-id52 . -25) (undo-tree-id53 . -354) (undo-tree-id54 . -354) (undo-tree-id56 . -354) (undo-tree-id58 . -354) (undo-tree-id59 . -354) (t 25287 375 0 0)) ((324 . 678)) (25287 2374 919169 0) 0 nil])
([nil nil ((#("(lambda (x) (begin (set! seed x)
		   seed))" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-3-face)) 20 24 (fontified t face font-lock-keyword-face) 24 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 38 (fontified t) 38 42 (fontified t) 42 43 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 387) (undo-tree-id3893 . -44) (undo-tree-id3894 . -33) (undo-tree-id3895 . -11) (undo-tree-id3896 . -11) (undo-tree-id3897 . -12) (undo-tree-id3898 . -44) (undo-tree-id3899 . -44)) nil (25292 2867 947513 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -268) (undo-tree-id50 . -1) (#("0" 0 1 (fontified t)) . -269) (undo-tree-id51 . -1) 270) ((268 . 270)) (25287 2374 885799 0) 0 nil])
([nil nil ((nil fontified nil 515 . 516) (nil fontified nil 514 . 515) (nil fontified nil 510 . 514) (nil fontified nil 505 . 510) (nil fontified nil 504 . 505) (nil fontified nil 503 . 504) (nil fontified nil 501 . 503) (nil fontified nil 496 . 501) (nil fontified nil 492 . 496) (nil fontified nil 491 . 492) (nil fontified nil 490 . 491) (nil fontified nil 485 . 490) (nil fontified nil 484 . 485) (nil fontified nil 483 . 484) (nil fontified nil 482 . 483) (nil fontified nil 481 . 482) (nil fontified nil 480 . 481) (nil fontified nil 479 . 480) (nil fontified nil 473 . 479) (nil fontified nil 472 . 473) (472 . 516)) nil (25292 2867 947497 0) 0 nil])
([nil nil ((268 . 272)) ((#("seed" 0 4 (fontified t)) . 268)) (25287 2374 855335 0) 0 nil])
([nil nil ((507 . 517) (#("   " 0 3 (fontified t)) . 507) 516) nil (25292 2867 947488 0) 0 nil])
([nil nil ((323 . 326)) ((#("
  " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 323) (undo-tree-id947 . -1) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -3) (undo-tree-id952 . -3) (undo-tree-id953 . -3) (undo-tree-id954 . -3)) (25287 2374 820097 0) 0 nil])
([nil nil ((484 . 493) (#(" " 0 1 (fontified nil)) . 483) (undo-tree-id3963 . -1) (484 . 485) (t 25292 2867 0 0)) nil (25292 2887 67335 0) 0 nil])
([nil nil ((326 . 328)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 326) (undo-tree-id932 . -1) (undo-tree-id933 . 1) (undo-tree-id934 . -1) (undo-tree-id935 . 1) (undo-tree-id936 . 1) (undo-tree-id937 . -1) (undo-tree-id938 . 1) (undo-tree-id939 . 1) (undo-tree-id940 . -1) (undo-tree-id941 . 1) (undo-tree-id942 . 1) (undo-tree-id943 . -1) (undo-tree-id944 . 1) (undo-tree-id945 . 1) (undo-tree-id946 . -1)) (25287 2374 787066 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -522) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (#(" " 0 1 (fontified t)) . -523) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (#(" " 0 1 (fontified t)) . -524) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (#(" " 0 1 (fontified t)) . -525) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) 526) nil (25292 2887 67330 0) 0 nil])
([nil nil ((327 . 330)) ((#("sse" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 327) (undo-tree-id928 . -3) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -3)) (25287 2374 753570 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -572) (undo-tree-id3964 . -1) (#("a" 0 1 (fontified t)) . -573) (undo-tree-id3965 . -1) (#("n" 0 1 (fontified t)) . -574) (undo-tree-id3966 . -1) (#("d" 0 1 (fontified t)) . -575) (undo-tree-id3967 . -1) (#("-" 0 1 (fontified t)) . -576) (undo-tree-id3968 . -1) (#("u" 0 1 (fontified t)) . -577) (undo-tree-id3969 . -1) (#("p" 0 1 (fontified t)) . -578) (undo-tree-id3970 . -1) (#("d" 0 1 (fontified t)) . -579) (undo-tree-id3971 . -1) (#("a" 0 1 (fontified t)) . -580) (undo-tree-id3972 . -1) (#("t" 0 1 (fontified t)) . -581) (undo-tree-id3973 . -1) (#("e" 0 1 (fontified t)) . -582) (undo-tree-id3974 . -1) 583 (t 25292 2887 0 0)) nil (25292 2904 419478 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -328) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t)) . -329) (undo-tree-id49 . -1) 330) ((328 . 330)) (25287 2374 720717 0) 0 nil])
([nil nil ((572 . 573)) nil (25292 2904 419459 0) 0 nil])
([nil nil ((328 . 330)) ((#("ee" 0 1 (fontified t) 1 2 (fontified t)) . 328) (undo-tree-id926 . -2) (undo-tree-id927 . -2)) (25287 2374 687528 0) 0 nil])
([nil nil ((578 . 580)) nil (25292 2904 419454 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -327) (undo-tree-id41 . -1) (undo-tree-id43 . -1) (#("e" 0 1 (fontified t)) . -328) (undo-tree-id45 . -1) (#("e" 0 1 (fontified t)) . -329) (undo-tree-id47 . -1) 330) ((327 . 330)) (25287 2374 654922 0) 0 nil])
([nil nil ((809 . 810) (t 25292 2904 0 0)) nil (25292 2929 20981 0) 0 nil])
([nil nil ((327 . 331)) ((#("rand" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 327)) (25287 2374 638085 0) 0 nil])
([nil nil ((nil fontified nil 860 . 861) (nil fontified nil 846 . 860) (nil fontified nil 845 . 846) (nil fontified nil 844 . 845) (nil fontified nil 843 . 844) (nil fontified nil 829 . 843) (nil fontified nil 828 . 829) (nil fontified nil 827 . 828) (nil fontified nil 826 . 827) (nil fontified nil 824 . 826) (nil fontified nil 823 . 824) (nil fontified nil 812 . 823) (nil fontified nil 811 . 812) (nil fontified nil 810 . 811) (810 . 861)) nil (25292 2929 20976 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 334) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id75 . -1) (undo-tree-id77 . -1) (undo-tree-id79 . -1) (undo-tree-id81 . 1) (undo-tree-id83 . -1) (t 25287 414 0 0)) ((334 . 335)) (25287 2374 588991 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -572) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (#(" " 0 1 (fontified t)) . -573) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (#("s" 0 1 (fontified t)) . -574) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (#("e" 0 1 (fontified t)) . -575) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (#("e" 0 1 (fontified t)) . -576) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (#("d" 0 1 (fontified t)) . -577) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (#(" " 0 1 (fontified t)) . -578) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (#("1" 0 1 (fontified t)) . -579) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) 580 (t 25292 2929 0 0)) nil (25292 2958 416911 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 334) (undo-tree-id60 . -1) (undo-tree-id61 . 1) (undo-tree-id62 . 1) (undo-tree-id63 . 1) (undo-tree-id64 . 1) (undo-tree-id66 . 1) (undo-tree-id68 . 1) (undo-tree-id70 . -1)) ((334 . 335)) (25287 2374 555407 0) 0 nil])
([nil nil ((572 . 588)) nil (25292 2958 416890 0) 0 nil])
([nil nil ((#("(rand-seed 50)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t)) . 628) (undo-tree-id256 . -14) (undo-tree-id258 . 14) (undo-tree-id260 . 14) (undo-tree-id262 . -14) (t 25287 494 0 0)) ((628 . 642)) (25287 2374 522064 0) 0 nil])
([nil nil ((#("(define (dispatch m)
      (cond ((eq? m 'reset) (print \"RESET\"))
	    ((eq? m 'generate) (print \"GENERATE\"))
	    (else (error \"Unknown request --RANDOM-NUMBER-GENERATOR\" m))))" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 17 (fontified t face font-lock-function-name-face) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t face (rainbow-delimiters-depth-4-face)) 35 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 56 (fontified t) 56 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-4-face)) 64 65 (fontified t face (rainbow-delimiters-depth-3-face)) 65 66 (fontified t) 66 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-3-face)) 72 73 (fontified t face (rainbow-delimiters-depth-4-face)) 73 80 (fontified t) 80 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-4-face)) 89 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-4-face)) 91 97 (fontified t) 97 106 (fontified t face font-lock-string-face) 106 107 (fontified t face font-lock-string-face) 107 108 (fontified t face (rainbow-delimiters-depth-4-face)) 108 109 (fontified t face (rainbow-delimiters-depth-3-face)) 109 110 (fontified t) 110 111 (fontified t) 111 115 (fontified t) 115 116 (fontified t face (rainbow-delimiters-depth-3-face)) 116 120 (fontified t face font-lock-keyword-face) 120 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-4-face)) 122 128 (fontified t) 128 139 (fontified t face font-lock-string-face) 139 140 (fontified t face font-lock-string-face) 140 141 (fontified t face font-lock-string-face) 141 142 (fontified t face font-lock-string-face) 142 143 (fontified t face font-lock-string-face) 143 144 (fontified t face font-lock-string-face) 144 145 (fontified t face font-lock-string-face) 145 146 (fontified t face font-lock-string-face) 146 170 (fontified t face font-lock-string-face) 170 171 (fontified t face font-lock-string-face) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t face (rainbow-delimiters-depth-4-face)) 174 175 (fontified t face (rainbow-delimiters-depth-3-face)) 175 176 (fontified t face (rainbow-delimiters-depth-2-face)) 176 177 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 104) (undo-tree-id4001 . -177) (undo-tree-id4002 . -113) (undo-tree-id4003 . 64) (undo-tree-id4004 . 64) (undo-tree-id4005 . -21) (undo-tree-id4006 . -113) (undo-tree-id4007 . -177) (t 25292 2958 0 0)) nil (25292 10695 642880 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 640 . 641) (nil fontified nil 640 . 641) (nil fontified nil 628 . 640) (nil fontified nil 627 . 628) (627 . 641)) ((#("(rand-seed 50)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 627) (undo-tree-id921 . -14) (undo-tree-id922 . 14) (undo-tree-id923 . 14) (undo-tree-id924 . 14) (undo-tree-id925 . 14) (nil rear-nonsticky t 640 . 641)) (25287 2374 489872 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 104) (undo-tree-id3996 . 1) (undo-tree-id3997 . 1) (undo-tree-id3998 . 1) (undo-tree-id3999 . 1) (undo-tree-id4000 . -1)) nil (25292 10695 642870 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 641) (undo-tree-id234 . 1) (undo-tree-id236 . 1) (undo-tree-id238 . 1) (undo-tree-id240 . 1) (undo-tree-id242 . 1) (undo-tree-id244 . 1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -641) (undo-tree-id245 . -1) (undo-tree-id247 . -1) (undo-tree-id249 . -1) (undo-tree-id251 . 1) (undo-tree-id253 . 1) (undo-tree-id255 . -1) 642) ((641 . 642) (641 . 642)) (25287 2374 457305 0) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 104) (undo-tree-id3991 . 1) (undo-tree-id3992 . 1) (undo-tree-id3993 . 1) (undo-tree-id3994 . 1) (undo-tree-id3995 . -1)) nil (25292 10695 642860 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 642) (undo-tree-id85 . 1) (undo-tree-id87 . 1) (undo-tree-id89 . 1) (undo-tree-id91 . 1) (undo-tree-id93 . 1) (undo-tree-id95 . 1) (undo-tree-id97 . 1) (undo-tree-id99 . 1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -642) (undo-tree-id100 . -1) (undo-tree-id102 . -1) (undo-tree-id104 . -1) (undo-tree-id106 . -1) (undo-tree-id108 . -1) (undo-tree-id110 . -1) (undo-tree-id112 . -1) (undo-tree-id114 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 643) (undo-tree-id116 . 1) (undo-tree-id118 . 1) (undo-tree-id120 . 1) (undo-tree-id122 . 1) (undo-tree-id124 . 1) (undo-tree-id126 . 1) (undo-tree-id128 . 1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -643) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) (undo-tree-id135 . -1) (undo-tree-id137 . -1) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (#("r" 0 1 (fontified t)) . -644) (undo-tree-id143 . -1) (undo-tree-id145 . -1) (undo-tree-id147 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (#("a" 0 1 (fontified t)) . -645) (undo-tree-id156 . -1) (undo-tree-id158 . -1) (undo-tree-id160 . -1) (undo-tree-id162 . -1) (undo-tree-id164 . -1) (undo-tree-id166 . -1) (#("n" 0 1 (fontified t)) . -646) (undo-tree-id168 . -1) (undo-tree-id170 . -1) (undo-tree-id172 . -1) (undo-tree-id174 . -1) (undo-tree-id176 . -1) (undo-tree-id178 . -1) (#("d" 0 1 (fontified t)) . -647) (undo-tree-id179 . -1) (undo-tree-id181 . -1) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (#("-" 0 1 (fontified t)) . -648) (undo-tree-id189 . -1) (undo-tree-id191 . -1) (undo-tree-id193 . -1) (undo-tree-id195 . -1) (undo-tree-id197 . -1) (#("s" 0 1 (fontified t)) . -649) (undo-tree-id198 . -1) (undo-tree-id200 . -1) (undo-tree-id202 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t)) . -650) (undo-tree-id206 . -1) (undo-tree-id208 . -1) (undo-tree-id210 . -1) (undo-tree-id212 . -1) (#("e" 0 1 (fontified t)) . -651) (undo-tree-id213 . -1) (undo-tree-id215 . -1) (undo-tree-id217 . -1) (#("d" 0 1 (fontified t)) . -652) (undo-tree-id219 . -1) (undo-tree-id221 . -1) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -653) (undo-tree-id224 . -1) (undo-tree-id226 . -1) (#("5" 0 1 (fontified t)) . -654) (undo-tree-id228 . -1) (undo-tree-id230 . -1) (#("0" 0 1 (fontified t)) . -655) (undo-tree-id231 . -1) 656) ((643 . 656) (642 . 644) (642 . 643)) (25287 2374 423064 0) 0 nil])
nil
([nil nil ((582 . 583) (t 25287 514 0 0)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 582) (undo-tree-id919 . 1) (undo-tree-id920 . 1)) (25287 2374 390080 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 326) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -326) (undo-tree-id387 . -1) (#("r" 0 1 (fontified t)) . -327) (undo-tree-id388 . -1) (#("a" 0 1 (fontified t)) . -328) (undo-tree-id389 . -1) (#("n" 0 1 (fontified t)) . -329) (undo-tree-id390 . -1) (#("d" 0 1 (fontified t)) . -330) (undo-tree-id391 . -1) 331) ((326 . 331) (326 . 327)) (25287 2374 358260 0) 0 nil] [nil nil ((606 . 607)) ((#("'" 0 1 (fontified t)) . 606) (undo-tree-id374 . -1) (undo-tree-id375 . -1)) (25287 1200 114251 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 375 . 376) (nil fontified nil 375 . 376) (nil fontified nil 367 . 375) (nil fontified nil 366 . 367) (nil fontified nil 365 . 366) (nil fontified nil 352 . 365) (nil fontified nil 351 . 352) (nil fontified nil 348 . 351) (nil fontified nil 344 . 348) (nil fontified nil 343 . 344) (nil fontified nil 336 . 343) (nil fontified nil 335 . 336) (nil fontified nil 334 . 335) (nil fontified nil 333 . 334) (nil fontified nil 327 . 333) (nil fontified nil 326 . 327) (326 . 376)) ((#("(lambda ()
      (set! x (rand-update x))
      x)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-3-face) fontified nil) 9 10 (face (rainbow-delimiters-depth-3-face) fontified nil) 10 11 (fontified nil) 11 15 (fontified nil) 15 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 22 (face font-lock-keyword-face fontified nil) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil) 25 26 (face (rainbow-delimiters-depth-4-face) fontified nil) 26 39 (fontified nil) 39 40 (face (rainbow-delimiters-depth-4-face) fontified nil) 40 41 (face (rainbow-delimiters-depth-3-face) fontified nil) 41 42 (fontified nil) 42 48 (fontified nil) 48 49 (fontified nil) 49 50 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 326) (undo-tree-id893 . -11) (undo-tree-id894 . -42) (undo-tree-id895 . -24) (undo-tree-id896 . 50) (undo-tree-id897 . 50) (undo-tree-id898 . 9) (undo-tree-id899 . 50) (undo-tree-id900 . -41) (undo-tree-id901 . 9) (undo-tree-id902 . 9) (undo-tree-id903 . -41) (undo-tree-id904 . 9) (undo-tree-id905 . 9) (undo-tree-id906 . -41) (undo-tree-id907 . 1) (undo-tree-id908 . 9) (undo-tree-id909 . -48) (undo-tree-id910 . 1) (undo-tree-id911 . 1) (undo-tree-id912 . -49) (undo-tree-id913 . 26) (undo-tree-id914 . 1) (undo-tree-id915 . -23) (undo-tree-id916 . 26) (undo-tree-id917 . 26) (undo-tree-id918 . -24) (nil fontified t 336 . 337) (nil fontified t 367 . 368) (nil rear-nonsticky t 375 . 376)) (25287 2374 324636 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -606) (undo-tree-id263 . -1) (undo-tree-id265 . -1) 607) ((606 . 607)) (25287 1199 770286 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -349) (undo-tree-id386 . -1) 350) ((349 . 350)) (25287 2374 291942 0) 0 nil])
([nil nil ((606 . 607)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 606)) (25287 1199 370624 0) 0 nil])
([nil nil ((349 . 350)) ((#("y" 0 1 (fontified t)) . 349)) (25287 2374 258708 0) 0 nil])
([nil nil ((nil fontified nil 657 . 658) (nil fontified nil 645 . 657) (nil fontified nil 644 . 645) (644 . 658) (t 25287 531 0 0)) ((#("(rand-seed 50)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky t)) . 644) (undo-tree-id371 . 14) (undo-tree-id372 . 14) (undo-tree-id373 . 14) (nil fontified t 657 . 658)) (25287 1198 581362 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -374) (undo-tree-id385 . -1) 375) ((374 . 375)) (25287 2374 226544 0) 0 nil])
([nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-4-face) fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-5-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-5-face) fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t)) . 128) (undo-tree-id284 . -13) (undo-tree-id285 . -85) (undo-tree-id287 . 85) (undo-tree-id289 . 85) (undo-tree-id291 . -85) (t 25287 539 0 0)) ((128 . 213)) (25287 1198 178109 0) 0 nil])
([nil nil ((374 . 375)) ((#("y" 0 1 (fontified t)) . 374)) (25287 2374 192977 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 128) (undo-tree-id276 . -1) (undo-tree-id278 . 1) (undo-tree-id280 . 1) (undo-tree-id282 . 1)) ((128 . 129)) (25287 1198 12656 0) 0 nil])
([nil nil ((366 . 370) (#("  " 0 2 (fontified nil)) . -341) (367 . 368)) ((#("
" 0 1 (fontified nil)) . 367) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (341 . 343) (#("    " 0 4 (fontified t)) . 366) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4)) (25287 2374 160563 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 128) (undo-tree-id266 . -1) (undo-tree-id268 . 1) (undo-tree-id270 . 1) (undo-tree-id272 . 1) (undo-tree-id274 . 1)) ((128 . 129)) (25287 1197 668883 0) 0 nil])
([nil nil ((370 . 372)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 370) (undo-tree-id883 . -1) (undo-tree-id884 . 1) (undo-tree-id885 . -1)) (25287 2374 126566 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 239) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -239) (undo-tree-id304 . -1) (#("r" 0 1 (fontified t)) . -240) (undo-tree-id305 . -1) (#("a" 0 1 (fontified t)) . -241) (undo-tree-id306 . -1) (#("n" 0 1 (fontified t)) . -242) (undo-tree-id307 . -1) (#("d" 0 1 (fontified t)) . -243) (undo-tree-id308 . -1) 244 (t 25287 576 0 0)) ((239 . 244) (239 . 240)) (25287 1197 515603 0) 0 nil])
([nil nil ((371 . 379)) ((#("set! x y" 0 4 (face font-lock-keyword-face fontified t) 4 8 (fontified t)) . 371)) (25287 2374 93798 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 301 . 302) (nil fontified nil 301 . 302) (nil fontified nil 300 . 301) (nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 297 . 298) (nil fontified nil 296 . 297) (nil fontified nil 295 . 296) (nil fontified nil 282 . 295) (nil fontified nil 281 . 282) (nil fontified nil 278 . 281) (nil fontified nil 274 . 278) (nil fontified nil 273 . 274) (nil fontified nil 272 . 273) (nil fontified nil 271 . 272) (nil fontified nil 270 . 271) (nil fontified nil 269 . 270) (nil fontified nil 268 . 269) (nil fontified nil 262 . 268) (nil fontified nil 261 . 262) (nil fontified nil 255 . 261) (nil fontified nil 254 . 255) (nil fontified nil 253 . 254) (nil fontified nil 252 . 253) (nil fontified nil 246 . 252) (nil fontified nil 245 . 246) (nil fontified nil 244 . 245) (nil fontified nil 243 . 244) (nil fontified nil 240 . 243) (nil fontified nil 239 . 240) (239 . 302)) ((#("(let ((x seed))
      (lambda ()
	(set! x (rand-update x))
	x))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-3-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-4-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-3-face) fontified nil) 15 16 (fontified nil) 16 22 (fontified nil) 22 23 (face (rainbow-delimiters-depth-3-face) fontified nil) 23 29 (face font-lock-keyword-face fontified nil) 29 30 (fontified nil) 30 31 (face (rainbow-delimiters-depth-4-face) fontified nil) 31 32 (face (rainbow-delimiters-depth-4-face) fontified nil) 32 33 (fontified nil) 33 34 (fontified nil) 34 35 (face (rainbow-delimiters-depth-4-face) fontified nil) 35 39 (face font-lock-keyword-face fontified nil) 39 40 (fontified nil) 40 41 (fontified nil) 41 42 (fontified nil) 42 43 (face (rainbow-delimiters-depth-5-face) fontified nil) 43 55 (fontified nil) 55 56 (fontified nil) 56 57 (face (rainbow-delimiters-depth-5-face) fontified nil) 57 58 (face (rainbow-delimiters-depth-4-face) fontified nil) 58 59 (fontified nil) 59 60 (fontified nil) 60 61 (fontified nil) 61 62 (face (rainbow-delimiters-depth-3-face) fontified nil) 62 63 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 239) (undo-tree-id326 . -16) (undo-tree-id327 . -8) (undo-tree-id328 . -59) (undo-tree-id329 . -60) (undo-tree-id330 . 2) (undo-tree-id331 . -60) (undo-tree-id332 . 2) (undo-tree-id333 . 2) (undo-tree-id334 . -61) (undo-tree-id335 . 7) (undo-tree-id336 . 2) (undo-tree-id337 . -55) (undo-tree-id338 . 7) (undo-tree-id339 . 7) (undo-tree-id340 . -56) (undo-tree-id341 . 22) (undo-tree-id342 . 7) (undo-tree-id343 . -40) (undo-tree-id344 . 22) (undo-tree-id345 . 22) (undo-tree-id346 . -41) (undo-tree-id347 . 50) (undo-tree-id348 . 22) (undo-tree-id349 . -9) (undo-tree-id350 . 50) (undo-tree-id351 . 50) (undo-tree-id352 . -9) (undo-tree-id353 . 50) (undo-tree-id354 . 50) (undo-tree-id355 . -10) (undo-tree-id356 . 50) (undo-tree-id357 . 50) (undo-tree-id358 . -13) (undo-tree-id359 . 55) (undo-tree-id360 . 50) (undo-tree-id361 . -7) (undo-tree-id362 . 55) (undo-tree-id363 . 55) (undo-tree-id364 . -7) (undo-tree-id365 . 55) (undo-tree-id366 . 55) (undo-tree-id367 . -7) (undo-tree-id368 . 55) (undo-tree-id369 . 55) (undo-tree-id370 . -8) (nil fontified t 254 . 255) (nil fontified t 271 . 272) (nil fontified t 297 . 298) (nil rear-nonsticky t 301 . 302)) (25287 1197 353291 0) 0 nil])
([nil nil ((#("(lambda ()
    (set! y (rand-update x))
    (set! x y)
      y)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (fontified t) 11 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 40 (fontified t) 40 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 49 (face font-lock-keyword-face fontified t) 49 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (fontified t) 55 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 326) (undo-tree-id419 . -11) (undo-tree-id420 . -63) (undo-tree-id421 . -1) (undo-tree-id423 . -63) (undo-tree-id425 . 62)) ((326 . 389)) (25287 2374 61932 0) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . -325) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . 1) (undo-tree-id379 . 1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) 326) ((325 . 326)) (25287 1338 814662 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -246) (undo-tree-id303 . -1) 247) ((246 . 247)) (25287 1197 210350 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -323) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id399 . -1) (undo-tree-id401 . -1) (#(" " 0 1 (fontified t)) . -324) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id407 . -1) (undo-tree-id409 . -1) (#(" " 0 1 (fontified t)) . -325) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id415 . -1) (undo-tree-id417 . -1) 326) ((323 . 326)) (25287 2374 28186 0) 0 nil])
nil
([nil nil ((246 . 247)) ((#("r" 0 1 (fontified t)) . 246) (undo-tree-id324 . -1) (undo-tree-id325 . -1)) (25287 1197 60492 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -299) (undo-tree-id393 . -1) 300) ((299 . 300)) (25287 2373 995521 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -246) (undo-tree-id302 . -1) 247) ((246 . 247)) (25287 1196 892758 0) 0 nil])
([nil nil ((299 . 300)) ((#("y" 0 1 (fontified t)) . 299)) (25287 2373 961690 0) 0 nil])
([nil nil ((246 . 247)) ((#("y" 0 1 (fontified t)) . 246)) (25287 1196 738039 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -319) (undo-tree-id392 . -1) 320) ((319 . 320)) (25287 2373 929397 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -249) (undo-tree-id299 . -1) (#("e" 0 1 (fontified t)) . -250) (undo-tree-id300 . -1) (#("d" 0 1 (fontified t)) . -251) (undo-tree-id301 . -1) 252) ((249 . 252)) (25287 1196 585202 0) 0 nil])
([nil nil ((319 . 320)) ((#("y" 0 1 (fontified t)) . 319)) (25287 2373 895876 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -248) (undo-tree-id298 . -1) 249) ((248 . 249)) (25287 1196 458035 0) 0 nil])
([nil nil ((#("(define rand
    (let ((x seed))
      (lambda ()
	(set! y (rand-update x))
	y)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 13 (fontified t) 13 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-4-face) fontified t) 23 24 (face (rainbow-delimiters-depth-5-face) fontified t) 24 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-5-face) fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t) 32 33 (fontified t) 33 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-4-face) fontified t) 40 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-5-face) fontified t) 48 49 (face (rainbow-delimiters-depth-5-face) fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-5-face) fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-6-face) fontified t) 60 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-6-face) fontified t) 74 75 (face (rainbow-delimiters-depth-5-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 242) (undo-tree-id471 . -13) (undo-tree-id472 . -81) (undo-tree-id473 . -1) (undo-tree-id475 . -81) (undo-tree-id477 . -81) (undo-tree-id479 . -81) (undo-tree-id481 . -1) (undo-tree-id483 . 80) (undo-tree-id485 . -1) (undo-tree-id487 . -1) (undo-tree-id489 . 80) (undo-tree-id491 . 81) (undo-tree-id493 . 81) (undo-tree-id495 . -81) (t 25287 1385 0 0)) ((242 . 323)) (25287 2373 864213 0) 0 nil] [nil nil ((#("define rand
    (let ((x seed))
      (lambda ()
	(set! y (rand-update x))
	y)))" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-function-name-face fontified t) 11 12 (fontified t) 12 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 23 (face (rainbow-delimiters-depth-5-face) fontified t) 23 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-5-face) fontified t) 30 31 (face (rainbow-delimiters-depth-4-face) fontified t) 31 32 (fontified t) 32 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-5-face) fontified t) 47 48 (face (rainbow-delimiters-depth-5-face) fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-6-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-6-face) fontified t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 75 (fontified t) 75 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) fontified t) 78 79 (face (rainbow-delimiters-depth-3-face) fontified t) 79 80 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 243) (undo-tree-id426 . -12) (undo-tree-id427 . -80) (undo-tree-id428 . -80) (undo-tree-id429 . -16) (undo-tree-id430 . -79) (undo-tree-id431 . -80) (undo-tree-id432 . -80) (undo-tree-id433 . -80) (undo-tree-id434 . -80) (undo-tree-id435 . -80) (undo-tree-id436 . 49) (undo-tree-id437 . -31) (undo-tree-id438 . 49) (undo-tree-id439 . 49) (undo-tree-id440 . -31) (undo-tree-id441 . 49) (undo-tree-id442 . -80) (undo-tree-id443 . -80) (undo-tree-id444 . 80) (t 25287 1385 0 0)) ((243 . 323)) (25287 1416 240121 0) 0 nil])
([nil nil ((248 . 250)) ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 248) (undo-tree-id321 . -1) (undo-tree-id322 . 1) (undo-tree-id323 . -1)) (25287 1196 308165 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 325 . 326) (nil fontified nil 325 . 326) (nil fontified nil 324 . 325) (nil fontified nil 323 . 324) (nil fontified nil 315 . 323) (nil fontified nil 314 . 315) (nil fontified nil 313 . 314) (nil fontified nil 300 . 313) (nil fontified nil 299 . 300) (nil fontified nil 296 . 299) (nil fontified nil 292 . 296) (nil fontified nil 291 . 292) (nil fontified nil 284 . 291) (nil fontified nil 283 . 284) (nil fontified nil 282 . 283) (nil fontified nil 281 . 282) (nil fontified nil 275 . 281) (nil fontified nil 274 . 275) (nil fontified nil 269 . 274) (nil fontified nil 268 . 269) (nil fontified nil 267 . 268) (nil fontified nil 263 . 267) (nil fontified nil 262 . 263) (nil fontified nil 261 . 262) (nil fontified nil 260 . 261) (nil fontified nil 257 . 260) (nil fontified nil 256 . 257) (nil fontified nil 253 . 256) (nil fontified nil 249 . 253) (nil fontified nil 248 . 249) (nil fontified nil 242 . 248) (nil fontified nil 241 . 242) (241 . 326)) ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 12 (face font-lock-function-name-face fontified nil) 12 13 (fontified nil) 13 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-3-face) fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-4-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-5-face) fontified nil) 22 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-5-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-4-face) fontified nil) 28 29 (fontified nil) 29 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-4-face) fontified nil) 34 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (face (rainbow-delimiters-depth-5-face) fontified nil) 42 43 (face (rainbow-delimiters-depth-5-face) fontified nil) 43 44 (fontified nil) 44 50 (fontified nil) 50 51 (face (rainbow-delimiters-depth-5-face) fontified nil) 51 55 (face font-lock-keyword-face fontified nil) 55 56 (fontified nil) 56 57 (fontified nil) 57 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-6-face) fontified nil) 59 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-6-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-5-face) fontified nil) 74 75 (fontified nil) 75 81 (fontified nil) 81 82 (fontified nil) 82 83 (face (rainbow-delimiters-depth-4-face) fontified nil) 83 84 (face (rainbow-delimiters-depth-3-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 241) (undo-tree-id867 . -85) (undo-tree-id868 . -75) (undo-tree-id869 . 85) (undo-tree-id870 . 3) (undo-tree-id871 . 85) (undo-tree-id872 . -81) (undo-tree-id873 . 3) (undo-tree-id874 . 3) (undo-tree-id875 . -82) (undo-tree-id876 . 28) (undo-tree-id877 . 3) (undo-tree-id878 . -56) (undo-tree-id879 . 28) (undo-tree-id880 . 28) (undo-tree-id881 . -57) (undo-tree-id882 . 28) (nil fontified t 253 . 254) (nil fontified t 269 . 270) (nil fontified t 284 . 285) (nil fontified t 315 . 316) (nil rear-nonsticky t 325 . 326)) (25287 2373 830526 0) 0 nil] [nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-4-face) fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-5-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-5-face) fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t)) . 128) (undo-tree-id445 . -13) (undo-tree-id446 . -85) (undo-tree-id447 . -33) (undo-tree-id448 . -83) (undo-tree-id449 . 8) (undo-tree-id450 . -77) (undo-tree-id451 . 39) (undo-tree-id452 . 8) (undo-tree-id453 . -46) (undo-tree-id454 . 54) (undo-tree-id455 . 39) (undo-tree-id456 . -31) (undo-tree-id457 . 70) (undo-tree-id458 . 54) (undo-tree-id459 . -15) (undo-tree-id460 . 83) (undo-tree-id461 . 70) (undo-tree-id462 . -2) (undo-tree-id463 . 84) (undo-tree-id464 . 83) (undo-tree-id465 . -1) (undo-tree-id466 . 85) (undo-tree-id467 . 84) (undo-tree-id468 . 85) (undo-tree-id469 . 85) (undo-tree-id470 . -85)) ((128 . 213)) (25287 1443 315188 0) 0 nil])
nil
([nil nil ((249 . 253)) ((#("rand" 0 4 (fontified t)) . 249)) (25287 1196 137335 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -326) (undo-tree-id498 . -1) (undo-tree-id500 . -1) (undo-tree-id502 . -1) (undo-tree-id504 . -1) (undo-tree-id506 . -1) (undo-tree-id508 . 1) (undo-tree-id509 . 1) (undo-tree-id510 . -1) (undo-tree-id512 . 1) (undo-tree-id514 . 1) (undo-tree-id516 . -1) 327) ((326 . 327)) (25287 2373 797274 0) 0 nil] [nil nil ((#("x" 0 1 (fontified t)) . -322) 326) ((322 . 323)) (25287 1495 401535 0) 0 nil] [nil nil ((#("define" 0 6 (face font-lock-keyword-face fontified t)) . 331) (undo-tree-id496 . -6) 326) ((331 . 337)) (25287 1483 902352 0) 0 nil])
nil
([nil nil ((#("x" 0 1 (fontified t)) . -281) (undo-tree-id296 . -1) 282) ((281 . 282)) (25287 1195 971222 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -297) (undo-tree-id527 . -1) (undo-tree-id529 . 1) 298) ((297 . 298)) (25287 2373 764064 0) 0 nil] [nil nil ((322 . 323)) ((#(" " 0 1 (fontified t)) . 322) (undo-tree-id517 . -1) (undo-tree-id518 . 1) (undo-tree-id519 . -1)) (25287 1514 718493 0) 0 nil])
nil
nil
([nil nil ((281 . 282)) ((#("y" 0 1 (fontified t)) . 281)) (25287 1195 812774 0) 0 nil])
([nil nil ((297 . 298)) ((#("y" 0 1 (fontified t)) . 297)) (25287 2373 731132 0) 0 nil])
nil
([nil nil ((#("x" 0 1 (fontified t)) . -296) (undo-tree-id292 . -1) (undo-tree-id294 . 1) 297) ((296 . 297)) (25287 1195 628748 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -322) (undo-tree-id520 . -1) (undo-tree-id522 . 1) (undo-tree-id524 . 1) (undo-tree-id526 . -1) 323) ((322 . 323)) (25287 2373 700909 0) 0 nil])
([nil nil ((296 . 297)) ((#("y" 0 1 (fontified t)) . 296)) (25287 1195 459100 0) 0 nil])
([nil nil ((322 . 323)) ((#("y" 0 1 (fontified t)) . 322)) (25287 2373 664667 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -301) (undo-tree-id309 . -1) (undo-tree-id311 . -1) 302 (t 25287 698 0 0)) ((301 . 302)) (25287 1195 308809 0) 0 nil])
([nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! y (rand-update x))
      y)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-5-face) fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-5-face) fontified t) 42 43 (face (rainbow-delimiters-depth-5-face) fontified t) 43 44 (fontified t) 44 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-6-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-6-face) fontified t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 75 (fontified t) 75 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-4-face) fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 85 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 241) (undo-tree-id637 . -85) (undo-tree-id639 . -85) (undo-tree-id640 . -85) (undo-tree-id641 . -85) (undo-tree-id642 . -13) (undo-tree-id644 . -85) (t 25287 1527 0 0)) ((241 . 326)) (25287 2373 631682 0) 0 nil] [nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! y (rand-update x))
      y)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-5-face) fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-5-face) fontified t) 42 43 (face (rainbow-delimiters-depth-5-face) fontified t) 43 44 (fontified t) 44 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-6-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-6-face) fontified t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 75 (fontified t) 75 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-4-face) fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 85 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 241) (undo-tree-id580 . -85) (undo-tree-id581 . -85) (undo-tree-id582 . -85) (undo-tree-id583 . -85) (undo-tree-id584 . -85) (undo-tree-id585 . -85) (undo-tree-id586 . -85) (undo-tree-id587 . -85) (undo-tree-id588 . -85) (undo-tree-id589 . -85) (undo-tree-id590 . -85) (undo-tree-id591 . -85) (undo-tree-id592 . -85) (undo-tree-id593 . -13) (undo-tree-id594 . 3) (undo-tree-id595 . 3) (undo-tree-id596 . 3) (undo-tree-id597 . 3) (undo-tree-id598 . 3) (undo-tree-id599 . 28) (undo-tree-id600 . 28) (undo-tree-id601 . -56) (undo-tree-id602 . -81) (undo-tree-id603 . 3) (undo-tree-id604 . 4) (undo-tree-id605 . -82) (undo-tree-id606 . 3) (undo-tree-id607 . 3) (undo-tree-id608 . -82) (undo-tree-id609 . 57) (undo-tree-id610 . 3) (undo-tree-id611 . -28) (undo-tree-id612 . 57) (undo-tree-id613 . 57) (undo-tree-id614 . -28) (undo-tree-id615 . 42) (undo-tree-id616 . 57) (undo-tree-id617 . -43) (undo-tree-id618 . 42) (undo-tree-id619 . 42) (undo-tree-id620 . -43) (undo-tree-id621 . 85) (undo-tree-id622 . 42) (undo-tree-id623 . 85) (undo-tree-id624 . 85) (undo-tree-id625 . 85) (undo-tree-id626 . 85) (undo-tree-id627 . 85) (undo-tree-id628 . -85) (undo-tree-id629 . 85) (undo-tree-id630 . 85) (undo-tree-id631 . -85) (t 25287 1527 0 0)) ((241 . 326)) (25287 1595 619105 0) 0 nil] [nil nil ((#("(define rand
  (let ((x 50))
    (lambda ()
      (set! y (rand-update x))
      y)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-function-name-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-5-face) fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-5-face) fontified t) 42 43 (face (rainbow-delimiters-depth-5-face) fontified t) 43 44 (fontified t) 44 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 55 (face font-lock-keyword-face fontified t) 55 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-6-face) fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-6-face) fontified t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 75 (fontified t) 75 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-4-face) fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 85 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 241) (undo-tree-id531 . -85) (undo-tree-id532 . -85) (undo-tree-id533 . -85) (undo-tree-id534 . -85) (undo-tree-id535 . -85) (undo-tree-id536 . -85) (undo-tree-id537 . -85) (undo-tree-id538 . -85) (undo-tree-id539 . -85) (undo-tree-id540 . -85) (undo-tree-id541 . -85) (undo-tree-id542 . -85) (undo-tree-id543 . -85) (undo-tree-id544 . -85) (undo-tree-id545 . -13) (undo-tree-id546 . 3) (undo-tree-id547 . 3) (undo-tree-id548 . 3) (undo-tree-id549 . 3) (undo-tree-id550 . 3) (undo-tree-id551 . 28) (undo-tree-id552 . 28) (undo-tree-id553 . -56) (undo-tree-id554 . -81) (undo-tree-id555 . 3) (undo-tree-id556 . 4) (undo-tree-id557 . -82) (undo-tree-id558 . 3) (undo-tree-id559 . 3) (undo-tree-id560 . -82) (undo-tree-id561 . 57) (undo-tree-id562 . 3) (undo-tree-id563 . -28) (undo-tree-id564 . 57) (undo-tree-id565 . 57) (undo-tree-id566 . -28) (undo-tree-id567 . 42) (undo-tree-id568 . 57) (undo-tree-id569 . -43) (undo-tree-id570 . 42) (undo-tree-id571 . 42) (undo-tree-id572 . -43) (undo-tree-id573 . 85) (undo-tree-id574 . 42) (undo-tree-id575 . 85) (undo-tree-id576 . 85) (undo-tree-id577 . 85) (undo-tree-id578 . 85) (undo-tree-id579 . -85) (t 25287 1527 0 0)) ((241 . 326)) (25287 1582 860726 0) 0 nil])
([nil nil ((301 . 302)) ((#("y" 0 1 (fontified t)) . 301)) (25287 1195 130259 0) 0 nil])
([nil nil ((#("(let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-4-face) fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-5-face) fontified t) 44 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t) 59 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-3-face) fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t)) . 143) (undo-tree-id633 . -69) (undo-tree-id634 . -14) (undo-tree-id636 . -69)) ((143 . 212)) (25287 2373 600042 0) 0 nil])
nil
nil
([nil nil ((601 . 604) (t 25287 713 0 0)) ((#("() " 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (fontified t)) . 601) (undo-tree-id318 . -2) (undo-tree-id319 . 1) (undo-tree-id320 . -2)) (25287 1194 929502 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 211 . 212) (nil fontified nil 211 . 212) (nil fontified nil 210 . 211) (nil fontified nil 202 . 210) (nil fontified nil 201 . 202) (nil fontified nil 200 . 201) (nil fontified nil 187 . 200) (nil fontified nil 186 . 187) (nil fontified nil 183 . 186) (nil fontified nil 179 . 183) (nil fontified nil 178 . 179) (nil fontified nil 171 . 178) (nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 168 . 169) (nil fontified nil 162 . 168) (nil fontified nil 161 . 162) (nil fontified nil 156 . 161) (nil fontified nil 155 . 156) (nil fontified nil 154 . 155) (nil fontified nil 150 . 154) (nil fontified nil 149 . 150) (nil fontified nil 148 . 149) (nil fontified nil 147 . 148) (nil fontified nil 144 . 147) (nil fontified nil 143 . 144) (143 . 212)) ((#("(let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-3-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-4-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-3-face) fontified nil) 13 14 (fontified nil) 14 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil) 19 25 (face font-lock-keyword-face fontified nil) 25 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-4-face) fontified nil) 28 29 (fontified nil) 29 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-4-face) fontified nil) 36 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (fontified nil) 42 43 (fontified nil) 43 44 (face (rainbow-delimiters-depth-5-face) fontified nil) 44 57 (fontified nil) 57 58 (face (rainbow-delimiters-depth-5-face) fontified nil) 58 59 (face (rainbow-delimiters-depth-4-face) fontified nil) 59 60 (fontified nil) 60 66 (fontified nil) 66 67 (fontified nil) 67 68 (face (rainbow-delimiters-depth-3-face) fontified nil) 68 69 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 143) (undo-tree-id858 . -18) (undo-tree-id859 . -18) (undo-tree-id860 . -69) (undo-tree-id861 . 55) (undo-tree-id862 . -14) (undo-tree-id863 . -18) (undo-tree-id864 . 51) (undo-tree-id865 . -18) (undo-tree-id866 . 51) (nil fontified t 156 . 157) (nil fontified t 171 . 172) (nil fontified t 202 . 203) (nil rear-nonsticky t 211 . 212)) (25287 2373 565700 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 602) (617 . 618) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -602)) ((602 . 603) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 617) (undo-tree-id317 . -1) (602 . 603)) (25287 1194 708251 0) 0 nil])
([nil nil ((214 . 215)) ((#("n" 0 1 (fontified t)) . 214) (undo-tree-id856 . -1) (undo-tree-id857 . -1)) (25287 2373 532747 0) 0 nil])
([nil nil ((#("(rand-seed 50)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 618) (undo-tree-id314 . -14)) ((618 . 632)) (25287 1194 345527 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -214) (undo-tree-id632 . -1) 215) ((214 . 215)) (25287 2373 500367 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 633 . 634) (nil fontified nil 633 . 634) (nil fontified nil 632 . 633) (nil fontified nil 620 . 632) (nil fontified nil 619 . 620) (nil fontified nil 618 . 619) (618 . 634)) ((#("((rand-seed 50))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky t) 15 16 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 618) (nil rear-nonsticky t 633 . 634) (t 25287 760 0 0)) (25287 760 842157 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 309 . 310) (nil fontified nil 309 . 310) (nil fontified nil 308 . 309) (nil fontified nil 300 . 308) (nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 285 . 298) (nil fontified nil 284 . 285) (nil fontified nil 281 . 284) (nil fontified nil 277 . 281) (nil fontified nil 276 . 277) (nil fontified nil 269 . 276) (nil fontified nil 268 . 269) (nil fontified nil 267 . 268) (nil fontified nil 266 . 267) (nil fontified nil 260 . 266) (nil fontified nil 259 . 260) (nil fontified nil 254 . 259) (nil fontified nil 253 . 254) (nil fontified nil 252 . 253) (nil fontified nil 248 . 252) (nil fontified nil 247 . 248) (nil fontified nil 246 . 247) (nil fontified nil 245 . 246) (nil fontified nil 242 . 245) (nil fontified nil 241 . 242) (241 . 310)) ((#("(let ((x 50))
    (lambda ()
      (set! x (rand-update x))
      x))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-3-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-4-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-3-face) fontified nil) 13 14 (fontified nil) 14 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil) 19 25 (face font-lock-keyword-face fontified nil) 25 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-4-face) fontified nil) 27 28 (face (rainbow-delimiters-depth-4-face) fontified nil) 28 29 (fontified nil) 29 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-4-face) fontified nil) 36 40 (face font-lock-keyword-face fontified nil) 40 41 (fontified nil) 41 42 (fontified nil) 42 43 (fontified nil) 43 44 (face (rainbow-delimiters-depth-5-face) fontified nil) 44 57 (fontified nil) 57 58 (face (rainbow-delimiters-depth-5-face) fontified nil) 58 59 (face (rainbow-delimiters-depth-4-face) fontified nil) 59 60 (fontified nil) 60 66 (fontified nil) 66 67 (fontified nil) 67 68 (face (rainbow-delimiters-depth-3-face) fontified nil) 68 69 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky nil)) . 241) (undo-tree-id837 . -9) (undo-tree-id838 . 58) (undo-tree-id839 . -9) (undo-tree-id840 . 58) (undo-tree-id841 . 58) (undo-tree-id842 . -11) (undo-tree-id843 . 2) (undo-tree-id844 . 58) (undo-tree-id845 . -66) (undo-tree-id846 . 2) (undo-tree-id847 . 2) (undo-tree-id848 . -67) (undo-tree-id849 . 27) (undo-tree-id850 . 2) (undo-tree-id851 . -41) (undo-tree-id852 . 27) (undo-tree-id853 . 27) (undo-tree-id854 . -42) (undo-tree-id855 . 27) (nil fontified t 254 . 255) (nil fontified t 269 . 270) (nil fontified t 300 . 301) (nil rear-nonsticky t 309 . 310)) (25287 2373 467073 0) 0 nil])
nil
([nil nil ((606 . 609) (t 25287 1623 0 0)) ((#("() " 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (fontified t)) . 606) (undo-tree-id834 . -2) (undo-tree-id835 . 1) (undo-tree-id836 . -2)) (25287 2373 436364 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 607) (622 . 623) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -607)) ((607 . 608) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 622) (undo-tree-id833 . -1) (607 . 608)) (25287 2373 400857 0) 0 nil])
([nil nil ((584 . 585) (t 25287 1636 0 0)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 584) (undo-tree-id831 . 1) (undo-tree-id832 . 1)) (25287 2373 367447 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -282) (undo-tree-id654 . -1) 283) ((282 . 283)) (25287 2373 334415 0) 0 nil] [nil nil ((#("x" 0 1 (fontified t)) . -184) (undo-tree-id648 . -1) 185 (t 25287 1647 0 0)) ((184 . 185)) (25287 1698 412646 0) 0 nil])
([nil nil ((282 . 286)) ((#("seed" 0 4 (fontified t)) . 282)) (25287 2373 301667 0) 0 nil])
([nil nil ((184 . 185)) ((#("y" 0 1 (fontified t)) . 184)) (25287 1697 990094 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -310) (undo-tree-id652 . -1) 311) ((310 . 311)) (25287 2373 268839 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -209) (undo-tree-id647 . -1) 210) ((209 . 210)) (25287 1697 460016 0) 0 nil])
([nil nil ((310 . 314)) ((#("seed" 0 4 (fontified t)) . 310)) (25287 2373 236418 0) 0 nil])
([nil nil ((209 . 210)) ((#("y" 0 1 (fontified t)) . 209) (undo-tree-id649 . 1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (t 25287 1669 0 0)) (25287 1669 920557 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -250) (undo-tree-id656 . -1) (#("0" 0 1 (fontified t)) . -251) (undo-tree-id657 . -1) 252 (t 25287 1709 0 0)) ((250 . 252)) (25287 2373 203831 0) 0 nil])
nil
([nil nil ((250 . 254)) ((#("seed" 0 4 (fontified t)) . 250)) (25287 2373 169480 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 647 . 648) (nil fontified nil 647 . 648) (nil fontified nil 646 . 647) (nil fontified nil 634 . 646) (nil fontified nil 633 . 634) (nil fontified nil 632 . 633) (632 . 648) (t 25287 1728 0 0)) ((#("((rand-seed 50))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 632) (nil rear-nonsticky t 647 . 648)) (25287 2373 137855 0) 0 nil])
([nil nil ((631 . 632) (t 25287 1745 0 0)) ((#("
" 0 1 (fontified t)) . 631) (t 25287 1781 0 0)) (25287 2373 104834 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -362) (undo-tree-id678 . -1) (#("a" 0 1 (fontified t)) . -363) (undo-tree-id679 . -1) (#("n" 0 1 (fontified t)) . -364) (undo-tree-id680 . -1) (#("d" 0 1 (fontified t)) . -365) (undo-tree-id681 . -1) 366 (t 25287 1781 0 0)) ((362 . 366)) (25287 2373 71783 0) 0 nil])
([nil nil ((362 . 368)) ((#("begin " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 362) (undo-tree-id820 . -6) (undo-tree-id821 . -6) (undo-tree-id822 . -6) (undo-tree-id823 . -6) (undo-tree-id824 . -6) (undo-tree-id825 . -6) (undo-tree-id826 . -6) (undo-tree-id827 . -6) (undo-tree-id828 . -6) (undo-tree-id829 . -6) (undo-tree-id830 . -6)) (25287 2373 38523 0) 0 nil])
([nil nil ((368 . 370)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 368) (undo-tree-id805 . -1) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . 1) (undo-tree-id813 . -1) (undo-tree-id814 . 1) (undo-tree-id815 . 1) (undo-tree-id816 . -1) (undo-tree-id817 . 1) (undo-tree-id818 . 1) (undo-tree-id819 . -1)) (25287 2373 5895 0) 0 nil])
([nil nil ((369 . 378)) ((#("set! seed" 0 4 (face font-lock-keyword-face fontified t) 4 9 (fontified t)) . 369) (undo-tree-id802 . -9) (undo-tree-id803 . -9) (undo-tree-id804 . -9)) (25287 2372 972266 0) 0 nil])
([nil nil ((378 . 381)) ((#(" ()" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . 378) (undo-tree-id799 . -2) (undo-tree-id800 . 1) (undo-tree-id801 . -2)) (25287 2372 939107 0) 0 nil])
([nil nil ((380 . 396)) ((#("rand-update seed" 0 16 (fontified t)) . 380)) (25287 2372 905923 0) 0 nil])
([nil nil ((398 . 404)) ((#("
			  " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t)) . 398) (undo-tree-id792 . -1) (undo-tree-id793 . -6) (undo-tree-id794 . -1) (undo-tree-id795 . -6) (undo-tree-id796 . -6) (undo-tree-id797 . -6) (undo-tree-id798 . -6)) (25287 2372 872830 0) 0 nil])
([nil nil ((404 . 408)) ((#("seed" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 404) (undo-tree-id790 . -4) (undo-tree-id791 . -4)) (25287 2372 839867 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -404) (undo-tree-id674 . -1) (#("e" 0 1 (fontified t)) . -405) (undo-tree-id675 . -1) (#("e" 0 1 (fontified t)) . -406) (undo-tree-id676 . -1) (#("d" 0 1 (fontified t)) . -407) (undo-tree-id677 . -1) 408) ((404 . 408)) (25287 2372 807500 0) 0 nil])
([nil nil ((404 . 408)) ((#("seed" 0 4 (fontified t)) . 404)) (25287 2372 774965 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -440) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("x" 0 1 (fontified t)) . -442) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("4" 0 1 (fontified t)) . -444) (undo-tree-id673 . -1) 445) ((440 . 445)) (25287 2372 740714 0) 0 nil])
([nil nil ((440 . 450)) ((#("set! seed " 0 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t)) . 440) (undo-tree-id788 . -10) (undo-tree-id789 . -10)) (25287 2372 708658 0) 0 nil])
([nil nil ((450 . 451)) ((#("x" 0 1 (fontified t)) . 450)) (25287 2372 210766 0) 0 nil])
([nil nil ((#("(lambda ()
      (set! x (rand-update x))
      x)" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t) 10 11 (fontified t) 11 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-5-face) fontified t) 26 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t) 42 48 (fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t)) . 161) (undo-tree-id662 . -50) (undo-tree-id663 . -11) (undo-tree-id664 . -50)) ((161 . 211)) (25287 2372 97819 0) 0 nil])
([nil nil ((291 . 294)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 291) (undo-tree-id779 . -1) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -3)) (25287 2371 943917 0) 0 nil])
([nil nil ((nil fontified nil 312 . 313) (nil fontified nil 308 . 312) (nil fontified nil 307 . 308) (nil fontified nil 306 . 307) (nil fontified nil 305 . 306) (nil fontified nil 301 . 305) (nil fontified nil 300 . 301) (nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 295 . 298) (nil fontified nil 294 . 295) (294 . 313)) ((#("(let ((x 50))
    )" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-3-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-4-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-3-face) fontified nil) 13 14 (fontified nil) 14 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-2-face) fontified nil rear-nonsticky t)) . 294) (undo-tree-id767 . -14) (undo-tree-id768 . -14) (undo-tree-id769 . -19) (undo-tree-id770 . -11) (undo-tree-id771 . 8) (undo-tree-id772 . -7) (undo-tree-id773 . 8) (undo-tree-id774 . 8) (undo-tree-id775 . -7) (undo-tree-id776 . 8) (undo-tree-id777 . 8) (undo-tree-id778 . -11) (nil fontified t 307 . 308) (nil fontified t 312 . 313)) (25287 2371 792265 0) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -301) (undo-tree-id758 . -1) (#(" " 0 1 (fontified t)) . -302) (undo-tree-id759 . -1) (#("5" 0 1 (fontified t)) . -303) (undo-tree-id760 . -1) (#("0" 0 1 (fontified t)) . -304) (undo-tree-id761 . -1) 305) ((301 . 305)) (25287 2371 650148 0) 0 nil] [nil nil ((#("x" 0 1 (fontified t)) . -301) (undo-tree-id658 . -1) (#(" " 0 1 (fontified t)) . -302) (undo-tree-id659 . -1) (#("5" 0 1 (fontified t)) . -303) (undo-tree-id660 . -1) (#("0" 0 1 (fontified t)) . -304) (undo-tree-id661 . -1) 305) ((301 . 305)) (25287 2334 7766 0) 0 nil])
([nil nil ((301 . 308)) ((#("seed 0 " 0 6 (fontified t) 6 7 (fontified t)) . 301) (undo-tree-id765 . -7) (undo-tree-id766 . -7)) (25287 2371 498112 0) 0 nil])
([nil nil ((301 . 304)) ((#("see" 0 3 (fontified t)) . 301) (undo-tree-id732 . 3) (undo-tree-id733 . 3) (undo-tree-id734 . 3)) (25287 2333 696152 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -307) (undo-tree-id757 . -1) 308) ((307 . 308)) (25287 2371 353791 0) 0 nil])
([nil nil ((314 . 316) (#("  " 0 2 (fontified nil)) . 313) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (315 . 316)) ((#("
" 0 1 (fontified nil)) . 315) (undo-tree-id706 . -1) (undo-tree-id707 . 1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . 1) (313 . 315) (#("  " 0 2 (fontified t)) . 314) (undo-tree-id717 . -2) (undo-tree-id718 . 2) (undo-tree-id719 . 2) (undo-tree-id720 . 2) (undo-tree-id721 . 2) (undo-tree-id722 . 2) (undo-tree-id723 . 2) (undo-tree-id724 . 2) (undo-tree-id725 . 2) (undo-tree-id726 . 2) (undo-tree-id727 . 2) (undo-tree-id728 . 2) (undo-tree-id729 . 2) (undo-tree-id730 . 2) (undo-tree-id731 . 2)) (25287 2329 479265 0) 0 nil] [nil nil ((308 . 312) (#("    " 0 4 (fontified nil)) . 307) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (311 . 312)) ((#("
" 0 1 (fontified nil)) . 311) (307 . 311) (#("    " 0 4 (fontified t)) . 308)) (25287 2318 315247 0) 0 nil] [nil nil ((nil rear-nonsticky nil 376 . 377) (nil fontified nil 376 . 377) (nil fontified nil 375 . 376) (nil fontified nil 366 . 375) (nil fontified nil 365 . 366) (nil fontified nil 364 . 365) (nil fontified nil 363 . 364) (nil fontified nil 347 . 363) (nil fontified nil 346 . 347) (nil fontified nil 345 . 346) (nil fontified nil 340 . 345) (nil fontified nil 336 . 340) (nil fontified nil 335 . 336) (nil fontified nil 334 . 335) (nil fontified nil 329 . 334) (nil fontified nil 328 . 329) (nil fontified nil 327 . 328) (nil fontified nil 319 . 327) (nil fontified nil 318 . 319) (nil fontified nil 312 . 318) (nil fontified nil 311 . 312) (311 . 377)) ((#("(define generate (begin (set! seed (rand-update seed))
			  seed))" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 16 (face font-lock-function-name-face fontified nil) 16 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 23 (face font-lock-keyword-face fontified nil) 23 24 (fontified nil) 24 25 (face (rainbow-delimiters-depth-5-face) fontified nil) 25 29 (face font-lock-keyword-face fontified nil) 29 34 (fontified nil) 34 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-6-face) fontified nil) 36 52 (fontified nil) 52 53 (face (rainbow-delimiters-depth-6-face) fontified nil) 53 54 (face (rainbow-delimiters-depth-5-face) fontified nil) 54 55 (fontified nil) 55 64 (fontified nil) 64 65 (face (rainbow-delimiters-depth-4-face) fontified nil) 65 66 (face (rainbow-delimiters-depth-3-face) rear-nonsticky nil fontified nil)) . 311) (nil fontified t 365 . 366) (nil rear-nonsticky t 376 . 377)) (25287 2311 314651 0) 0 nil] [nil nil ((304 . 307)) ((#("d 0" 0 3 (fontified t)) . 304)) (25287 2286 962763 0) 0 nil])
([nil nil ((#("		  " 0 4 (fontified nil)) . -380) (380 . 381) (#("	" 0 1 (fontified nil)) . 380) (378 . 380) (337 . 339) (335 . 336) (321 . 322)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 321) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("
" 0 1 (face font-lock-comment-face fontified t)) . 335) (undo-tree-id764 . -1) (#("  " 0 2 (fontified t)) . 337) (#("  " 0 2 (fontified nil)) . 378) (380 . 381) (#("	" 0 1 (fontified nil)) . 380) (380 . 384)) (25287 2371 175444 0) 0 nil])
nil
nil
nil
nil
([nil nil ((322 . 324)) ((#("kj" 0 2 (face font-lock-comment-face fontified t)) . 322)) (25287 2371 2492 0) 0 nil])
([nil nil ((#("(define (new-rand m)
  (let ((seed 0))
    )
  (de;kjfine generate
   (begin (set! seed (rand-update seed))
	  seed))
  (define reset (lambda (x) (set! seed x)))
  (define (dispatch m)
    (cond ((eq? m 'generate) generate)
	  ((eq? m 'reset) reset)
	  (else (error \"Unknown request -- MAKE-ACCOUNT\" m))))
  (dispatch m))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 17 (face font-lock-function-name-face fontified t) 17 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t) 21 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (fontified t) 39 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 44 45 (fontified t) 45 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 50 (fontified t) 50 51 (face font-lock-comment-delimiter-face fontified t) 51 53 (face font-lock-comment-face fontified t) 53 57 (face font-lock-comment-face fontified t) 57 58 (face font-lock-comment-face fontified t) 58 67 (face font-lock-comment-face fontified t) 67 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) fontified t) 78 82 (face font-lock-keyword-face fontified t) 82 87 (fontified t) 87 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-5-face) fontified t) 89 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-5-face) fontified t) 106 107 (face (rainbow-delimiters-depth-4-face) fontified t) 107 108 (fontified t) 108 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-3-face) fontified t) 116 117 (face (rainbow-delimiters-depth-2-face) fontified t) 117 118 (fontified t) 118 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-2-face) fontified t) 121 127 (face font-lock-keyword-face fontified t) 127 128 (fontified t) 128 133 (face font-lock-function-name-face fontified t) 133 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-3-face) fontified t) 135 137 (face font-lock-keyword-face fontified t) 137 141 (face font-lock-keyword-face fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-4-face) fontified t) 143 144 (fontified t) 144 145 (face (rainbow-delimiters-depth-4-face) fontified t) 145 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-4-face) fontified t) 147 151 (face font-lock-keyword-face fontified t) 151 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-4-face) fontified t) 159 160 (face (rainbow-delimiters-depth-3-face) fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 162 (fontified t) 162 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-2-face) fontified t) 165 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-3-face) fontified t) 173 174 (face font-lock-function-name-face fontified t) 174 181 (face font-lock-function-name-face fontified t) 181 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-3-face) fontified t) 184 185 (fontified t) 185 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-3-face) fontified t) 190 194 (face font-lock-keyword-face fontified t) 194 195 (fontified t) 195 196 (face (rainbow-delimiters-depth-4-face) fontified t) 196 197 (face (rainbow-delimiters-depth-5-face) fontified t) 197 205 (fontified t) 205 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-5-face) fontified t) 213 215 (fontified t) 215 219 (fontified t) 219 220 (fontified t) 220 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-4-face) fontified t) 223 224 (fontified t) 224 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-4-face) fontified t) 228 229 (face (rainbow-delimiters-depth-5-face) fontified t) 229 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-5-face) fontified t) 242 248 (fontified t) 248 249 (face (rainbow-delimiters-depth-4-face) fontified t) 249 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-4-face) fontified t) 254 258 (face font-lock-keyword-face fontified t) 258 259 (fontified t) 259 260 (face (rainbow-delimiters-depth-5-face) fontified t) 260 266 (fontified t) 266 299 (face font-lock-string-face fontified t) 299 301 (fontified t) 301 302 (face (rainbow-delimiters-depth-5-face) fontified t) 302 303 (face (rainbow-delimiters-depth-4-face) fontified t) 303 304 (face (rainbow-delimiters-depth-3-face) fontified t) 304 305 (face (rainbow-delimiters-depth-2-face) fontified t) 305 308 (fontified t) 308 309 (face (rainbow-delimiters-depth-2-face) fontified t) 309 319 (fontified t) 319 320 (face (rainbow-delimiters-depth-2-face) fontified t) 320 321 (face (rainbow-delimiters-depth-1-face) fontified t)) . 271) (undo-tree-id742 . -117) (undo-tree-id743 . -21) (undo-tree-id744 . -147) (undo-tree-id745 . -23) (undo-tree-id746 . -47) (undo-tree-id747 . -320) (undo-tree-id748 . -47) (undo-tree-id749 . -117) (undo-tree-id750 . -39) (undo-tree-id751 . -47) (undo-tree-id752 . -320) (undo-tree-id753 . -47) (undo-tree-id754 . 277) (undo-tree-id755 . 277) (undo-tree-id756 . -44)) ((271 . 592)) (25287 2370 551538 0) 0 nil])
([nil nil ((#(";((new-rand 'reset) 4) " 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t) 2 3 (face font-lock-comment-face fontified t) 3 18 (face font-lock-comment-face fontified t) 18 19 (face font-lock-comment-face fontified t) 19 21 (face font-lock-comment-face fontified t) 21 22 (face font-lock-comment-face fontified t) 22 23 (face font-lock-comment-face fontified t)) . 273)) ((273 . 296)) (25287 2370 361786 0) 0 nil])
([nil nil ((#(";(new-rand 'generate)" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t) 2 20 (face font-lock-comment-face fontified t) 20 21 (face font-lock-comment-face fontified t)) . 274)) ((274 . 295)) (25287 2370 193068 0) 0 nil])
([nil nil ((#("(define (rand-seed seed)
 (let ((x seed))
    (lambda ()
      (set! seed (rand-update x))
      seed)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 18 (face font-lock-function-name-face fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (face (rainbow-delimiters-depth-4-face) fontified t) 33 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-4-face) fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (fontified t) 42 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t) 47 53 (face font-lock-keyword-face fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-4-face) fontified t) 55 56 (face (rainbow-delimiters-depth-4-face) fontified t) 56 57 (fontified t) 57 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 68 (face font-lock-keyword-face fontified t) 68 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-5-face) fontified t) 75 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-5-face) fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 91 (fontified t) 91 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 103 104 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 165) (undo-tree-id735 . 1) (undo-tree-id736 . 1) (undo-tree-id737 . -26) (undo-tree-id738 . -25) (undo-tree-id739 . 104) (undo-tree-id740 . 104) (undo-tree-id741 . -104)) ((165 . 269)) (25287 2370 192797 0) 0 nil])
nil
